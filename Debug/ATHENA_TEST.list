
ATHENA_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008284  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015828  08008414  08008414  00009414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dc3c  0801dc3c  0001f008  2**0
                  CONTENTS
  4 .ARM          00000000  0801dc3c  0801dc3c  0001f008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801dc3c  0801dc3c  0001f008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dc3c  0801dc3c  0001ec3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801dc40  0801dc40  0001ec40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  0801dc44  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002928  20000008  0801dc4c  0001f008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002930  0801dc4c  0001f930  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157c9  00000000  00000000  0001f038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b72  00000000  00000000  00034801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  00038378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa6  00000000  00000000  00039858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f403  00000000  00000000  0003a7fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014cfe  00000000  00000000  00059c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0e1c  00000000  00000000  0006e8ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f71b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055a4  00000000  00000000  0010f760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00114d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000008 	.word	0x20000008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083fc 	.word	0x080083fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	080083fc 	.word	0x080083fc

080001d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001d4:	4b04      	ldr	r3, [pc, #16]	@ (80001e8 <__NVIC_GetPriorityGrouping+0x18>)
 80001d6:	68db      	ldr	r3, [r3, #12]
 80001d8:	0a1b      	lsrs	r3, r3, #8
 80001da:	f003 0307 	and.w	r3, r3, #7
}
 80001de:	4618      	mov	r0, r3
 80001e0:	46bd      	mov	sp, r7
 80001e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e6:	4770      	bx	lr
 80001e8:	e000ed00 	.word	0xe000ed00

080001ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	db0b      	blt.n	8000216 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	f003 021f 	and.w	r2, r3, #31
 8000204:	4907      	ldr	r1, [pc, #28]	@ (8000224 <__NVIC_EnableIRQ+0x38>)
 8000206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020a:	095b      	lsrs	r3, r3, #5
 800020c:	2001      	movs	r0, #1
 800020e:	fa00 f202 	lsl.w	r2, r0, r2
 8000212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	e000e100 	.word	0xe000e100

08000228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	6039      	str	r1, [r7, #0]
 8000232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000238:	2b00      	cmp	r3, #0
 800023a:	db0a      	blt.n	8000252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	b2da      	uxtb	r2, r3
 8000240:	490c      	ldr	r1, [pc, #48]	@ (8000274 <__NVIC_SetPriority+0x4c>)
 8000242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000246:	0112      	lsls	r2, r2, #4
 8000248:	b2d2      	uxtb	r2, r2
 800024a:	440b      	add	r3, r1
 800024c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000250:	e00a      	b.n	8000268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	b2da      	uxtb	r2, r3
 8000256:	4908      	ldr	r1, [pc, #32]	@ (8000278 <__NVIC_SetPriority+0x50>)
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	f003 030f 	and.w	r3, r3, #15
 800025e:	3b04      	subs	r3, #4
 8000260:	0112      	lsls	r2, r2, #4
 8000262:	b2d2      	uxtb	r2, r2
 8000264:	440b      	add	r3, r1
 8000266:	761a      	strb	r2, [r3, #24]
}
 8000268:	bf00      	nop
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr
 8000274:	e000e100 	.word	0xe000e100
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800027c:	b480      	push	{r7}
 800027e:	b089      	sub	sp, #36	@ 0x24
 8000280:	af00      	add	r7, sp, #0
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	f003 0307 	and.w	r3, r3, #7
 800028e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000290:	69fb      	ldr	r3, [r7, #28]
 8000292:	f1c3 0307 	rsb	r3, r3, #7
 8000296:	2b04      	cmp	r3, #4
 8000298:	bf28      	it	cs
 800029a:	2304      	movcs	r3, #4
 800029c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3304      	adds	r3, #4
 80002a2:	2b06      	cmp	r3, #6
 80002a4:	d902      	bls.n	80002ac <NVIC_EncodePriority+0x30>
 80002a6:	69fb      	ldr	r3, [r7, #28]
 80002a8:	3b03      	subs	r3, #3
 80002aa:	e000      	b.n	80002ae <NVIC_EncodePriority+0x32>
 80002ac:	2300      	movs	r3, #0
 80002ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b0:	f04f 32ff 	mov.w	r2, #4294967295
 80002b4:	69bb      	ldr	r3, [r7, #24]
 80002b6:	fa02 f303 	lsl.w	r3, r2, r3
 80002ba:	43da      	mvns	r2, r3
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	401a      	ands	r2, r3
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002c4:	f04f 31ff 	mov.w	r1, #4294967295
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	fa01 f303 	lsl.w	r3, r1, r3
 80002ce:	43d9      	mvns	r1, r3
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002d4:	4313      	orrs	r3, r2
         );
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3724      	adds	r7, #36	@ 0x24
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
	...

080002e4 <LL_AHB1_GRP1_EnableClock>:
	 *         @arg @ref LL_AHB1_GRP1_PERIPH_GFXMMU (*)
	 *
	 *         (*) value not defined in all devices.
	 * @retval None
	 */
	__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs) {
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
		__IO uint32_t tmpreg;
		SET_BIT(RCC->AHB1ENR, Periphs);
 80002ec:	4b08      	ldr	r3, [pc, #32]	@ (8000310 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80002f0:	4907      	ldr	r1, [pc, #28]	@ (8000310 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4313      	orrs	r3, r2
 80002f6:	648b      	str	r3, [r1, #72]	@ 0x48
		/* Delay after an RCC peripheral clock enabling */
		tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80002f8:	4b05      	ldr	r3, [pc, #20]	@ (8000310 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4013      	ands	r3, r2
 8000300:	60fb      	str	r3, [r7, #12]
		(void) tmpreg;
 8000302:	68fb      	ldr	r3, [r7, #12]
	}
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	40021000 	.word	0x40021000

08000314 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000318:	2001      	movs	r0, #1
 800031a:	f7ff ffe3 	bl	80002e4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800031e:	2002      	movs	r0, #2
 8000320:	f7ff ffe0 	bl	80002e4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000324:	f7ff ff54 	bl	80001d0 <__NVIC_GetPriorityGrouping>
 8000328:	4603      	mov	r3, r0
 800032a:	2200      	movs	r2, #0
 800032c:	2105      	movs	r1, #5
 800032e:	4618      	mov	r0, r3
 8000330:	f7ff ffa4 	bl	800027c <NVIC_EncodePriority>
 8000334:	4603      	mov	r3, r0
 8000336:	4619      	mov	r1, r3
 8000338:	200e      	movs	r0, #14
 800033a:	f7ff ff75 	bl	8000228 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800033e:	200e      	movs	r0, #14
 8000340:	f7ff ff54 	bl	80001ec <__NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000344:	f7ff ff44 	bl	80001d0 <__NVIC_GetPriorityGrouping>
 8000348:	4603      	mov	r3, r0
 800034a:	2200      	movs	r2, #0
 800034c:	2105      	movs	r1, #5
 800034e:	4618      	mov	r0, r3
 8000350:	f7ff ff94 	bl	800027c <NVIC_EncodePriority>
 8000354:	4603      	mov	r3, r0
 8000356:	4619      	mov	r1, r3
 8000358:	200f      	movs	r0, #15
 800035a:	f7ff ff65 	bl	8000228 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800035e:	200f      	movs	r0, #15
 8000360:	f7ff ff44 	bl	80001ec <__NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000364:	f7ff ff34 	bl	80001d0 <__NVIC_GetPriorityGrouping>
 8000368:	4603      	mov	r3, r0
 800036a:	2200      	movs	r2, #0
 800036c:	2105      	movs	r1, #5
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff84 	bl	800027c <NVIC_EncodePriority>
 8000374:	4603      	mov	r3, r0
 8000376:	4619      	mov	r1, r3
 8000378:	2010      	movs	r0, #16
 800037a:	f7ff ff55 	bl	8000228 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800037e:	2010      	movs	r0, #16
 8000380:	f7ff ff34 	bl	80001ec <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000384:	f7ff ff24 	bl	80001d0 <__NVIC_GetPriorityGrouping>
 8000388:	4603      	mov	r3, r0
 800038a:	2200      	movs	r2, #0
 800038c:	2105      	movs	r1, #5
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff ff74 	bl	800027c <NVIC_EncodePriority>
 8000394:	4603      	mov	r3, r0
 8000396:	4619      	mov	r1, r3
 8000398:	2011      	movs	r0, #17
 800039a:	f7ff ff45 	bl	8000228 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800039e:	2011      	movs	r0, #17
 80003a0:	f7ff ff24 	bl	80001ec <__NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80003a4:	f7ff ff14 	bl	80001d0 <__NVIC_GetPriorityGrouping>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2200      	movs	r2, #0
 80003ac:	2105      	movs	r1, #5
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff ff64 	bl	800027c <NVIC_EncodePriority>
 80003b4:	4603      	mov	r3, r0
 80003b6:	4619      	mov	r1, r3
 80003b8:	2044      	movs	r0, #68	@ 0x44
 80003ba:	f7ff ff35 	bl	8000228 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80003be:	2044      	movs	r0, #68	@ 0x44
 80003c0:	f7ff ff14 	bl	80001ec <__NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80003c4:	f7ff ff04 	bl	80001d0 <__NVIC_GetPriorityGrouping>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2200      	movs	r2, #0
 80003cc:	2105      	movs	r1, #5
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff54 	bl	800027c <NVIC_EncodePriority>
 80003d4:	4603      	mov	r3, r0
 80003d6:	4619      	mov	r1, r3
 80003d8:	2045      	movs	r0, #69	@ 0x45
 80003da:	f7ff ff25 	bl	8000228 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80003de:	2045      	movs	r0, #69	@ 0x45
 80003e0:	f7ff ff04 	bl	80001ec <__NVIC_EnableIRQ>

}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80003f8:	68fa      	ldr	r2, [r7, #12]
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	4013      	ands	r3, r2
 80003fe:	041a      	lsls	r2, r3, #16
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	43d9      	mvns	r1, r3
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	400b      	ands	r3, r1
 8000408:	431a      	orrs	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	619a      	str	r2, [r3, #24]
}
 800040e:	bf00      	nop
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
	...

0800041c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000420:	4a04      	ldr	r2, [pc, #16]	@ (8000434 <MX_FREERTOS_Init+0x18>)
 8000422:	2100      	movs	r1, #0
 8000424:	4804      	ldr	r0, [pc, #16]	@ (8000438 <MX_FREERTOS_Init+0x1c>)
 8000426:	f005 fa7b 	bl	8005920 <osThreadNew>
 800042a:	4603      	mov	r3, r0
 800042c:	4a03      	ldr	r2, [pc, #12]	@ (800043c <MX_FREERTOS_Init+0x20>)
 800042e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}
 8000434:	080084b4 	.word	0x080084b4
 8000438:	08000441 	.word	0x08000441
 800043c:	20001024 	.word	0x20001024

08000440 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
//  /* Infinite loop */

    I2C_expander_initialize();
 8000448:	f002 fa1e 	bl	8002888 <I2C_expander_initialize>
    initialize_sensors_I2C(&vl53l5dev_f,1);
 800044c:	2101      	movs	r1, #1
 800044e:	480a      	ldr	r0, [pc, #40]	@ (8000478 <StartDefaultTask+0x38>)
 8000450:	f001 fa94 	bl	800197c <initialize_sensors_I2C>
    vl53l5cx_start_ranging(&vl53l5dev_f);
 8000454:	4808      	ldr	r0, [pc, #32]	@ (8000478 <StartDefaultTask+0x38>)
 8000456:	f003 fbc5 	bl	8003be4 <vl53l5cx_start_ranging>
    while(1){
    	LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_1);
 800045a:	2102      	movs	r1, #2
 800045c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000460:	f7ff ffc2 	bl	80003e8 <LL_GPIO_TogglePin>
    	get_sensor_data(&vl53l5dev_f, &vl53l5_res_f);
 8000464:	4905      	ldr	r1, [pc, #20]	@ (800047c <StartDefaultTask+0x3c>)
 8000466:	4804      	ldr	r0, [pc, #16]	@ (8000478 <StartDefaultTask+0x38>)
 8000468:	f001 faec 	bl	8001a44 <get_sensor_data>
    	osDelay(5);
 800046c:	2005      	movs	r0, #5
 800046e:	f005 fae9 	bl	8005a44 <osDelay>
    	LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_1);
 8000472:	bf00      	nop
 8000474:	e7f1      	b.n	800045a <StartDefaultTask+0x1a>
 8000476:	bf00      	nop
 8000478:	20000024 	.word	0x20000024
 800047c:	20000ad4 	.word	0x20000ad4

08000480 <LL_AHB2_GRP1_EnableClock>:
	 *         @arg @ref LL_AHB2_GRP1_PERIPH_SDMMC1 (*)
	 *
	 *         (*) value not defined in all devices.
	 * @retval None
	 */
	__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs) {
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
		__IO uint32_t tmpreg;
		SET_BIT(RCC->AHB2ENR, Periphs);
 8000488:	4b08      	ldr	r3, [pc, #32]	@ (80004ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 800048a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800048c:	4907      	ldr	r1, [pc, #28]	@ (80004ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	64cb      	str	r3, [r1, #76]	@ 0x4c
		/* Delay after an RCC peripheral clock enabling */
		tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000494:	4b05      	ldr	r3, [pc, #20]	@ (80004ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000496:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4013      	ands	r3, r2
 800049c:	60fb      	str	r3, [r7, #12]
		(void) tmpreg;
 800049e:	68fb      	ldr	r3, [r7, #12]
	}
 80004a0:	bf00      	nop
 80004a2:	3714      	adds	r7, #20
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	40021000 	.word	0x40021000

080004b0 <LL_GPIO_SetOutputPin>:
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	683a      	ldr	r2, [r7, #0]
 80004be:	619a      	str	r2, [r3, #24]
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <LL_GPIO_ResetOutputPin>:
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	683a      	ldr	r2, [r7, #0]
 80004da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <MX_GPIO_Init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80004ee:	463b      	mov	r3, r7
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
 80004fc:	615a      	str	r2, [r3, #20]

	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80004fe:	2080      	movs	r0, #128	@ 0x80
 8000500:	f7ff ffbe 	bl	8000480 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000504:	2001      	movs	r0, #1
 8000506:	f7ff ffbb 	bl	8000480 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800050a:	2002      	movs	r0, #2
 800050c:	f7ff ffb8 	bl	8000480 <LL_AHB2_GRP1_EnableClock>

	/**/
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000510:	2102      	movs	r1, #2
 8000512:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000516:	f7ff ffd9 	bl	80004cc <LL_GPIO_ResetOutputPin>

	/**/
	LL_GPIO_ResetOutputPin(GPIOB,
 800051a:	2127      	movs	r1, #39	@ 0x27
 800051c:	481d      	ldr	r0, [pc, #116]	@ (8000594 <MX_GPIO_Init+0xac>)
 800051e:	f7ff ffd5 	bl	80004cc <LL_GPIO_ResetOutputPin>
			LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 | LL_GPIO_PIN_5);

	/**/
	LL_GPIO_SetOutputPin(W25QXX_CS_GPIO_Port, W25QXX_CS_Pin);
 8000522:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000526:	481b      	ldr	r0, [pc, #108]	@ (8000594 <MX_GPIO_Init+0xac>)
 8000528:	f7ff ffc2 	bl	80004b0 <LL_GPIO_SetOutputPin>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800052c:	2302      	movs	r3, #2
 800052e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000530:	2301      	movs	r3, #1
 8000532:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800053c:	2300      	movs	r3, #0
 800053e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000540:	463b      	mov	r3, r7
 8000542:	4619      	mov	r1, r3
 8000544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000548:	f004 fb6d 	bl	8004c26 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2
 800054c:	2327      	movs	r3, #39	@ 0x27
 800054e:	603b      	str	r3, [r7, #0]
			| LL_GPIO_PIN_5;
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000550:	2301      	movs	r3, #1
 8000552:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800055c:	2300      	movs	r3, #0
 800055e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000560:	463b      	mov	r3, r7
 8000562:	4619      	mov	r1, r3
 8000564:	480b      	ldr	r0, [pc, #44]	@ (8000594 <MX_GPIO_Init+0xac>)
 8000566:	f004 fb5e 	bl	8004c26 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = W25QXX_CS_Pin;
 800056a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800056e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000570:	2301      	movs	r3, #1
 8000572:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000574:	2302      	movs	r3, #2
 8000576:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800057c:	2301      	movs	r3, #1
 800057e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(W25QXX_CS_GPIO_Port, &GPIO_InitStruct);
 8000580:	463b      	mov	r3, r7
 8000582:	4619      	mov	r1, r3
 8000584:	4803      	ldr	r0, [pc, #12]	@ (8000594 <MX_GPIO_Init+0xac>)
 8000586:	f004 fb4e 	bl	8004c26 <LL_GPIO_Init>

}
 800058a:	bf00      	nop
 800058c:	3718      	adds	r7, #24
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	48000400 	.word	0x48000400

08000598 <__NVIC_GetPriorityGrouping>:
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800059c:	4b04      	ldr	r3, [pc, #16]	@ (80005b0 <__NVIC_GetPriorityGrouping+0x18>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	0a1b      	lsrs	r3, r3, #8
 80005a2:	f003 0307 	and.w	r3, r3, #7
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <__NVIC_EnableIRQ>:
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	db0b      	blt.n	80005de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f003 021f 	and.w	r2, r3, #31
 80005cc:	4907      	ldr	r1, [pc, #28]	@ (80005ec <__NVIC_EnableIRQ+0x38>)
 80005ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d2:	095b      	lsrs	r3, r3, #5
 80005d4:	2001      	movs	r0, #1
 80005d6:	fa00 f202 	lsl.w	r2, r0, r2
 80005da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	e000e100 	.word	0xe000e100

080005f0 <__NVIC_SetPriority>:
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	6039      	str	r1, [r7, #0]
 80005fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	db0a      	blt.n	800061a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	b2da      	uxtb	r2, r3
 8000608:	490c      	ldr	r1, [pc, #48]	@ (800063c <__NVIC_SetPriority+0x4c>)
 800060a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060e:	0112      	lsls	r2, r2, #4
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	440b      	add	r3, r1
 8000614:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000618:	e00a      	b.n	8000630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4908      	ldr	r1, [pc, #32]	@ (8000640 <__NVIC_SetPriority+0x50>)
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	f003 030f 	and.w	r3, r3, #15
 8000626:	3b04      	subs	r3, #4
 8000628:	0112      	lsls	r2, r2, #4
 800062a:	b2d2      	uxtb	r2, r2
 800062c:	440b      	add	r3, r1
 800062e:	761a      	strb	r2, [r3, #24]
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000e100 	.word	0xe000e100
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <NVIC_EncodePriority>:
{
 8000644:	b480      	push	{r7}
 8000646:	b089      	sub	sp, #36	@ 0x24
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	f1c3 0307 	rsb	r3, r3, #7
 800065e:	2b04      	cmp	r3, #4
 8000660:	bf28      	it	cs
 8000662:	2304      	movcs	r3, #4
 8000664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	3304      	adds	r3, #4
 800066a:	2b06      	cmp	r3, #6
 800066c:	d902      	bls.n	8000674 <NVIC_EncodePriority+0x30>
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	3b03      	subs	r3, #3
 8000672:	e000      	b.n	8000676 <NVIC_EncodePriority+0x32>
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000678:	f04f 32ff 	mov.w	r2, #4294967295
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	43da      	mvns	r2, r3
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	401a      	ands	r2, r3
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800068c:	f04f 31ff 	mov.w	r1, #4294967295
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	fa01 f303 	lsl.w	r3, r1, r3
 8000696:	43d9      	mvns	r1, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	4313      	orrs	r3, r2
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3724      	adds	r7, #36	@ 0x24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
	...

080006ac <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b087      	sub	sp, #28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80006bc:	4a0e      	ldr	r2, [pc, #56]	@ (80006f8 <LL_DMA_SetDataTransferDirection+0x4c>)
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	4413      	add	r3, r2
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	4413      	add	r3, r2
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80006d0:	f023 0310 	bic.w	r3, r3, #16
 80006d4:	4908      	ldr	r1, [pc, #32]	@ (80006f8 <LL_DMA_SetDataTransferDirection+0x4c>)
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	440a      	add	r2, r1
 80006da:	7812      	ldrb	r2, [r2, #0]
 80006dc:	4611      	mov	r1, r2
 80006de:	697a      	ldr	r2, [r7, #20]
 80006e0:	440a      	add	r2, r1
 80006e2:	4611      	mov	r1, r2
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80006ea:	bf00      	nop
 80006ec:	371c      	adds	r7, #28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	080084d8 	.word	0x080084d8

080006fc <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b087      	sub	sp, #28
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 800070c:	4a0d      	ldr	r2, [pc, #52]	@ (8000744 <LL_DMA_SetMode+0x48>)
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	4413      	add	r3, r2
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	4413      	add	r3, r2
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f023 0220 	bic.w	r2, r3, #32
 8000720:	4908      	ldr	r1, [pc, #32]	@ (8000744 <LL_DMA_SetMode+0x48>)
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	440b      	add	r3, r1
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4619      	mov	r1, r3
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	440b      	add	r3, r1
 800072e:	4619      	mov	r1, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4313      	orrs	r3, r2
 8000734:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000736:	bf00      	nop
 8000738:	371c      	adds	r7, #28
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	080084d8 	.word	0x080084d8

08000748 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000748:	b480      	push	{r7}
 800074a:	b087      	sub	sp, #28
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8000758:	4a0d      	ldr	r2, [pc, #52]	@ (8000790 <LL_DMA_SetPeriphIncMode+0x48>)
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	4413      	add	r3, r2
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	461a      	mov	r2, r3
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	4413      	add	r3, r2
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800076c:	4908      	ldr	r1, [pc, #32]	@ (8000790 <LL_DMA_SetPeriphIncMode+0x48>)
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	440b      	add	r3, r1
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	440b      	add	r3, r1
 800077a:	4619      	mov	r1, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4313      	orrs	r3, r2
 8000780:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000782:	bf00      	nop
 8000784:	371c      	adds	r7, #28
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	080084d8 	.word	0x080084d8

08000794 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000794:	b480      	push	{r7}
 8000796:	b087      	sub	sp, #28
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80007a4:	4a0d      	ldr	r2, [pc, #52]	@ (80007dc <LL_DMA_SetMemoryIncMode+0x48>)
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	4413      	add	r3, r2
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	4413      	add	r3, r2
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80007b8:	4908      	ldr	r1, [pc, #32]	@ (80007dc <LL_DMA_SetMemoryIncMode+0x48>)
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	440b      	add	r3, r1
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	440b      	add	r3, r1
 80007c6:	4619      	mov	r1, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80007ce:	bf00      	nop
 80007d0:	371c      	adds	r7, #28
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	080084d8 	.word	0x080084d8

080007e0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b087      	sub	sp, #28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80007f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000828 <LL_DMA_SetPeriphSize+0x48>)
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	4413      	add	r3, r2
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	4413      	add	r3, r2
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000804:	4908      	ldr	r1, [pc, #32]	@ (8000828 <LL_DMA_SetPeriphSize+0x48>)
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	440b      	add	r3, r1
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	440b      	add	r3, r1
 8000812:	4619      	mov	r1, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4313      	orrs	r3, r2
 8000818:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800081a:	bf00      	nop
 800081c:	371c      	adds	r7, #28
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	080084d8 	.word	0x080084d8

0800082c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 800082c:	b480      	push	{r7}
 800082e:	b087      	sub	sp, #28
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 800083c:	4a0d      	ldr	r2, [pc, #52]	@ (8000874 <LL_DMA_SetMemorySize+0x48>)
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	4413      	add	r3, r2
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	4413      	add	r3, r2
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8000850:	4908      	ldr	r1, [pc, #32]	@ (8000874 <LL_DMA_SetMemorySize+0x48>)
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	440b      	add	r3, r1
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	440b      	add	r3, r1
 800085e:	4619      	mov	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4313      	orrs	r3, r2
 8000864:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000866:	bf00      	nop
 8000868:	371c      	adds	r7, #28
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	080084d8 	.word	0x080084d8

08000878 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000878:	b480      	push	{r7}
 800087a:	b087      	sub	sp, #28
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8000888:	4a0d      	ldr	r2, [pc, #52]	@ (80008c0 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	4413      	add	r3, r2
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	4413      	add	r3, r2
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800089c:	4908      	ldr	r1, [pc, #32]	@ (80008c0 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	440b      	add	r3, r1
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	440b      	add	r3, r1
 80008aa:	4619      	mov	r1, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	600b      	str	r3, [r1, #0]
             Priority);
}
 80008b2:	bf00      	nop
 80008b4:	371c      	adds	r7, #28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	080084d8 	.word	0x080084d8

080008c4 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_6
  *         @arg @ref LL_DMA_REQUEST_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b089      	sub	sp, #36	@ 0x24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	33a8      	adds	r3, #168	@ 0xa8
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	210f      	movs	r1, #15
 80008dc:	fa01 f303 	lsl.w	r3, r1, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	401a      	ands	r2, r3
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	210f      	movs	r1, #15
 80008ea:	fa01 f303 	lsl.w	r3, r1, r3
 80008ee:	61bb      	str	r3, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	fa93 f3a3 	rbit	r3, r3
 80008f6:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d101      	bne.n	8000906 <LL_DMA_SetPeriphRequest+0x42>
  {
    return 32U;
 8000902:	2320      	movs	r3, #32
 8000904:	e003      	b.n	800090e <LL_DMA_SetPeriphRequest+0x4a>
  }
  return __builtin_clz(value);
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	fab3 f383 	clz	r3, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4619      	mov	r1, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	408b      	lsls	r3, r1
 8000914:	68f9      	ldr	r1, [r7, #12]
 8000916:	31a8      	adds	r1, #168	@ 0xa8
 8000918:	4313      	orrs	r3, r2
 800091a:	600b      	str	r3, [r1, #0]
             DMA_CSELR_C1S << ((Channel) * 4U), PeriphRequest << DMA_POSITION_CSELR_CXS);
}
 800091c:	bf00      	nop
 800091e:	3724      	adds	r7, #36	@ 0x24
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	601a      	str	r2, [r3, #0]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <LL_I2C_EnableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_EnableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	601a      	str	r2, [r3, #0]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800097c:	f023 0306 	bic.w	r3, r3, #6
 8000980:	68b9      	ldr	r1, [r7, #8]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	430a      	orrs	r2, r1
 8000986:	431a      	orrs	r2, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	60da      	str	r2, [r3, #12]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	60da      	str	r2, [r3, #12]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	605a      	str	r2, [r3, #4]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	0e1a      	lsrs	r2, r3, #24
 80009e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <LL_RCC_SetI2CClockSource+0x4c>)
 80009e6:	4413      	add	r3, r2
 80009e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3UL << ((I2CxSource & 0x001F0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x001F0000U) >> 16U)));
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	0c1b      	lsrs	r3, r3, #16
 80009f2:	f003 031f 	and.w	r3, r3, #31
 80009f6:	2103      	movs	r1, #3
 80009f8:	fa01 f303 	lsl.w	r3, r1, r3
 80009fc:	43db      	mvns	r3, r3
 80009fe:	401a      	ands	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	b2d9      	uxtb	r1, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	0c1b      	lsrs	r3, r3, #16
 8000a08:	f003 031f 	and.w	r3, r3, #31
 8000a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a10:	431a      	orrs	r2, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	601a      	str	r2, [r3, #0]
}
 8000a16:	bf00      	nop
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40021088 	.word	0x40021088

08000a28 <LL_AHB2_GRP1_EnableClock>:
	__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs) {
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
		SET_BIT(RCC->AHB2ENR, Periphs);
 8000a30:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a34:	4907      	ldr	r1, [pc, #28]	@ (8000a54 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	64cb      	str	r3, [r1, #76]	@ 0x4c
		tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a3c:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4013      	ands	r3, r2
 8000a44:	60fb      	str	r3, [r7, #12]
		(void) tmpreg;
 8000a46:	68fb      	ldr	r3, [r7, #12]
	}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	40021000 	.word	0x40021000

08000a58 <LL_APB1_GRP1_EnableClock>:
	 *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
	 *
	 *         (*) value not defined in all devices.
	 * @retval None
	 */
	__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs) {
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
		__IO uint32_t tmpreg;
		SET_BIT(RCC->APB1ENR1, Periphs);
 8000a60:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a62:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a64:	4907      	ldr	r1, [pc, #28]	@ (8000a84 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	658b      	str	r3, [r1, #88]	@ 0x58
		/* Delay after an RCC peripheral clock enabling */
		tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a6c:	4b05      	ldr	r3, [pc, #20]	@ (8000a84 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a6e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4013      	ands	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
		(void) tmpreg;
 8000a76:	68fb      	ldr	r3, [r7, #12]
	}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	40021000 	.word	0x40021000

08000a88 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08e      	sub	sp, #56	@ 0x38
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
 8000a9e:	615a      	str	r2, [r3, #20]
 8000aa0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
 8000ab0:	615a      	str	r2, [r3, #20]

  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 8000ab2:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 8000ab6:	f7ff ff8f 	bl	80009d8 <LL_RCC_SetI2CClockSource>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000aba:	2002      	movs	r0, #2
 8000abc:	f7ff ffb4 	bl	8000a28 <LL_AHB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8000ac0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ac4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	4619      	mov	r1, r3
 8000ade:	4851      	ldr	r0, [pc, #324]	@ (8000c24 <MX_I2C1_Init+0x19c>)
 8000ae0:	f004 f8a1 	bl	8004c26 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000ae4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000ae8:	f7ff ffb6 	bl	8000a58 <LL_APB1_GRP1_EnableClock>

  /* I2C1 DMA Init */

  /* I2C1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_7, LL_DMA_REQUEST_3);
 8000aec:	2203      	movs	r2, #3
 8000aee:	2106      	movs	r1, #6
 8000af0:	484d      	ldr	r0, [pc, #308]	@ (8000c28 <MX_I2C1_Init+0x1a0>)
 8000af2:	f7ff fee7 	bl	80008c4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2106      	movs	r1, #6
 8000afa:	484b      	ldr	r0, [pc, #300]	@ (8000c28 <MX_I2C1_Init+0x1a0>)
 8000afc:	f7ff fdd6 	bl	80006ac <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8000b00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b04:	2106      	movs	r1, #6
 8000b06:	4848      	ldr	r0, [pc, #288]	@ (8000c28 <MX_I2C1_Init+0x1a0>)
 8000b08:	f7ff feb6 	bl	8000878 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2106      	movs	r1, #6
 8000b10:	4845      	ldr	r0, [pc, #276]	@ (8000c28 <MX_I2C1_Init+0x1a0>)
 8000b12:	f7ff fdf3 	bl	80006fc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2106      	movs	r1, #6
 8000b1a:	4843      	ldr	r0, [pc, #268]	@ (8000c28 <MX_I2C1_Init+0x1a0>)
 8000b1c:	f7ff fe14 	bl	8000748 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8000b20:	2280      	movs	r2, #128	@ 0x80
 8000b22:	2106      	movs	r1, #6
 8000b24:	4840      	ldr	r0, [pc, #256]	@ (8000c28 <MX_I2C1_Init+0x1a0>)
 8000b26:	f7ff fe35 	bl	8000794 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2106      	movs	r1, #6
 8000b2e:	483e      	ldr	r0, [pc, #248]	@ (8000c28 <MX_I2C1_Init+0x1a0>)
 8000b30:	f7ff fe56 	bl	80007e0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2106      	movs	r1, #6
 8000b38:	483b      	ldr	r0, [pc, #236]	@ (8000c28 <MX_I2C1_Init+0x1a0>)
 8000b3a:	f7ff fe77 	bl	800082c <LL_DMA_SetMemorySize>

  /* I2C1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_6, LL_DMA_REQUEST_3);
 8000b3e:	2203      	movs	r2, #3
 8000b40:	2105      	movs	r1, #5
 8000b42:	4839      	ldr	r0, [pc, #228]	@ (8000c28 <MX_I2C1_Init+0x1a0>)
 8000b44:	f7ff febe 	bl	80008c4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000b48:	2210      	movs	r2, #16
 8000b4a:	2105      	movs	r1, #5
 8000b4c:	4836      	ldr	r0, [pc, #216]	@ (8000c28 <MX_I2C1_Init+0x1a0>)
 8000b4e:	f7ff fdad 	bl	80006ac <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8000b52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b56:	2105      	movs	r1, #5
 8000b58:	4833      	ldr	r0, [pc, #204]	@ (8000c28 <MX_I2C1_Init+0x1a0>)
 8000b5a:	f7ff fe8d 	bl	8000878 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2105      	movs	r1, #5
 8000b62:	4831      	ldr	r0, [pc, #196]	@ (8000c28 <MX_I2C1_Init+0x1a0>)
 8000b64:	f7ff fdca 	bl	80006fc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2105      	movs	r1, #5
 8000b6c:	482e      	ldr	r0, [pc, #184]	@ (8000c28 <MX_I2C1_Init+0x1a0>)
 8000b6e:	f7ff fdeb 	bl	8000748 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8000b72:	2280      	movs	r2, #128	@ 0x80
 8000b74:	2105      	movs	r1, #5
 8000b76:	482c      	ldr	r0, [pc, #176]	@ (8000c28 <MX_I2C1_Init+0x1a0>)
 8000b78:	f7ff fe0c 	bl	8000794 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2105      	movs	r1, #5
 8000b80:	4829      	ldr	r0, [pc, #164]	@ (8000c28 <MX_I2C1_Init+0x1a0>)
 8000b82:	f7ff fe2d 	bl	80007e0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2105      	movs	r1, #5
 8000b8a:	4827      	ldr	r0, [pc, #156]	@ (8000c28 <MX_I2C1_Init+0x1a0>)
 8000b8c:	f7ff fe4e 	bl	800082c <LL_DMA_SetMemorySize>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000b90:	f7ff fd02 	bl	8000598 <__NVIC_GetPriorityGrouping>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2200      	movs	r2, #0
 8000b98:	2105      	movs	r1, #5
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fd52 	bl	8000644 <NVIC_EncodePriority>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	201f      	movs	r0, #31
 8000ba6:	f7ff fd23 	bl	80005f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000baa:	201f      	movs	r0, #31
 8000bac:	f7ff fd02 	bl	80005b4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000bb0:	f7ff fcf2 	bl	8000598 <__NVIC_GetPriorityGrouping>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2105      	movs	r1, #5
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fd42 	bl	8000644 <NVIC_EncodePriority>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	2020      	movs	r0, #32
 8000bc6:	f7ff fd13 	bl	80005f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000bca:	2020      	movs	r0, #32
 8000bcc:	f7ff fcf2 	bl	80005b4 <__NVIC_EnableIRQ>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000bd0:	4816      	ldr	r0, [pc, #88]	@ (8000c2c <MX_I2C1_Init+0x1a4>)
 8000bd2:	f7ff fef1 	bl	80009b8 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000bd6:	4815      	ldr	r0, [pc, #84]	@ (8000c2c <MX_I2C1_Init+0x1a4>)
 8000bd8:	f7ff fede 	bl	8000998 <LL_I2C_DisableOwnAddress2>
  LL_I2C_EnableGeneralCall(I2C1);
 8000bdc:	4813      	ldr	r0, [pc, #76]	@ (8000c2c <MX_I2C1_Init+0x1a4>)
 8000bde:	f7ff feb3 	bl	8000948 <LL_I2C_EnableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000be2:	4812      	ldr	r0, [pc, #72]	@ (8000c2c <MX_I2C1_Init+0x1a4>)
 8000be4:	f7ff fea0 	bl	8000928 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00702991;
 8000bec:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <MX_I2C1_Init+0x1a8>)
 8000bee:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4808      	ldr	r0, [pc, #32]	@ (8000c2c <MX_I2C1_Init+0x1a4>)
 8000c0c:	f004 f91c 	bl	8004e48 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2100      	movs	r1, #0
 8000c14:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <MX_I2C1_Init+0x1a4>)
 8000c16:	f7ff fea7 	bl	8000968 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	3738      	adds	r7, #56	@ 0x38
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	48000400 	.word	0x48000400
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40005400 	.word	0x40005400
 8000c30:	00702991 	.word	0x00702991

08000c34 <__NVIC_SetPriorityGrouping>:
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	@ (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_SetPriority>:
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	db0a      	blt.n	8000cc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	490c      	ldr	r1, [pc, #48]	@ (8000ce4 <__NVIC_SetPriority+0x4c>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	440b      	add	r3, r1
 8000cbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000cc0:	e00a      	b.n	8000cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4908      	ldr	r1, [pc, #32]	@ (8000ce8 <__NVIC_SetPriority+0x50>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	3b04      	subs	r3, #4
 8000cd0:	0112      	lsls	r2, r2, #4
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	761a      	strb	r2, [r3, #24]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000e100 	.word	0xe000e100
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <NVIC_EncodePriority>:
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	@ 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f1c3 0307 	rsb	r3, r3, #7
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	bf28      	it	cs
 8000d0a:	2304      	movcs	r3, #4
 8000d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3304      	adds	r3, #4
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	d902      	bls.n	8000d1c <NVIC_EncodePriority+0x30>
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3b03      	subs	r3, #3
 8000d1a:	e000      	b.n	8000d1e <NVIC_EncodePriority+0x32>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43da      	mvns	r2, r3
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	401a      	ands	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3e:	43d9      	mvns	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	4313      	orrs	r3, r2
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3724      	adds	r7, #36	@ 0x24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <LL_RCC_HSE_Enable>:
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000d58:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <LL_RCC_HSE_Enable+0x1c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <LL_RCC_HSE_Enable+0x1c>)
 8000d5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40021000 	.word	0x40021000

08000d74 <LL_RCC_HSE_IsReady>:
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 8000d78:	4b07      	ldr	r3, [pc, #28]	@ (8000d98 <LL_RCC_HSE_IsReady+0x24>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000d84:	d101      	bne.n	8000d8a <LL_RCC_HSE_IsReady+0x16>
 8000d86:	2301      	movs	r3, #1
 8000d88:	e000      	b.n	8000d8c <LL_RCC_HSE_IsReady+0x18>
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000

08000d9c <LL_RCC_SetSysClkSource>:
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <LL_RCC_SetSysClkSource+0x24>)
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	f023 0203 	bic.w	r2, r3, #3
 8000dac:	4904      	ldr	r1, [pc, #16]	@ (8000dc0 <LL_RCC_SetSysClkSource+0x24>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	608b      	str	r3, [r1, #8]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <LL_RCC_GetSysClkSource>:
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <LL_RCC_GetSysClkSource+0x18>)
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f003 030c 	and.w	r3, r3, #12
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000

08000de0 <LL_RCC_SetAHBPrescaler>:
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <LL_RCC_SetAHBPrescaler+0x24>)
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000df0:	4904      	ldr	r1, [pc, #16]	@ (8000e04 <LL_RCC_SetAHBPrescaler+0x24>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	608b      	str	r3, [r1, #8]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	40021000 	.word	0x40021000

08000e08 <LL_RCC_SetAPB1Prescaler>:
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000e18:	4904      	ldr	r1, [pc, #16]	@ (8000e2c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	608b      	str	r3, [r1, #8]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	40021000 	.word	0x40021000

08000e30 <LL_RCC_SetAPB2Prescaler>:
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000e40:	4904      	ldr	r1, [pc, #16]	@ (8000e54 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	608b      	str	r3, [r1, #8]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	40021000 	.word	0x40021000

08000e58 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000e5c:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <LL_RCC_PLL_Enable+0x1c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a04      	ldr	r2, [pc, #16]	@ (8000e74 <LL_RCC_PLL_Enable+0x1c>)
 8000e62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40021000 	.word	0x40021000

08000e78 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000e7c:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <LL_RCC_PLL_IsReady+0x24>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000e88:	d101      	bne.n	8000e8e <LL_RCC_PLL_IsReady+0x16>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e000      	b.n	8000e90 <LL_RCC_PLL_IsReady+0x18>
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000eae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000eb0:	68da      	ldr	r2, [r3, #12]
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	68f9      	ldr	r1, [r7, #12]
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	4311      	orrs	r1, r2
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	0212      	lsls	r2, r2, #8
 8000ec0:	4311      	orrs	r1, r2
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	4904      	ldr	r1, [pc, #16]	@ (8000ed8 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	f9ff808c 	.word	0xf9ff808c

08000ee0 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000ee4:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	4a04      	ldr	r2, [pc, #16]	@ (8000efc <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000eea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000eee:	60d3      	str	r3, [r2, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000

08000f00 <LL_APB1_GRP1_EnableClock>:
	__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs) {
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
		SET_BIT(RCC->APB1ENR1, Periphs);
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f0a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000f0c:	4907      	ldr	r1, [pc, #28]	@ (8000f2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	658b      	str	r3, [r1, #88]	@ 0x58
		tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f14:	4b05      	ldr	r3, [pc, #20]	@ (8000f2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f16:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
		(void) tmpreg;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
	}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	40021000 	.word	0x40021000

08000f30 <LL_APB2_GRP1_EnableClock>:
	 *         @arg @ref LL_APB2_GRP1_PERIPH_DSI (*)
	 *
	 *         (*) value not defined in all devices.
	 * @retval None
	 */
	__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs) {
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
		__IO uint32_t tmpreg;
		SET_BIT(RCC->APB2ENR, Periphs);
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f3a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f3c:	4907      	ldr	r1, [pc, #28]	@ (8000f5c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	660b      	str	r3, [r1, #96]	@ 0x60
		/* Delay after an RCC peripheral clock enabling */
		tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f44:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f46:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
		(void) tmpreg;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
	}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	40021000 	.word	0x40021000

08000f60 <LL_FLASH_SetLatency>:
	 *         @arg @ref LL_FLASH_LATENCY_15 (*)
	 *
	 *         (*) value not defined in all devices.
	 * @retval None
	 */
	__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency) {
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <LL_FLASH_SetLatency+0x24>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f023 0207 	bic.w	r2, r3, #7
 8000f70:	4904      	ldr	r1, [pc, #16]	@ (8000f84 <LL_FLASH_SetLatency+0x24>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	600b      	str	r3, [r1, #0]
	}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	40022000 	.word	0x40022000

08000f88 <LL_FLASH_GetLatency>:
	 *         @arg @ref LL_FLASH_LATENCY_14 (*)
	 *         @arg @ref LL_FLASH_LATENCY_15 (*)
	 *
	 *         (*) value not defined in all devices.
	 */
	__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void) {
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
		return (uint32_t) (READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000f8c:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <LL_FLASH_GetLatency+0x18>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0307 	and.w	r3, r3, #7
	}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40022000 	.word	0x40022000

08000fa4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8000fb4:	4904      	ldr	r1, [pc, #16]	@ (8000fc8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	600b      	str	r3, [r1, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	40007000 	.word	0x40007000

08000fcc <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8000fd0:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fdc:	d101      	bne.n	8000fe2 <LL_PWR_IsActiveFlag_VOS+0x16>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <LL_PWR_IsActiveFlag_VOS+0x18>
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40007000 	.word	0x40007000

08000ff4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f7ff ff99 	bl	8000f30 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000ffe:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001002:	f7ff ff7d 	bl	8000f00 <LL_APB1_GRP1_EnableClock>

	/* System interrupt init*/
	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001006:	2003      	movs	r0, #3
 8001008:	f7ff fe14 	bl	8000c34 <__NVIC_SetPriorityGrouping>

	/* PendSV_IRQn interrupt configuration */
	NVIC_SetPriority(PendSV_IRQn,
 800100c:	f7ff fe36 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8001010:	4603      	mov	r3, r0
 8001012:	2200      	movs	r2, #0
 8001014:	210f      	movs	r1, #15
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fe68 	bl	8000cec <NVIC_EncodePriority>
 800101c:	4603      	mov	r3, r0
 800101e:	4619      	mov	r1, r3
 8001020:	f06f 0001 	mvn.w	r0, #1
 8001024:	f7ff fe38 	bl	8000c98 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 15, 0));
	/* SysTick_IRQn interrupt configuration */
	NVIC_SetPriority(SysTick_IRQn,
 8001028:	f7ff fe28 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 800102c:	4603      	mov	r3, r0
 800102e:	2200      	movs	r2, #0
 8001030:	210f      	movs	r1, #15
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fe5a 	bl	8000cec <NVIC_EncodePriority>
 8001038:	4603      	mov	r3, r0
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f7ff fe2a 	bl	8000c98 <__NVIC_SetPriority>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001044:	f000 f818 	bl	8001078 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001048:	f7ff fa4e 	bl	80004e8 <MX_GPIO_Init>
	MX_DMA_Init();
 800104c:	f7ff f962 	bl	8000314 <MX_DMA_Init>
	MX_I2C1_Init();
 8001050:	f7ff fd1a 	bl	8000a88 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8001054:	f000 ff70 	bl	8001f38 <MX_USART1_UART_Init>
	MX_SPI1_Init();
 8001058:	f000 fa92 	bl	8001580 <MX_SPI1_Init>
	MX_SPI2_Init();
 800105c:	f000 fae6 	bl	800162c <MX_SPI2_Init>
	MX_USART2_UART_Init();
 8001060:	f001 f820 	bl	80020a4 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001064:	f001 f882 	bl	800216c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001068:	f004 fc10 	bl	800588c <osKernelInitialize>

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 800106c:	f7ff f9d6 	bl	800041c <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8001070:	f004 fc30 	bl	80058d4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <main+0x80>

08001078 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 800107c:	2004      	movs	r0, #4
 800107e:	f7ff ff6f 	bl	8000f60 <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4) {
 8001082:	bf00      	nop
 8001084:	f7ff ff80 	bl	8000f88 <LL_FLASH_GetLatency>
 8001088:	4603      	mov	r3, r0
 800108a:	2b04      	cmp	r3, #4
 800108c:	d1fa      	bne.n	8001084 <SystemClock_Config+0xc>
	}
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800108e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001092:	f7ff ff87 	bl	8000fa4 <LL_PWR_SetRegulVoltageScaling>
	while (LL_PWR_IsActiveFlag_VOS() != 0) {
 8001096:	bf00      	nop
 8001098:	f7ff ff98 	bl	8000fcc <LL_PWR_IsActiveFlag_VOS>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1fa      	bne.n	8001098 <SystemClock_Config+0x20>
	}
	LL_RCC_HSE_Enable();
 80010a2:	f7ff fe57 	bl	8000d54 <LL_RCC_HSE_Enable>

	/* Wait till HSE is ready */
	while (LL_RCC_HSE_IsReady() != 1) {
 80010a6:	bf00      	nop
 80010a8:	f7ff fe64 	bl	8000d74 <LL_RCC_HSE_IsReady>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d1fa      	bne.n	80010a8 <SystemClock_Config+0x30>

	}
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_1, 20,
 80010b2:	2300      	movs	r3, #0
 80010b4:	2214      	movs	r2, #20
 80010b6:	2100      	movs	r1, #0
 80010b8:	2003      	movs	r0, #3
 80010ba:	f7ff fef1 	bl	8000ea0 <LL_RCC_PLL_ConfigDomain_SYS>
			LL_RCC_PLLR_DIV_2);
	LL_RCC_PLL_EnableDomain_SYS();
 80010be:	f7ff ff0f 	bl	8000ee0 <LL_RCC_PLL_EnableDomain_SYS>
	LL_RCC_PLL_Enable();
 80010c2:	f7ff fec9 	bl	8000e58 <LL_RCC_PLL_Enable>

	/* Wait till PLL is ready */
	while (LL_RCC_PLL_IsReady() != 1) {
 80010c6:	bf00      	nop
 80010c8:	f7ff fed6 	bl	8000e78 <LL_RCC_PLL_IsReady>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d1fa      	bne.n	80010c8 <SystemClock_Config+0x50>

	}
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80010d2:	2003      	movs	r0, #3
 80010d4:	f7ff fe62 	bl	8000d9c <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 80010d8:	bf00      	nop
 80010da:	f7ff fe73 	bl	8000dc4 <LL_RCC_GetSysClkSource>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b0c      	cmp	r3, #12
 80010e2:	d1fa      	bne.n	80010da <SystemClock_Config+0x62>

	}
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff fe7b 	bl	8000de0 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff fe8c 	bl	8000e08 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff fe9d 	bl	8000e30 <LL_RCC_SetAPB2Prescaler>

	LL_Init1msTick(80000000);
 80010f6:	4804      	ldr	r0, [pc, #16]	@ (8001108 <SystemClock_Config+0x90>)
 80010f8:	f004 fb76 	bl	80057e8 <LL_Init1msTick>

	LL_SetSystemCoreClock(80000000);
 80010fc:	4802      	ldr	r0, [pc, #8]	@ (8001108 <SystemClock_Config+0x90>)
 80010fe:	f004 fb81 	bl	8005804 <LL_SetSystemCoreClock>
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	04c4b400 	.word	0x04c4b400

0800110c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <Error_Handler+0x8>

08001118 <__NVIC_GetPriorityGrouping>:
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	@ (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_EnableIRQ>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db0b      	blt.n	800115e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 021f 	and.w	r2, r3, #31
 800114c:	4907      	ldr	r1, [pc, #28]	@ (800116c <__NVIC_EnableIRQ+0x38>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	2001      	movs	r0, #1
 8001156:	fa00 f202 	lsl.w	r2, r0, r2
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	@ (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	@ (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	@ 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	@ 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <LL_DMA_SetDataTransferDirection>:
{
 800122c:	b480      	push	{r7}
 800122e:	b087      	sub	sp, #28
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800123c:	4a0e      	ldr	r2, [pc, #56]	@ (8001278 <LL_DMA_SetDataTransferDirection+0x4c>)
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	4413      	add	r3, r2
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	4413      	add	r3, r2
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001250:	f023 0310 	bic.w	r3, r3, #16
 8001254:	4908      	ldr	r1, [pc, #32]	@ (8001278 <LL_DMA_SetDataTransferDirection+0x4c>)
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	440a      	add	r2, r1
 800125a:	7812      	ldrb	r2, [r2, #0]
 800125c:	4611      	mov	r1, r2
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	440a      	add	r2, r1
 8001262:	4611      	mov	r1, r2
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	4313      	orrs	r3, r2
 8001268:	600b      	str	r3, [r1, #0]
}
 800126a:	bf00      	nop
 800126c:	371c      	adds	r7, #28
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	080084e0 	.word	0x080084e0

0800127c <LL_DMA_SetMode>:
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 800128c:	4a0d      	ldr	r2, [pc, #52]	@ (80012c4 <LL_DMA_SetMode+0x48>)
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	4413      	add	r3, r2
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	4413      	add	r3, r2
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f023 0220 	bic.w	r2, r3, #32
 80012a0:	4908      	ldr	r1, [pc, #32]	@ (80012c4 <LL_DMA_SetMode+0x48>)
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	440b      	add	r3, r1
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	440b      	add	r3, r1
 80012ae:	4619      	mov	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]
}
 80012b6:	bf00      	nop
 80012b8:	371c      	adds	r7, #28
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	080084e0 	.word	0x080084e0

080012c8 <LL_DMA_SetPeriphIncMode>:
{
 80012c8:	b480      	push	{r7}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80012d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001310 <LL_DMA_SetPeriphIncMode+0x48>)
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	4413      	add	r3, r2
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	4413      	add	r3, r2
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80012ec:	4908      	ldr	r1, [pc, #32]	@ (8001310 <LL_DMA_SetPeriphIncMode+0x48>)
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	440b      	add	r3, r1
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	440b      	add	r3, r1
 80012fa:	4619      	mov	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
}
 8001302:	bf00      	nop
 8001304:	371c      	adds	r7, #28
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	080084e0 	.word	0x080084e0

08001314 <LL_DMA_SetMemoryIncMode>:
{
 8001314:	b480      	push	{r7}
 8001316:	b087      	sub	sp, #28
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8001324:	4a0d      	ldr	r2, [pc, #52]	@ (800135c <LL_DMA_SetMemoryIncMode+0x48>)
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	4413      	add	r3, r2
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001338:	4908      	ldr	r1, [pc, #32]	@ (800135c <LL_DMA_SetMemoryIncMode+0x48>)
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	440b      	add	r3, r1
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	440b      	add	r3, r1
 8001346:	4619      	mov	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4313      	orrs	r3, r2
 800134c:	600b      	str	r3, [r1, #0]
}
 800134e:	bf00      	nop
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	080084e0 	.word	0x080084e0

08001360 <LL_DMA_SetPeriphSize>:
{
 8001360:	b480      	push	{r7}
 8001362:	b087      	sub	sp, #28
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8001370:	4a0d      	ldr	r2, [pc, #52]	@ (80013a8 <LL_DMA_SetPeriphSize+0x48>)
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	4413      	add	r3, r2
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001384:	4908      	ldr	r1, [pc, #32]	@ (80013a8 <LL_DMA_SetPeriphSize+0x48>)
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	440b      	add	r3, r1
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	440b      	add	r3, r1
 8001392:	4619      	mov	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]
}
 800139a:	bf00      	nop
 800139c:	371c      	adds	r7, #28
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	080084e0 	.word	0x080084e0

080013ac <LL_DMA_SetMemorySize>:
{
 80013ac:	b480      	push	{r7}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80013bc:	4a0d      	ldr	r2, [pc, #52]	@ (80013f4 <LL_DMA_SetMemorySize+0x48>)
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	4413      	add	r3, r2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	4413      	add	r3, r2
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80013d0:	4908      	ldr	r1, [pc, #32]	@ (80013f4 <LL_DMA_SetMemorySize+0x48>)
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	440b      	add	r3, r1
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	440b      	add	r3, r1
 80013de:	4619      	mov	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]
}
 80013e6:	bf00      	nop
 80013e8:	371c      	adds	r7, #28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	080084e0 	.word	0x080084e0

080013f8 <LL_DMA_SetChannelPriorityLevel>:
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8001408:	4a0d      	ldr	r2, [pc, #52]	@ (8001440 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	4413      	add	r3, r2
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	4413      	add	r3, r2
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800141c:	4908      	ldr	r1, [pc, #32]	@ (8001440 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	440b      	add	r3, r1
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	440b      	add	r3, r1
 800142a:	4619      	mov	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4313      	orrs	r3, r2
 8001430:	600b      	str	r3, [r1, #0]
}
 8001432:	bf00      	nop
 8001434:	371c      	adds	r7, #28
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	080084e0 	.word	0x080084e0

08001444 <LL_DMA_SetPeriphRequest>:
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	@ 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	33a8      	adds	r3, #168	@ 0xa8
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	210f      	movs	r1, #15
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	401a      	ands	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	210f      	movs	r1, #15
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa93 f3a3 	rbit	r3, r3
 8001476:	617b      	str	r3, [r7, #20]
  return result;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <LL_DMA_SetPeriphRequest+0x42>
    return 32U;
 8001482:	2320      	movs	r3, #32
 8001484:	e003      	b.n	800148e <LL_DMA_SetPeriphRequest+0x4a>
  return __builtin_clz(value);
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	fab3 f383 	clz	r3, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	4619      	mov	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	408b      	lsls	r3, r1
 8001494:	68f9      	ldr	r1, [r7, #12]
 8001496:	31a8      	adds	r1, #168	@ 0xa8
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]
}
 800149c:	bf00      	nop
 800149e:	3724      	adds	r7, #36	@ 0x24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_AHB2_GRP1_EnableClock>:
	__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs) {
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
		SET_BIT(RCC->AHB2ENR, Periphs);
 80014b0:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80014b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014b4:	4907      	ldr	r1, [pc, #28]	@ (80014d4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	64cb      	str	r3, [r1, #76]	@ 0x4c
		tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014bc:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80014be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4013      	ands	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
		(void) tmpreg;
 80014c6:	68fb      	ldr	r3, [r7, #12]
	}
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	40021000 	.word	0x40021000

080014d8 <LL_APB1_GRP1_EnableClock>:
	__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs) {
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
		SET_BIT(RCC->APB1ENR1, Periphs);
 80014e0:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80014e4:	4907      	ldr	r1, [pc, #28]	@ (8001504 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	658b      	str	r3, [r1, #88]	@ 0x58
		tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014ee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4013      	ands	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]
		(void) tmpreg;
 80014f6:	68fb      	ldr	r3, [r7, #12]
	}
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	40021000 	.word	0x40021000

08001508 <LL_APB2_GRP1_EnableClock>:
	__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs) {
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
		SET_BIT(RCC->APB2ENR, Periphs);
 8001510:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001512:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001514:	4907      	ldr	r1, [pc, #28]	@ (8001534 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4313      	orrs	r3, r2
 800151a:	660b      	str	r3, [r1, #96]	@ 0x60
		tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800151c:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <LL_APB2_GRP1_EnableClock+0x2c>)
 800151e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4013      	ands	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
		(void) tmpreg;
 8001526:	68fb      	ldr	r3, [r7, #12]
	}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	40021000 	.word	0x40021000

08001538 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f023 0210 	bic.w	r2, r3, #16
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	605a      	str	r2, [r3, #4]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f043 0208 	orr.w	r2, r3, #8
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	605a      	str	r2, [r3, #4]
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b090      	sub	sp, #64	@ 0x40
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001586:	f107 0318 	add.w	r3, r7, #24
 800158a:	2228      	movs	r2, #40	@ 0x28
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f006 fefa 	bl	8008388 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	463b      	mov	r3, r7
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]
 80015a2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80015a4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80015a8:	f7ff ffae 	bl	8001508 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80015ac:	2001      	movs	r0, #1
 80015ae:	f7ff ff7b 	bl	80014a8 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80015b2:	23e0      	movs	r3, #224	@ 0xe0
 80015b4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015b6:	2302      	movs	r3, #2
 80015b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80015c6:	2305      	movs	r3, #5
 80015c8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	463b      	mov	r3, r7
 80015cc:	4619      	mov	r1, r3
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d2:	f003 fb28 	bl	8004c26 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80015da:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80015de:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_4BIT;
 80015e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015e4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80015ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80015f4:	2300      	movs	r3, #0
 80015f6:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80015f8:	2300      	movs	r3, #0
 80015fa:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001600:	2307      	movs	r3, #7
 8001602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001604:	f107 0318 	add.w	r3, r7, #24
 8001608:	4619      	mov	r1, r3
 800160a:	4807      	ldr	r0, [pc, #28]	@ (8001628 <MX_SPI1_Init+0xa8>)
 800160c:	f003 ffa4 	bl	8005558 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001610:	2100      	movs	r1, #0
 8001612:	4805      	ldr	r0, [pc, #20]	@ (8001628 <MX_SPI1_Init+0xa8>)
 8001614:	f7ff ff90 	bl	8001538 <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 8001618:	4803      	ldr	r0, [pc, #12]	@ (8001628 <MX_SPI1_Init+0xa8>)
 800161a:	f7ff ffa0 	bl	800155e <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	3740      	adds	r7, #64	@ 0x40
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40013000 	.word	0x40013000

0800162c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b090      	sub	sp, #64	@ 0x40
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001632:	f107 0318 	add.w	r3, r7, #24
 8001636:	2228      	movs	r2, #40	@ 0x28
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f006 fea4 	bl	8008388 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	463b      	mov	r3, r7
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001650:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001654:	f7ff ff40 	bl	80014d8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001658:	2002      	movs	r0, #2
 800165a:	f7ff ff25 	bl	80014a8 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800165e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001662:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001664:	2302      	movs	r3, #2
 8001666:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001674:	2305      	movs	r3, #5
 8001676:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001678:	463b      	mov	r3, r7
 800167a:	4619      	mov	r1, r3
 800167c:	4845      	ldr	r0, [pc, #276]	@ (8001794 <MX_SPI2_Init+0x168>)
 800167e:	f003 fad2 	bl	8004c26 <LL_GPIO_Init>

  /* SPI2 DMA Init */

  /* SPI2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_4, LL_DMA_REQUEST_1);
 8001682:	2201      	movs	r2, #1
 8001684:	2103      	movs	r1, #3
 8001686:	4844      	ldr	r0, [pc, #272]	@ (8001798 <MX_SPI2_Init+0x16c>)
 8001688:	f7ff fedc 	bl	8001444 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800168c:	2200      	movs	r2, #0
 800168e:	2103      	movs	r1, #3
 8001690:	4841      	ldr	r0, [pc, #260]	@ (8001798 <MX_SPI2_Init+0x16c>)
 8001692:	f7ff fdcb 	bl	800122c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 8001696:	2200      	movs	r2, #0
 8001698:	2103      	movs	r1, #3
 800169a:	483f      	ldr	r0, [pc, #252]	@ (8001798 <MX_SPI2_Init+0x16c>)
 800169c:	f7ff feac 	bl	80013f8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2103      	movs	r1, #3
 80016a4:	483c      	ldr	r0, [pc, #240]	@ (8001798 <MX_SPI2_Init+0x16c>)
 80016a6:	f7ff fde9 	bl	800127c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2103      	movs	r1, #3
 80016ae:	483a      	ldr	r0, [pc, #232]	@ (8001798 <MX_SPI2_Init+0x16c>)
 80016b0:	f7ff fe0a 	bl	80012c8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 80016b4:	2280      	movs	r2, #128	@ 0x80
 80016b6:	2103      	movs	r1, #3
 80016b8:	4837      	ldr	r0, [pc, #220]	@ (8001798 <MX_SPI2_Init+0x16c>)
 80016ba:	f7ff fe2b 	bl	8001314 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 80016be:	2200      	movs	r2, #0
 80016c0:	2103      	movs	r1, #3
 80016c2:	4835      	ldr	r0, [pc, #212]	@ (8001798 <MX_SPI2_Init+0x16c>)
 80016c4:	f7ff fe4c 	bl	8001360 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2103      	movs	r1, #3
 80016cc:	4832      	ldr	r0, [pc, #200]	@ (8001798 <MX_SPI2_Init+0x16c>)
 80016ce:	f7ff fe6d 	bl	80013ac <LL_DMA_SetMemorySize>

  /* SPI2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_5, LL_DMA_REQUEST_1);
 80016d2:	2201      	movs	r2, #1
 80016d4:	2104      	movs	r1, #4
 80016d6:	4830      	ldr	r0, [pc, #192]	@ (8001798 <MX_SPI2_Init+0x16c>)
 80016d8:	f7ff feb4 	bl	8001444 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80016dc:	2210      	movs	r2, #16
 80016de:	2104      	movs	r1, #4
 80016e0:	482d      	ldr	r0, [pc, #180]	@ (8001798 <MX_SPI2_Init+0x16c>)
 80016e2:	f7ff fda3 	bl	800122c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_LOW);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2104      	movs	r1, #4
 80016ea:	482b      	ldr	r0, [pc, #172]	@ (8001798 <MX_SPI2_Init+0x16c>)
 80016ec:	f7ff fe84 	bl	80013f8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2104      	movs	r1, #4
 80016f4:	4828      	ldr	r0, [pc, #160]	@ (8001798 <MX_SPI2_Init+0x16c>)
 80016f6:	f7ff fdc1 	bl	800127c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2104      	movs	r1, #4
 80016fe:	4826      	ldr	r0, [pc, #152]	@ (8001798 <MX_SPI2_Init+0x16c>)
 8001700:	f7ff fde2 	bl	80012c8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 8001704:	2280      	movs	r2, #128	@ 0x80
 8001706:	2104      	movs	r1, #4
 8001708:	4823      	ldr	r0, [pc, #140]	@ (8001798 <MX_SPI2_Init+0x16c>)
 800170a:	f7ff fe03 	bl	8001314 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_BYTE);
 800170e:	2200      	movs	r2, #0
 8001710:	2104      	movs	r1, #4
 8001712:	4821      	ldr	r0, [pc, #132]	@ (8001798 <MX_SPI2_Init+0x16c>)
 8001714:	f7ff fe24 	bl	8001360 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_BYTE);
 8001718:	2200      	movs	r2, #0
 800171a:	2104      	movs	r1, #4
 800171c:	481e      	ldr	r0, [pc, #120]	@ (8001798 <MX_SPI2_Init+0x16c>)
 800171e:	f7ff fe45 	bl	80013ac <LL_DMA_SetMemorySize>

  /* SPI2 interrupt Init */
  NVIC_SetPriority(SPI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001722:	f7ff fcf9 	bl	8001118 <__NVIC_GetPriorityGrouping>
 8001726:	4603      	mov	r3, r0
 8001728:	2200      	movs	r2, #0
 800172a:	2105      	movs	r1, #5
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fd49 	bl	80011c4 <NVIC_EncodePriority>
 8001732:	4603      	mov	r3, r0
 8001734:	4619      	mov	r1, r3
 8001736:	2024      	movs	r0, #36	@ 0x24
 8001738:	f7ff fd1a 	bl	8001170 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI2_IRQn);
 800173c:	2024      	movs	r0, #36	@ 0x24
 800173e:	f7ff fcf9 	bl	8001134 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001746:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800174a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800174c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001750:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001756:	2300      	movs	r3, #0
 8001758:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800175a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800175e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8001760:	2310      	movs	r3, #16
 8001762:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001764:	2300      	movs	r3, #0
 8001766:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 800176c:	2307      	movs	r3, #7
 800176e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001770:	f107 0318 	add.w	r3, r7, #24
 8001774:	4619      	mov	r1, r3
 8001776:	4809      	ldr	r0, [pc, #36]	@ (800179c <MX_SPI2_Init+0x170>)
 8001778:	f003 feee 	bl	8005558 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800177c:	2100      	movs	r1, #0
 800177e:	4807      	ldr	r0, [pc, #28]	@ (800179c <MX_SPI2_Init+0x170>)
 8001780:	f7ff feda 	bl	8001538 <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI2);
 8001784:	4805      	ldr	r0, [pc, #20]	@ (800179c <MX_SPI2_Init+0x170>)
 8001786:	f7ff feea 	bl	800155e <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	3740      	adds	r7, #64	@ 0x40
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	48000400 	.word	0x48000400
 8001798:	40020000 	.word	0x40020000
 800179c:	40003800 	.word	0x40003800

080017a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <NMI_Handler+0x4>

080017a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <HardFault_Handler+0x4>

080017b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <MemManage_Handler+0x4>

080017b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  #if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80017da:	f005 fd5b 	bl	8007294 <xTaskGetSchedulerState>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d001      	beq.n	80017e8 <SysTick_Handler+0x12>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80017e4:	f006 fb50 	bl	8007e88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel4_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_ER_IRQn 0 */

  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END SPI2_IRQn 0 */
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8001898:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <SystemInit+0x20>)
 800189a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800189e:	4a05      	ldr	r2, [pc, #20]	@ (80018b4 <SystemInit+0x20>)
 80018a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <config_sensors>:
#define VL53L5CX_FORWARD_I2C_ADDRESS            ((uint16_t)(VL53L5CX_DEFAULT_I2C_ADDRESS*4))
#define VL53L5CX_BACKWARD_I2C_ADDRESS            ((uint16_t)(VL53L5CX_FORWARD_I2C_ADDRESS+2))


bool config_sensors(VL53L5CX_Configuration *p_dev, uint16_t new_i2c_address)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	807b      	strh	r3, [r7, #2]
  p_dev->platform.address = VL53L5CX_DEFAULT_I2C_ADDRESS; // use default adress for first use
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2252      	movs	r2, #82	@ 0x52
 80018c8:	801a      	strh	r2, [r3, #0]

  // initialize the sensor
  uint8_t tof_res = vl53l5cx_init(p_dev);   if (tof_res != VL53L5CX_STATUS_OK) return false ;
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f001 fce8 	bl	80032a0 <vl53l5cx_init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	73fb      	strb	r3, [r7, #15]
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <config_sensors+0x26>
 80018da:	2300      	movs	r3, #0
 80018dc:	e04a      	b.n	8001974 <config_sensors+0xbc>
  //DEBUG_PRINT("ToF Config Result: %d \n", tof_init_res);

  // Configurations
  //change i2c address
  tof_res = vl53l5cx_set_i2c_address(p_dev, new_i2c_address);if (tof_res != VL53L5CX_STATUS_OK) return false ;
 80018de:	887b      	ldrh	r3, [r7, #2]
 80018e0:	4619      	mov	r1, r3
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f002 f948 	bl	8003b78 <vl53l5cx_set_i2c_address>
 80018e8:	4603      	mov	r3, r0
 80018ea:	73fb      	strb	r3, [r7, #15]
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <config_sensors+0x3e>
 80018f2:	2300      	movs	r3, #0
 80018f4:	e03e      	b.n	8001974 <config_sensors+0xbc>
  tof_res = vl53l5cx_set_resolution(p_dev, VL53L5CX_RESOLUTION_8X8);if (tof_res != VL53L5CX_STATUS_OK) return false ;
 80018f6:	2140      	movs	r1, #64	@ 0x40
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f002 fd7c 	bl	80043f6 <vl53l5cx_set_resolution>
 80018fe:	4603      	mov	r3, r0
 8001900:	73fb      	strb	r3, [r7, #15]
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <config_sensors+0x54>
 8001908:	2300      	movs	r3, #0
 800190a:	e033      	b.n	8001974 <config_sensors+0xbc>
  // 1Hz
  tof_res = vl53l5cx_set_ranging_frequency_hz(p_dev, 1);if (tof_res != VL53L5CX_STATUS_OK) return false ;
 800190c:	2101      	movs	r1, #1
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f002 fe45 	bl	800459e <vl53l5cx_set_ranging_frequency_hz>
 8001914:	4603      	mov	r3, r0
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <config_sensors+0x6a>
 800191e:	2300      	movs	r3, #0
 8001920:	e028      	b.n	8001974 <config_sensors+0xbc>
  tof_res = vl53l5cx_set_target_order(p_dev, VL53L5CX_TARGET_ORDER_CLOSEST);if (tof_res != VL53L5CX_STATUS_OK) return false ;
 8001922:	2101      	movs	r1, #1
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f002 fe5b 	bl	80045e0 <vl53l5cx_set_target_order>
 800192a:	4603      	mov	r3, r0
 800192c:	73fb      	strb	r3, [r7, #15]
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <config_sensors+0x80>
 8001934:	2300      	movs	r3, #0
 8001936:	e01d      	b.n	8001974 <config_sensors+0xbc>
  tof_res = vl53l5cx_set_ranging_mode(p_dev, VL53L5CX_RANGING_MODE_CONTINUOUS);if (tof_res != VL53L5CX_STATUS_OK) return false ;
 8001938:	2101      	movs	r1, #1
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f002 fe7c 	bl	8004638 <vl53l5cx_set_ranging_mode>
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <config_sensors+0x96>
 800194a:	2300      	movs	r3, #0
 800194c:	e012      	b.n	8001974 <config_sensors+0xbc>
  //tof_res = vl53l5cx_set_ranging_mode(p_dev, VL53L5CX_RANGING_MODE_AUTONOMOUS);if (tof_res != VL53L5CX_STATUS_OK) return false ;// TODO test it

  //Check for sensor to be alive
  uint8_t isAlive;
  tof_res =vl53l5cx_is_alive(p_dev,&isAlive);if (tof_res != VL53L5CX_STATUS_OK) return false;
 800194e:	f107 030e 	add.w	r3, r7, #14
 8001952:	4619      	mov	r1, r3
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f001 fc59 	bl	800320c <vl53l5cx_is_alive>
 800195a:	4603      	mov	r3, r0
 800195c:	73fb      	strb	r3, [r7, #15]
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <config_sensors+0xb0>
 8001964:	2300      	movs	r3, #0
 8001966:	e005      	b.n	8001974 <config_sensors+0xbc>
  if (isAlive != 1) return false;
 8001968:	7bbb      	ldrb	r3, [r7, #14]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d001      	beq.n	8001972 <config_sensors+0xba>
 800196e:	2300      	movs	r3, #0
 8001970:	e000      	b.n	8001974 <config_sensors+0xbc>

  // All Good!
  return true;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <initialize_sensors_I2C>:


bool initialize_sensors_I2C(VL53L5CX_Configuration *p_dev, uint8_t mode)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	70fb      	strb	r3, [r7, #3]
  bool status = false;
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]

  //reset I2C  //configure pins out/in for forward only

  //status = I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,I2C_RST_BACKWARD_PIN,I2C_RST_FORWARD_PIN);if (status == false)return status;

  if (mode == 1 && p_dev != NULL){
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d11f      	bne.n	80019d2 <initialize_sensors_I2C+0x56>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d01c      	beq.n	80019d2 <initialize_sensors_I2C+0x56>
    //enable forward only and config
    status = I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,LPN_FORWARD_PIN | LED_FORWARD_PIN );if (status == false)return status;
 8001998:	2114      	movs	r1, #20
 800199a:	2001      	movs	r0, #1
 800199c:	f000 ff5e 	bl	800285c <I2C_expander_set_register>
 80019a0:	4603      	mov	r3, r0
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	f083 0301 	eor.w	r3, r3, #1
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <initialize_sensors_I2C+0x38>
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	e043      	b.n	8001a3c <initialize_sensors_I2C+0xc0>
    status = config_sensors(p_dev,VL53L5CX_FORWARD_I2C_ADDRESS);if (status == false)return status;
 80019b4:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ff7d 	bl	80018b8 <config_sensors>
 80019be:	4603      	mov	r3, r0
 80019c0:	73fb      	strb	r3, [r7, #15]
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	f083 0301 	eor.w	r3, r3, #1
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <initialize_sensors_I2C+0x56>
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	e034      	b.n	8001a3c <initialize_sensors_I2C+0xc0>
  }
  if (mode == 2 && p_dev != NULL){
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d11f      	bne.n	8001a18 <initialize_sensors_I2C+0x9c>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d01c      	beq.n	8001a18 <initialize_sensors_I2C+0x9c>
    //enable backward only and config
    status = I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,LPN_BACKWARD_PIN | LED_BACKWARD_PIN); if (status == false)return status;
 80019de:	2121      	movs	r1, #33	@ 0x21
 80019e0:	2001      	movs	r0, #1
 80019e2:	f000 ff3b 	bl	800285c <I2C_expander_set_register>
 80019e6:	4603      	mov	r3, r0
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	f083 0301 	eor.w	r3, r3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <initialize_sensors_I2C+0x7e>
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	e020      	b.n	8001a3c <initialize_sensors_I2C+0xc0>
    status = config_sensors(p_dev,VL53L5CX_BACKWARD_I2C_ADDRESS);if (status == false)return status;
 80019fa:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ff5a 	bl	80018b8 <config_sensors>
 8001a04:	4603      	mov	r3, r0
 8001a06:	73fb      	strb	r3, [r7, #15]
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	f083 0301 	eor.w	r3, r3, #1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <initialize_sensors_I2C+0x9c>
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	e011      	b.n	8001a3c <initialize_sensors_I2C+0xc0>
  }
  //status = I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,0x00); //all off
  if (mode == 3){
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d10d      	bne.n	8001a3a <initialize_sensors_I2C+0xbe>
    //enable both forward & backward
    status = I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,LPN_BACKWARD_PIN | LED_BACKWARD_PIN|LPN_FORWARD_PIN | LED_FORWARD_PIN); if (status == false)return status;
 8001a1e:	2135      	movs	r1, #53	@ 0x35
 8001a20:	2001      	movs	r0, #1
 8001a22:	f000 ff1b 	bl	800285c <I2C_expander_set_register>
 8001a26:	4603      	mov	r3, r0
 8001a28:	73fb      	strb	r3, [r7, #15]
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	f083 0301 	eor.w	r3, r3, #1
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <initialize_sensors_I2C+0xbe>
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	e000      	b.n	8001a3c <initialize_sensors_I2C+0xc0>
  }
  return status;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <get_sensor_data>:

bool get_sensor_data(VL53L5CX_Configuration *p_dev,VL53L5CX_ResultsData *p_results){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]

  // Check  for data ready I2c
  uint8_t ranging_ready = 2;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	73bb      	strb	r3, [r7, #14]
  //ranging_ready --> 0 if data is not ready, or 1 if a new data is ready.
  uint8_t status = vl53l5cx_check_data_ready(p_dev, &ranging_ready);if (status != VL53L5CX_STATUS_OK) return false;
 8001a52:	f107 030e 	add.w	r3, r7, #14
 8001a56:	4619      	mov	r1, r3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f002 fa3d 	bl	8003ed8 <vl53l5cx_check_data_ready>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	73fb      	strb	r3, [r7, #15]
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <get_sensor_data+0x28>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e010      	b.n	8001a8e <get_sensor_data+0x4a>

  // 1 Get data in case it is ready
  if (ranging_ready == 1){
 8001a6c:	7bbb      	ldrb	r3, [r7, #14]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d10a      	bne.n	8001a88 <get_sensor_data+0x44>
    status = vl53l5cx_get_ranging_data(p_dev, p_results);if (status != VL53L5CX_STATUS_OK) return false;
 8001a72:	6839      	ldr	r1, [r7, #0]
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f002 fa7f 	bl	8003f78 <vl53l5cx_get_ranging_data>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	73fb      	strb	r3, [r7, #15]
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <get_sensor_data+0x48>
 8001a84:	2300      	movs	r3, #0
 8001a86:	e002      	b.n	8001a8e <get_sensor_data+0x4a>
  }else {
    //0  data in not ready yet
    return false;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e000      	b.n	8001a8e <get_sensor_data+0x4a>
  }

  // All good then
  //return false;// TODO deleet
  return true;
 8001a8c:	2301      	movs	r3, #1
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <__NVIC_GetPriorityGrouping>:
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9c:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0307 	and.w	r3, r3, #7
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_EnableIRQ>:
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0b      	blt.n	8001ade <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	4907      	ldr	r1, [pc, #28]	@ (8001aec <__NVIC_EnableIRQ+0x38>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPriority>:
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db0a      	blt.n	8001b1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	490c      	ldr	r1, [pc, #48]	@ (8001b3c <__NVIC_SetPriority+0x4c>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b18:	e00a      	b.n	8001b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4908      	ldr	r1, [pc, #32]	@ (8001b40 <__NVIC_SetPriority+0x50>)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3b04      	subs	r3, #4
 8001b28:	0112      	lsls	r2, r2, #4
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	761a      	strb	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000e100 	.word	0xe000e100
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <NVIC_EncodePriority>:
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	@ 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0307 	rsb	r3, r3, #7
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf28      	it	cs
 8001b62:	2304      	movcs	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d902      	bls.n	8001b74 <NVIC_EncodePriority+0x30>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b03      	subs	r3, #3
 8001b72:	e000      	b.n	8001b76 <NVIC_EncodePriority+0x32>
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	4313      	orrs	r3, r2
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	@ 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <LL_DMA_SetDataTransferDirection>:
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8001bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8001bf8 <LL_DMA_SetDataTransferDirection+0x4c>)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	4413      	add	r3, r2
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001bd0:	f023 0310 	bic.w	r3, r3, #16
 8001bd4:	4908      	ldr	r1, [pc, #32]	@ (8001bf8 <LL_DMA_SetDataTransferDirection+0x4c>)
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	440a      	add	r2, r1
 8001bda:	7812      	ldrb	r2, [r2, #0]
 8001bdc:	4611      	mov	r1, r2
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	440a      	add	r2, r1
 8001be2:	4611      	mov	r1, r2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
}
 8001bea:	bf00      	nop
 8001bec:	371c      	adds	r7, #28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	08008530 	.word	0x08008530

08001bfc <LL_DMA_SetMode>:
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c44 <LL_DMA_SetMode+0x48>)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	4413      	add	r3, r2
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	4413      	add	r3, r2
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 0220 	bic.w	r2, r3, #32
 8001c20:	4908      	ldr	r1, [pc, #32]	@ (8001c44 <LL_DMA_SetMode+0x48>)
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	440b      	add	r3, r1
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	440b      	add	r3, r1
 8001c2e:	4619      	mov	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]
}
 8001c36:	bf00      	nop
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	08008530 	.word	0x08008530

08001c48 <LL_DMA_SetPeriphIncMode>:
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8001c58:	4a0d      	ldr	r2, [pc, #52]	@ (8001c90 <LL_DMA_SetPeriphIncMode+0x48>)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	4413      	add	r3, r2
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001c6c:	4908      	ldr	r1, [pc, #32]	@ (8001c90 <LL_DMA_SetPeriphIncMode+0x48>)
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	440b      	add	r3, r1
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	440b      	add	r3, r1
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]
}
 8001c82:	bf00      	nop
 8001c84:	371c      	adds	r7, #28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	08008530 	.word	0x08008530

08001c94 <LL_DMA_SetMemoryIncMode>:
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cdc <LL_DMA_SetMemoryIncMode+0x48>)
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	4413      	add	r3, r2
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cb8:	4908      	ldr	r1, [pc, #32]	@ (8001cdc <LL_DMA_SetMemoryIncMode+0x48>)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	440b      	add	r3, r1
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	440b      	add	r3, r1
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	371c      	adds	r7, #28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	08008530 	.word	0x08008530

08001ce0 <LL_DMA_SetPeriphSize>:
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d28 <LL_DMA_SetPeriphSize+0x48>)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001d04:	4908      	ldr	r1, [pc, #32]	@ (8001d28 <LL_DMA_SetPeriphSize+0x48>)
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	440b      	add	r3, r1
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	440b      	add	r3, r1
 8001d12:	4619      	mov	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	371c      	adds	r7, #28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	08008530 	.word	0x08008530

08001d2c <LL_DMA_SetMemorySize>:
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8001d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d74 <LL_DMA_SetMemorySize+0x48>)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	4413      	add	r3, r2
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	4413      	add	r3, r2
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001d50:	4908      	ldr	r1, [pc, #32]	@ (8001d74 <LL_DMA_SetMemorySize+0x48>)
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	440b      	add	r3, r1
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	440b      	add	r3, r1
 8001d5e:	4619      	mov	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]
}
 8001d66:	bf00      	nop
 8001d68:	371c      	adds	r7, #28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	08008530 	.word	0x08008530

08001d78 <LL_DMA_SetChannelPriorityLevel>:
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8001d88:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc0 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	4413      	add	r3, r2
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001d9c:	4908      	ldr	r1, [pc, #32]	@ (8001dc0 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	440b      	add	r3, r1
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	440b      	add	r3, r1
 8001daa:	4619      	mov	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]
}
 8001db2:	bf00      	nop
 8001db4:	371c      	adds	r7, #28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	08008530 	.word	0x08008530

08001dc4 <LL_DMA_SetPeriphRequest>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	@ 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	33a8      	adds	r3, #168	@ 0xa8
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	210f      	movs	r1, #15
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	401a      	ands	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	210f      	movs	r1, #15
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fa93 f3a3 	rbit	r3, r3
 8001df6:	617b      	str	r3, [r7, #20]
  return result;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <LL_DMA_SetPeriphRequest+0x42>
    return 32U;
 8001e02:	2320      	movs	r3, #32
 8001e04:	e003      	b.n	8001e0e <LL_DMA_SetPeriphRequest+0x4a>
  return __builtin_clz(value);
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	4619      	mov	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	408b      	lsls	r3, r1
 8001e14:	68f9      	ldr	r1, [r7, #12]
 8001e16:	31a8      	adds	r1, #168	@ 0xa8
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	3724      	adds	r7, #36	@ 0x24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <LL_RCC_SetUSARTClockSource>:
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001e30:	4b09      	ldr	r3, [pc, #36]	@ (8001e58 <LL_RCC_SetUSARTClockSource+0x30>)
 8001e32:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	0c1b      	lsrs	r3, r3, #16
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	4905      	ldr	r1, [pc, #20]	@ (8001e58 <LL_RCC_SetUSARTClockSource+0x30>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000

08001e5c <LL_AHB2_GRP1_EnableClock>:
	__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs) {
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
		SET_BIT(RCC->AHB2ENR, Periphs);
 8001e64:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001e66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001e68:	4907      	ldr	r1, [pc, #28]	@ (8001e88 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	64cb      	str	r3, [r1, #76]	@ 0x4c
		tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e70:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001e72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4013      	ands	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
		(void) tmpreg;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
	}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	40021000 	.word	0x40021000

08001e8c <LL_APB1_GRP1_EnableClock>:
	__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs) {
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
		SET_BIT(RCC->APB1ENR1, Periphs);
 8001e94:	4b08      	ldr	r3, [pc, #32]	@ (8001eb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e96:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e98:	4907      	ldr	r1, [pc, #28]	@ (8001eb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	658b      	str	r3, [r1, #88]	@ 0x58
		tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001ea0:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ea2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
		(void) tmpreg;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
	}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	40021000 	.word	0x40021000

08001ebc <LL_APB2_GRP1_EnableClock>:
	__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs) {
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
		SET_BIT(RCC->APB2ENR, Periphs);
 8001ec4:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ec6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ec8:	4907      	ldr	r1, [pc, #28]	@ (8001ee8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	660b      	str	r3, [r1, #96]	@ 0x60
		tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ed0:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ed2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
		(void) tmpreg;
 8001eda:	68fb      	ldr	r3, [r7, #12]
	}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	40021000 	.word	0x40021000

08001eec <LL_USART_Enable>:
 * @brief  USART Enable
 * @rmtoll CR1          UE            LL_USART_Enable
 * @param  USARTx USART Instance
 * @retval None
 */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx) {
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
	SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f043 0201 	orr.w	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	601a      	str	r2, [r3, #0]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_USART_ConfigAsyncMode>:
 *         CR3          IREN          LL_USART_ConfigAsyncMode\n
 *         CR3          HDSEL         LL_USART_ConfigAsyncMode
 * @param  USARTx USART Instance
 * @retval None
 */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx) {
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	/* In Asynchronous mode, the following bits must be kept cleared:
	 - LINEN, CLKEN bits in the USART_CR2 register,
	 - SCEN, IREN and HDSEL bits in the USART_CR3 register.
	 */
	CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <MX_USART1_UART_Init>:

/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08e      	sub	sp, #56	@ 0x38
 8001f3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART1_Init 0 */

	/* USER CODE END USART1_Init 0 */

	LL_USART_InitTypeDef USART_InitStruct = { 0 };
 8001f3e:	f107 031c 	add.w	r3, r7, #28
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	611a      	str	r2, [r3, #16]
 8001f4e:	615a      	str	r2, [r3, #20]
 8001f50:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
 8001f60:	615a      	str	r2, [r3, #20]

	LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 8001f62:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001f66:	f7ff ff5f 	bl	8001e28 <LL_RCC_SetUSARTClockSource>

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001f6a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001f6e:	f7ff ffa5 	bl	8001ebc <LL_APB2_GRP1_EnableClock>

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001f72:	2002      	movs	r0, #2
 8001f74:	f7ff ff72 	bl	8001e5c <LL_AHB2_GRP1_EnableClock>
	/**USART1 GPIO Configuration
	 PB6   ------> USART1_TX
	 PB7   ------> USART1_RX
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6 | LL_GPIO_PIN_7;
 8001f78:	23c0      	movs	r3, #192	@ 0xc0
 8001f7a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001f80:	2303      	movs	r3, #3
 8001f82:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001f8c:	2307      	movs	r3, #7
 8001f8e:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	4619      	mov	r1, r3
 8001f94:	4840      	ldr	r0, [pc, #256]	@ (8002098 <MX_USART1_UART_Init+0x160>)
 8001f96:	f002 fe46 	bl	8004c26 <LL_GPIO_Init>

	/* USART1 DMA Init */

	/* USART1_RX Init */
	LL_DMA_SetPeriphRequest(DMA2, LL_DMA_CHANNEL_7, LL_DMA_REQUEST_2);
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	2106      	movs	r1, #6
 8001f9e:	483f      	ldr	r0, [pc, #252]	@ (800209c <MX_USART1_UART_Init+0x164>)
 8001fa0:	f7ff ff10 	bl	8001dc4 <LL_DMA_SetPeriphRequest>

	LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_7,
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2106      	movs	r1, #6
 8001fa8:	483c      	ldr	r0, [pc, #240]	@ (800209c <MX_USART1_UART_Init+0x164>)
 8001faa:	f7ff fdff 	bl	8001bac <LL_DMA_SetDataTransferDirection>
			LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

	LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_LOW);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2106      	movs	r1, #6
 8001fb2:	483a      	ldr	r0, [pc, #232]	@ (800209c <MX_USART1_UART_Init+0x164>)
 8001fb4:	f7ff fee0 	bl	8001d78 <LL_DMA_SetChannelPriorityLevel>

	LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2106      	movs	r1, #6
 8001fbc:	4837      	ldr	r0, [pc, #220]	@ (800209c <MX_USART1_UART_Init+0x164>)
 8001fbe:	f7ff fe1d 	bl	8001bfc <LL_DMA_SetMode>

	LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2106      	movs	r1, #6
 8001fc6:	4835      	ldr	r0, [pc, #212]	@ (800209c <MX_USART1_UART_Init+0x164>)
 8001fc8:	f7ff fe3e 	bl	8001c48 <LL_DMA_SetPeriphIncMode>

	LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001fcc:	2280      	movs	r2, #128	@ 0x80
 8001fce:	2106      	movs	r1, #6
 8001fd0:	4832      	ldr	r0, [pc, #200]	@ (800209c <MX_USART1_UART_Init+0x164>)
 8001fd2:	f7ff fe5f 	bl	8001c94 <LL_DMA_SetMemoryIncMode>

	LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2106      	movs	r1, #6
 8001fda:	4830      	ldr	r0, [pc, #192]	@ (800209c <MX_USART1_UART_Init+0x164>)
 8001fdc:	f7ff fe80 	bl	8001ce0 <LL_DMA_SetPeriphSize>

	LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2106      	movs	r1, #6
 8001fe4:	482d      	ldr	r0, [pc, #180]	@ (800209c <MX_USART1_UART_Init+0x164>)
 8001fe6:	f7ff fea1 	bl	8001d2c <LL_DMA_SetMemorySize>

	/* USART1_TX Init */
	LL_DMA_SetPeriphRequest(DMA2, LL_DMA_CHANNEL_6, LL_DMA_REQUEST_2);
 8001fea:	2202      	movs	r2, #2
 8001fec:	2105      	movs	r1, #5
 8001fee:	482b      	ldr	r0, [pc, #172]	@ (800209c <MX_USART1_UART_Init+0x164>)
 8001ff0:	f7ff fee8 	bl	8001dc4 <LL_DMA_SetPeriphRequest>

	LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_6,
 8001ff4:	2210      	movs	r2, #16
 8001ff6:	2105      	movs	r1, #5
 8001ff8:	4828      	ldr	r0, [pc, #160]	@ (800209c <MX_USART1_UART_Init+0x164>)
 8001ffa:	f7ff fdd7 	bl	8001bac <LL_DMA_SetDataTransferDirection>
			LL_DMA_DIRECTION_MEMORY_TO_PERIPH);

	LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2105      	movs	r1, #5
 8002002:	4826      	ldr	r0, [pc, #152]	@ (800209c <MX_USART1_UART_Init+0x164>)
 8002004:	f7ff feb8 	bl	8001d78 <LL_DMA_SetChannelPriorityLevel>

	LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8002008:	2200      	movs	r2, #0
 800200a:	2105      	movs	r1, #5
 800200c:	4823      	ldr	r0, [pc, #140]	@ (800209c <MX_USART1_UART_Init+0x164>)
 800200e:	f7ff fdf5 	bl	8001bfc <LL_DMA_SetMode>

	LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002012:	2200      	movs	r2, #0
 8002014:	2105      	movs	r1, #5
 8002016:	4821      	ldr	r0, [pc, #132]	@ (800209c <MX_USART1_UART_Init+0x164>)
 8002018:	f7ff fe16 	bl	8001c48 <LL_DMA_SetPeriphIncMode>

	LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800201c:	2280      	movs	r2, #128	@ 0x80
 800201e:	2105      	movs	r1, #5
 8002020:	481e      	ldr	r0, [pc, #120]	@ (800209c <MX_USART1_UART_Init+0x164>)
 8002022:	f7ff fe37 	bl	8001c94 <LL_DMA_SetMemoryIncMode>

	LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002026:	2200      	movs	r2, #0
 8002028:	2105      	movs	r1, #5
 800202a:	481c      	ldr	r0, [pc, #112]	@ (800209c <MX_USART1_UART_Init+0x164>)
 800202c:	f7ff fe58 	bl	8001ce0 <LL_DMA_SetPeriphSize>

	LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8002030:	2200      	movs	r2, #0
 8002032:	2105      	movs	r1, #5
 8002034:	4819      	ldr	r0, [pc, #100]	@ (800209c <MX_USART1_UART_Init+0x164>)
 8002036:	f7ff fe79 	bl	8001d2c <LL_DMA_SetMemorySize>

	/* USART1 interrupt Init */
	NVIC_SetPriority(USART1_IRQn,
 800203a:	f7ff fd2d 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 800203e:	4603      	mov	r3, r0
 8002040:	2200      	movs	r2, #0
 8002042:	2105      	movs	r1, #5
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fd7d 	bl	8001b44 <NVIC_EncodePriority>
 800204a:	4603      	mov	r3, r0
 800204c:	4619      	mov	r1, r3
 800204e:	2025      	movs	r0, #37	@ 0x25
 8002050:	f7ff fd4e 	bl	8001af0 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 0));
	NVIC_EnableIRQ(USART1_IRQn);
 8002054:	2025      	movs	r0, #37	@ 0x25
 8002056:	f7ff fd2d 	bl	8001ab4 <__NVIC_EnableIRQ>

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	USART_InitStruct.BaudRate = 115200;
 800205a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800205e:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002060:	2300      	movs	r3, #0
 8002062:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002064:	2300      	movs	r3, #0
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002068:	2300      	movs	r3, #0
 800206a:	62bb      	str	r3, [r7, #40]	@ 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800206c:	230c      	movs	r3, #12
 800206e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002070:	2300      	movs	r3, #0
 8002072:	633b      	str	r3, [r7, #48]	@ 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002074:	2300      	movs	r3, #0
 8002076:	637b      	str	r3, [r7, #52]	@ 0x34
	LL_USART_Init(USART1, &USART_InitStruct);
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	4619      	mov	r1, r3
 800207e:	4808      	ldr	r0, [pc, #32]	@ (80020a0 <MX_USART1_UART_Init+0x168>)
 8002080:	f003 fb32 	bl	80056e8 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART1);
 8002084:	4806      	ldr	r0, [pc, #24]	@ (80020a0 <MX_USART1_UART_Init+0x168>)
 8002086:	f7ff ff41 	bl	8001f0c <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART1);
 800208a:	4805      	ldr	r0, [pc, #20]	@ (80020a0 <MX_USART1_UART_Init+0x168>)
 800208c:	f7ff ff2e 	bl	8001eec <LL_USART_Enable>
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	3738      	adds	r7, #56	@ 0x38
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	48000400 	.word	0x48000400
 800209c:	40020400 	.word	0x40020400
 80020a0:	40013800 	.word	0x40013800

080020a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08e      	sub	sp, #56	@ 0x38
 80020a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART2_Init 0 */

	/* USER CODE END USART2_Init 0 */

	LL_USART_InitTypeDef USART_InitStruct = { 0 };
 80020aa:	f107 031c 	add.w	r3, r7, #28
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
 80020b8:	611a      	str	r2, [r3, #16]
 80020ba:	615a      	str	r2, [r3, #20]
 80020bc:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
 80020cc:	615a      	str	r2, [r3, #20]

	LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80020ce:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 80020d2:	f7ff fea9 	bl	8001e28 <LL_RCC_SetUSARTClockSource>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80020d6:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80020da:	f7ff fed7 	bl	8001e8c <LL_APB1_GRP1_EnableClock>

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80020de:	2001      	movs	r0, #1
 80020e0:	f7ff febc 	bl	8001e5c <LL_AHB2_GRP1_EnableClock>
	/**USART2 GPIO Configuration
	 PA2   ------> USART2_TX
	 PA3   ------> USART2_RX
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2 | LL_GPIO_PIN_3;
 80020e4:	230c      	movs	r3, #12
 80020e6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80020e8:	2302      	movs	r3, #2
 80020ea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80020ec:	2303      	movs	r3, #3
 80020ee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80020f8:	2307      	movs	r3, #7
 80020fa:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	4619      	mov	r1, r3
 8002100:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002104:	f002 fd8f 	bl	8004c26 <LL_GPIO_Init>

	/* USART2 interrupt Init */
	NVIC_SetPriority(USART2_IRQn,
 8002108:	f7ff fcc6 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 800210c:	4603      	mov	r3, r0
 800210e:	2200      	movs	r2, #0
 8002110:	2105      	movs	r1, #5
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fd16 	bl	8001b44 <NVIC_EncodePriority>
 8002118:	4603      	mov	r3, r0
 800211a:	4619      	mov	r1, r3
 800211c:	2026      	movs	r0, #38	@ 0x26
 800211e:	f7ff fce7 	bl	8001af0 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 0));
	NVIC_EnableIRQ(USART2_IRQn);
 8002122:	2026      	movs	r0, #38	@ 0x26
 8002124:	f7ff fcc6 	bl	8001ab4 <__NVIC_EnableIRQ>

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	USART_InitStruct.BaudRate = 115200;
 8002128:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800212c:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002136:	2300      	movs	r3, #0
 8002138:	62bb      	str	r3, [r7, #40]	@ 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800213a:	230c      	movs	r3, #12
 800213c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800213e:	2300      	movs	r3, #0
 8002140:	633b      	str	r3, [r7, #48]	@ 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002142:	2300      	movs	r3, #0
 8002144:	637b      	str	r3, [r7, #52]	@ 0x34
	LL_USART_Init(USART2, &USART_InitStruct);
 8002146:	f107 031c 	add.w	r3, r7, #28
 800214a:	4619      	mov	r1, r3
 800214c:	4806      	ldr	r0, [pc, #24]	@ (8002168 <MX_USART2_UART_Init+0xc4>)
 800214e:	f003 facb 	bl	80056e8 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART2);
 8002152:	4805      	ldr	r0, [pc, #20]	@ (8002168 <MX_USART2_UART_Init+0xc4>)
 8002154:	f7ff feda 	bl	8001f0c <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART2);
 8002158:	4803      	ldr	r0, [pc, #12]	@ (8002168 <MX_USART2_UART_Init+0xc4>)
 800215a:	f7ff fec7 	bl	8001eec <LL_USART_Enable>
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	3738      	adds	r7, #56	@ 0x38
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40004400 	.word	0x40004400

0800216c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b08e      	sub	sp, #56	@ 0x38
 8002170:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART3_Init 0 */

	/* USER CODE END USART3_Init 0 */

	LL_USART_InitTypeDef USART_InitStruct = { 0 };
 8002172:	f107 031c 	add.w	r3, r7, #28
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	60da      	str	r2, [r3, #12]
 8002180:	611a      	str	r2, [r3, #16]
 8002182:	615a      	str	r2, [r3, #20]
 8002184:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
 8002194:	615a      	str	r2, [r3, #20]

	LL_RCC_SetUSARTClockSource(LL_RCC_USART3_CLKSOURCE_PCLK1);
 8002196:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 800219a:	f7ff fe45 	bl	8001e28 <LL_RCC_SetUSARTClockSource>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800219e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80021a2:	f7ff fe73 	bl	8001e8c <LL_APB1_GRP1_EnableClock>

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80021a6:	2002      	movs	r0, #2
 80021a8:	f7ff fe58 	bl	8001e5c <LL_AHB2_GRP1_EnableClock>
	/**USART3 GPIO Configuration
	 PB10   ------> USART3_TX
	 PB11   ------> USART3_RX
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10 | LL_GPIO_PIN_11;
 80021ac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80021b0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021b2:	2302      	movs	r3, #2
 80021b4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80021b6:	2303      	movs	r3, #3
 80021b8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80021c2:	2307      	movs	r3, #7
 80021c4:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	4619      	mov	r1, r3
 80021ca:	4819      	ldr	r0, [pc, #100]	@ (8002230 <MX_USART3_UART_Init+0xc4>)
 80021cc:	f002 fd2b 	bl	8004c26 <LL_GPIO_Init>

	/* USART3 interrupt Init */
	NVIC_SetPriority(USART3_IRQn,
 80021d0:	f7ff fc62 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2200      	movs	r2, #0
 80021d8:	2105      	movs	r1, #5
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fcb2 	bl	8001b44 <NVIC_EncodePriority>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4619      	mov	r1, r3
 80021e4:	2027      	movs	r0, #39	@ 0x27
 80021e6:	f7ff fc83 	bl	8001af0 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 0));
	NVIC_EnableIRQ(USART3_IRQn);
 80021ea:	2027      	movs	r0, #39	@ 0x27
 80021ec:	f7ff fc62 	bl	8001ab4 <__NVIC_EnableIRQ>

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	USART_InitStruct.BaudRate = 115200;
 80021f0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80021f4:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80021fe:	2300      	movs	r3, #0
 8002200:	62bb      	str	r3, [r7, #40]	@ 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002202:	230c      	movs	r3, #12
 8002204:	62fb      	str	r3, [r7, #44]	@ 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002206:	2300      	movs	r3, #0
 8002208:	633b      	str	r3, [r7, #48]	@ 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800220a:	2300      	movs	r3, #0
 800220c:	637b      	str	r3, [r7, #52]	@ 0x34
	LL_USART_Init(USART3, &USART_InitStruct);
 800220e:	f107 031c 	add.w	r3, r7, #28
 8002212:	4619      	mov	r1, r3
 8002214:	4807      	ldr	r0, [pc, #28]	@ (8002234 <MX_USART3_UART_Init+0xc8>)
 8002216:	f003 fa67 	bl	80056e8 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART3);
 800221a:	4806      	ldr	r0, [pc, #24]	@ (8002234 <MX_USART3_UART_Init+0xc8>)
 800221c:	f7ff fe76 	bl	8001f0c <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART3);
 8002220:	4804      	ldr	r0, [pc, #16]	@ (8002234 <MX_USART3_UART_Init+0xc8>)
 8002222:	f7ff fe63 	bl	8001eec <LL_USART_Enable>
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8002226:	bf00      	nop
 8002228:	3738      	adds	r7, #56	@ 0x38
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	48000400 	.word	0x48000400
 8002234:	40004800 	.word	0x40004800

08002238 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002238:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002270 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800223c:	f7ff fb2a 	bl	8001894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002240:	480c      	ldr	r0, [pc, #48]	@ (8002274 <LoopForever+0x6>)
  ldr r1, =_edata
 8002242:	490d      	ldr	r1, [pc, #52]	@ (8002278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002244:	4a0d      	ldr	r2, [pc, #52]	@ (800227c <LoopForever+0xe>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002248:	e002      	b.n	8002250 <LoopCopyDataInit>

0800224a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800224a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800224c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800224e:	3304      	adds	r3, #4

08002250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002254:	d3f9      	bcc.n	800224a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002256:	4a0a      	ldr	r2, [pc, #40]	@ (8002280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002258:	4c0a      	ldr	r4, [pc, #40]	@ (8002284 <LoopForever+0x16>)
  movs r3, #0
 800225a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800225c:	e001      	b.n	8002262 <LoopFillZerobss>

0800225e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800225e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002260:	3204      	adds	r2, #4

08002262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002264:	d3fb      	bcc.n	800225e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002266:	f006 f897 	bl	8008398 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800226a:	f7fe fec3 	bl	8000ff4 <main>

0800226e <LoopForever>:

LoopForever:
    b LoopForever
 800226e:	e7fe      	b.n	800226e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002270:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002278:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 800227c:	0801dc44 	.word	0x0801dc44
  ldr r2, =_sbss
 8002280:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8002284:	20002930 	.word	0x20002930

08002288 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002288:	e7fe      	b.n	8002288 <ADC1_IRQHandler>

0800228a <LL_I2C_EnableDMAReq_TX>:
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_TXDMAEN);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	601a      	str	r2, [r3, #0]
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <LL_I2C_EnableDMAReq_RX>:
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXDMAEN);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	601a      	str	r2, [r3, #0]
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <LL_I2C_DMA_GetRegAddr>:
{
 80022ca:	b480      	push	{r7}
 80022cc:	b085      	sub	sp, #20
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	6039      	str	r1, [r7, #0]
  if (Direction == LL_I2C_DMA_REG_DATA_TRANSMIT)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d103      	bne.n	80022e2 <LL_I2C_DMA_GetRegAddr+0x18>
    data_reg_addr = (uint32_t) &(I2Cx->TXDR);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3328      	adds	r3, #40	@ 0x28
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	e002      	b.n	80022e8 <LL_I2C_DMA_GetRegAddr+0x1e>
    data_reg_addr = (uint32_t) &(I2Cx->RXDR);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3324      	adds	r3, #36	@ 0x24
 80022e6:	60fb      	str	r3, [r7, #12]
  return data_reg_addr;
 80022e8:	68fb      	ldr	r3, [r7, #12]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <LL_I2C_IsActiveFlag_TXE>:
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <LL_I2C_IsActiveFlag_TXE+0x18>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <LL_I2C_IsActiveFlag_TXE+0x1a>
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_I2C_IsActiveFlag_STOP>:
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b20      	cmp	r3, #32
 800232e:	d101      	bne.n	8002334 <LL_I2C_IsActiveFlag_STOP+0x18>
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <LL_I2C_IsActiveFlag_BUSY>:
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002352:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002356:	d101      	bne.n	800235c <LL_I2C_IsActiveFlag_BUSY+0x1a>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <LL_I2C_IsActiveFlag_BUSY+0x1c>
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <LL_I2C_ClearFlag_STOP>:
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f043 0220 	orr.w	r2, r3, #32
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	61da      	str	r2, [r3, #28]
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <LL_I2C_ClearFlag_TXE>:
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  WRITE_REG(I2Cx->ISR, I2C_ISR_TXE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	619a      	str	r2, [r3, #24]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	0d5b      	lsrs	r3, r3, #21
 80023ba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80023be:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <LL_I2C_HandleTransfer+0x48>)
 80023c0:	430b      	orrs	r3, r1
 80023c2:	43db      	mvns	r3, r3
 80023c4:	401a      	ands	r2, r3
 80023c6:	68b9      	ldr	r1, [r7, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4319      	orrs	r1, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	041b      	lsls	r3, r3, #16
 80023d0:	4319      	orrs	r1, r3
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	4319      	orrs	r1, r3
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	430b      	orrs	r3, r1
 80023da:	431a      	orrs	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	03ff7bff 	.word	0x03ff7bff

080023f0 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <LL_DMA_EnableChannel>:
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800241e:	4a0c      	ldr	r2, [pc, #48]	@ (8002450 <LL_DMA_EnableChannel+0x40>)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	4413      	add	r3, r2
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4908      	ldr	r1, [pc, #32]	@ (8002450 <LL_DMA_EnableChannel+0x40>)
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	440a      	add	r2, r1
 8002434:	7812      	ldrb	r2, [r2, #0]
 8002436:	4611      	mov	r1, r2
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	440a      	add	r2, r1
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6013      	str	r3, [r2, #0]
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	08008538 	.word	0x08008538

08002454 <LL_DMA_DisableChannel>:
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8002462:	4a0c      	ldr	r2, [pc, #48]	@ (8002494 <LL_DMA_DisableChannel+0x40>)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	4413      	add	r3, r2
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4908      	ldr	r1, [pc, #32]	@ (8002494 <LL_DMA_DisableChannel+0x40>)
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	440a      	add	r2, r1
 8002478:	7812      	ldrb	r2, [r2, #0]
 800247a:	4611      	mov	r1, r2
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	440a      	add	r2, r1
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	6013      	str	r3, [r2, #0]
}
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	08008538 	.word	0x08008538

08002498 <LL_DMA_SetDataLength>:
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80024a8:	4a0d      	ldr	r2, [pc, #52]	@ (80024e0 <LL_DMA_SetDataLength+0x48>)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	4413      	add	r3, r2
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	4413      	add	r3, r2
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	0c1b      	lsrs	r3, r3, #16
 80024ba:	041b      	lsls	r3, r3, #16
 80024bc:	4908      	ldr	r1, [pc, #32]	@ (80024e0 <LL_DMA_SetDataLength+0x48>)
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	440a      	add	r2, r1
 80024c2:	7812      	ldrb	r2, [r2, #0]
 80024c4:	4611      	mov	r1, r2
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	440a      	add	r2, r1
 80024ca:	4611      	mov	r1, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
}
 80024d2:	bf00      	nop
 80024d4:	371c      	adds	r7, #28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	08008538 	.word	0x08008538

080024e4 <LL_DMA_ConfigAddresses>:
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	2b10      	cmp	r3, #16
 80024fa:	d114      	bne.n	8002526 <LL_DMA_ConfigAddresses+0x42>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 80024fc:	4a17      	ldr	r2, [pc, #92]	@ (800255c <LL_DMA_ConfigAddresses+0x78>)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	4413      	add	r3, r2
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	4413      	add	r3, r2
 800250a:	461a      	mov	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 8002510:	4a12      	ldr	r2, [pc, #72]	@ (800255c <LL_DMA_ConfigAddresses+0x78>)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	4413      	add	r3, r2
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	4413      	add	r3, r2
 800251e:	461a      	mov	r2, r3
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	6093      	str	r3, [r2, #8]
}
 8002524:	e013      	b.n	800254e <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 8002526:	4a0d      	ldr	r2, [pc, #52]	@ (800255c <LL_DMA_ConfigAddresses+0x78>)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4413      	add	r3, r2
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	4413      	add	r3, r2
 8002534:	461a      	mov	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 800253a:	4a08      	ldr	r2, [pc, #32]	@ (800255c <LL_DMA_ConfigAddresses+0x78>)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	4413      	add	r3, r2
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	4413      	add	r3, r2
 8002548:	461a      	mov	r2, r3
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	60d3      	str	r3, [r2, #12]
}
 800254e:	bf00      	nop
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	08008538 	.word	0x08008538

08002560 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6)) ? 1UL : 0UL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002570:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002574:	d101      	bne.n	800257a <LL_DMA_IsActiveFlag_TC6+0x1a>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <LL_DMA_IsActiveFlag_TC6+0x1c>
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7)) ? 1UL : 0UL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002598:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800259c:	d101      	bne.n	80025a2 <LL_DMA_IsActiveFlag_TC7+0x1a>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <LL_DMA_IsActiveFlag_TC7+0x1c>
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <i2cdevWriteReg8>:
 *         - SUCCESS:
 *         - ERROR:   Not applicable
 * */

ErrorStatus i2cdevWriteReg8(I2C_TypeDef *I2Cx , uint8_t SlaveAddr_IC , uint8_t target_reg , uint8_t value)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	4608      	mov	r0, r1
 80025ba:	4611      	mov	r1, r2
 80025bc:	461a      	mov	r2, r3
 80025be:	4603      	mov	r3, r0
 80025c0:	70fb      	strb	r3, [r7, #3]
 80025c2:	460b      	mov	r3, r1
 80025c4:	70bb      	strb	r3, [r7, #2]
 80025c6:	4613      	mov	r3, r2
 80025c8:	707b      	strb	r3, [r7, #1]
	//Address process
	SlaveAddr_IC = SlaveAddr_IC<<1;
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	70fb      	strb	r3, [r7, #3]

	//I2C wait for : BUS BUSY
	uint32_t counter = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
	while(LL_I2C_IsActiveFlag_BUSY(I2Cx) == SET){
 80025d4:	e00b      	b.n	80025ee <i2cdevWriteReg8+0x3e>
		counter++;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3301      	adds	r3, #1
 80025da:	60fb      	str	r3, [r7, #12]
		if( counter == 25000 ) {
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d103      	bne.n	80025ee <i2cdevWriteReg8+0x3e>
			Error_Handler();
 80025e6:	f7fe fd91 	bl	800110c <Error_Handler>
			return 0xFF;
 80025ea:	23ff      	movs	r3, #255	@ 0xff
 80025ec:	e04b      	b.n	8002686 <i2cdevWriteReg8+0xd6>
	while(LL_I2C_IsActiveFlag_BUSY(I2Cx) == SET){
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff fea7 	bl	8002342 <LL_I2C_IsActiveFlag_BUSY>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d0ed      	beq.n	80025d6 <i2cdevWriteReg8+0x26>
		}
	}

	LL_I2C_HandleTransfer(I2Cx, SlaveAddr_IC, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80025fa:	78f9      	ldrb	r1, [r7, #3]
 80025fc:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <i2cdevWriteReg8+0xe0>)
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	2302      	movs	r3, #2
 8002608:	2200      	movs	r2, #0
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff feca 	bl	80023a4 <LL_I2C_HandleTransfer>

	//I2C wait for : TX REG BUSY AND CLEAR
	while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);
 8002610:	bf00      	nop
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff fe6f 	bl	80022f6 <LL_I2C_IsActiveFlag_TXE>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f9      	beq.n	8002612 <i2cdevWriteReg8+0x62>

    LL_I2C_TransmitData8(I2Cx, target_reg);
 800261e:	78bb      	ldrb	r3, [r7, #2]
 8002620:	4619      	mov	r1, r3
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff fee4 	bl	80023f0 <LL_I2C_TransmitData8>

	//I2C wait for : TX REG BUSY AND CLEAR
    counter=0;
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET){
 800262c:	e00e      	b.n	800264c <i2cdevWriteReg8+0x9c>
        counter++;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3301      	adds	r3, #1
 8002632:	60fb      	str	r3, [r7, #12]
        if( counter == 25000 ){
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800263a:	4293      	cmp	r3, r2
 800263c:	d106      	bne.n	800264c <i2cdevWriteReg8+0x9c>
            LL_I2C_ClearFlag_TXE(I2Cx);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff fea3 	bl	800238a <LL_I2C_ClearFlag_TXE>
            Error_Handler();
 8002644:	f7fe fd62 	bl	800110c <Error_Handler>
            return ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e01c      	b.n	8002686 <i2cdevWriteReg8+0xd6>
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET){
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff fe52 	bl	80022f6 <LL_I2C_IsActiveFlag_TXE>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0ea      	beq.n	800262e <i2cdevWriteReg8+0x7e>
        }
    }

    LL_I2C_TransmitData8(I2Cx, value);
 8002658:	787b      	ldrb	r3, [r7, #1]
 800265a:	4619      	mov	r1, r3
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff fec7 	bl	80023f0 <LL_I2C_TransmitData8>

	//I2C wait for : TX REG BUSY AND CLEAR
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);
 8002662:	bf00      	nop
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff fe46 	bl	80022f6 <LL_I2C_IsActiveFlag_TXE>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f9      	beq.n	8002664 <i2cdevWriteReg8+0xb4>

    //I2C wait for : STOP CLEAR
    while(LL_I2C_IsActiveFlag_STOP(I2Cx)==RESET);
 8002670:	bf00      	nop
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff fe52 	bl	800231c <LL_I2C_IsActiveFlag_STOP>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f9      	beq.n	8002672 <i2cdevWriteReg8+0xc2>

    LL_I2C_ClearFlag_STOP(I2Cx);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff fe73 	bl	800236a <LL_I2C_ClearFlag_STOP>

    return SUCCESS;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	80002000 	.word	0x80002000

08002694 <i2cdevReadReg16>:
 * */
void i2cdevReadReg16(I2C_TypeDef *I2Cx ,
						uint8_t SlaveAddr_IC ,
						uint16_t target_reg,
						uint8_t *p_values,
						uint32_t size){
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af02      	add	r7, sp, #8
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	460b      	mov	r3, r1
 80026a0:	72fb      	strb	r3, [r7, #11]
 80026a2:	4613      	mov	r3, r2
 80026a4:	813b      	strh	r3, [r7, #8]

	//Address process
	SlaveAddr_IC = SlaveAddr_IC<<1;
 80026a6:	7afb      	ldrb	r3, [r7, #11]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	72fb      	strb	r3, [r7, #11]

	LL_I2C_IsActiveFlag_BUSY(I2Cx);
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f7ff fe48 	bl	8002342 <LL_I2C_IsActiveFlag_BUSY>
	LL_I2C_HandleTransfer(I2Cx , SlaveAddr_IC , LL_I2C_ADDRSLAVE_7BIT , 2 , LL_I2C_MODE_AUTOEND , LL_I2C_GENERATE_START_WRITE);
 80026b2:	7af9      	ldrb	r1, [r7, #11]
 80026b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002770 <i2cdevReadReg16+0xdc>)
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2302      	movs	r3, #2
 80026c0:	2200      	movs	r2, #0
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f7ff fe6e 	bl	80023a4 <LL_I2C_HandleTransfer>
	//Send the Address
	LL_I2C_TransmitData8(I2Cx, (uint8_t)(target_reg >> 8));
 80026c8:	893b      	ldrh	r3, [r7, #8]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	4619      	mov	r1, r3
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f7ff fe8c 	bl	80023f0 <LL_I2C_TransmitData8>

	while (!LL_I2C_IsActiveFlag_TXE(I2Cx));
 80026d8:	bf00      	nop
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f7ff fe0b 	bl	80022f6 <LL_I2C_IsActiveFlag_TXE>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f9      	beq.n	80026da <i2cdevReadReg16+0x46>

	LL_I2C_TransmitData8(I2Cx, (uint8_t)(target_reg & 0xFF));
 80026e6:	893b      	ldrh	r3, [r7, #8]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	4619      	mov	r1, r3
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f7ff fe7f 	bl	80023f0 <LL_I2C_TransmitData8>

	while (!LL_I2C_IsActiveFlag_TXE(I2Cx));
 80026f2:	bf00      	nop
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f7ff fdfe 	bl	80022f6 <LL_I2C_IsActiveFlag_TXE>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f9      	beq.n	80026f4 <i2cdevReadReg16+0x60>

	//Send the Data
	LL_I2C_HandleTransfer(I2Cx, SlaveAddr_IC, LL_I2C_ADDRSLAVE_7BIT, size ,LL_I2C_MODE_AUTOEND ,LL_I2C_GENERATE_START_READ);
 8002700:	7af9      	ldrb	r1, [r7, #11]
 8002702:	4b1c      	ldr	r3, [pc, #112]	@ (8002774 <i2cdevReadReg16+0xe0>)
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	2200      	movs	r2, #0
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f7ff fe47 	bl	80023a4 <LL_I2C_HandleTransfer>

	//I2C DMA Transfer
	LL_DMA_ConfigAddresses(DMA1,
 8002716:	2101      	movs	r1, #1
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f7ff fdd6 	bl	80022ca <LL_I2C_DMA_GetRegAddr>
 800271e:	4602      	mov	r2, r0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2100      	movs	r1, #0
 8002724:	9100      	str	r1, [sp, #0]
 8002726:	2106      	movs	r1, #6
 8002728:	4813      	ldr	r0, [pc, #76]	@ (8002778 <i2cdevReadReg16+0xe4>)
 800272a:	f7ff fedb 	bl	80024e4 <LL_DMA_ConfigAddresses>
						   LL_DMA_CHANNEL_7,
						   LL_I2C_DMA_GetRegAddr(I2Cx,LL_I2C_DMA_REG_DATA_RECEIVE),
						   (uint32_t)p_values,
						   LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, size);
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	2106      	movs	r1, #6
 8002732:	4811      	ldr	r0, [pc, #68]	@ (8002778 <i2cdevReadReg16+0xe4>)
 8002734:	f7ff feb0 	bl	8002498 <LL_DMA_SetDataLength>
    LL_I2C_EnableDMAReq_RX(I2Cx);
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f7ff fdb6 	bl	80022aa <LL_I2C_EnableDMAReq_RX>
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 800273e:	2106      	movs	r1, #6
 8002740:	480d      	ldr	r0, [pc, #52]	@ (8002778 <i2cdevReadReg16+0xe4>)
 8002742:	f7ff fe65 	bl	8002410 <LL_DMA_EnableChannel>

    //Debug problem :TBD
    osDelay(10);
 8002746:	200a      	movs	r0, #10
 8002748:	f003 f97c 	bl	8005a44 <osDelay>
    while(!LL_DMA_IsActiveFlag_TC7(DMA1));
 800274c:	bf00      	nop
 800274e:	480a      	ldr	r0, [pc, #40]	@ (8002778 <i2cdevReadReg16+0xe4>)
 8002750:	f7ff ff1a 	bl	8002588 <LL_DMA_IsActiveFlag_TC7>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f9      	beq.n	800274e <i2cdevReadReg16+0xba>
    //TBD: double check if need Stop clear here.
    LL_I2C_ClearFlag_STOP(I2Cx);
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f7ff fe05 	bl	800236a <LL_I2C_ClearFlag_STOP>
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002760:	2106      	movs	r1, #6
 8002762:	4805      	ldr	r0, [pc, #20]	@ (8002778 <i2cdevReadReg16+0xe4>)
 8002764:	f7ff fe76 	bl	8002454 <LL_DMA_DisableChannel>

}
 8002768:	bf00      	nop
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	80002000 	.word	0x80002000
 8002774:	80002400 	.word	0x80002400
 8002778:	40020000 	.word	0x40020000

0800277c <i2cdevWriteReg16>:

void i2cdevWriteReg16(I2C_TypeDef *I2Cx,
                      uint8_t SlaveAddr_IC,
                      uint16_t target_reg,
                      uint8_t *p_values,
                      uint32_t size) {
 800277c:	b590      	push	{r4, r7, lr}
 800277e:	b087      	sub	sp, #28
 8002780:	af02      	add	r7, sp, #8
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	607b      	str	r3, [r7, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	72fb      	strb	r3, [r7, #11]
 800278a:	4613      	mov	r3, r2
 800278c:	813b      	strh	r3, [r7, #8]
    // Shift the Slave Address left by 1
    SlaveAddr_IC = SlaveAddr_IC << 1;
 800278e:	7afb      	ldrb	r3, [r7, #11]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	72fb      	strb	r3, [r7, #11]

    // Ensure the I2C bus is not busy before starting a new transfer
    while (LL_I2C_IsActiveFlag_BUSY(I2Cx));
 8002794:	bf00      	nop
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f7ff fdd3 	bl	8002342 <LL_I2C_IsActiveFlag_BUSY>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f9      	bne.n	8002796 <i2cdevWriteReg16+0x1a>

    // Begin the I2C write transfer to send the target register address
    LL_I2C_HandleTransfer(I2Cx, SlaveAddr_IC, LL_I2C_ADDRSLAVE_7BIT, 2+size, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80027a2:	7af9      	ldrb	r1, [r7, #11]
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	3302      	adds	r3, #2
 80027a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002854 <i2cdevWriteReg16+0xd8>)
 80027aa:	9201      	str	r2, [sp, #4]
 80027ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027b0:	9200      	str	r2, [sp, #0]
 80027b2:	2200      	movs	r2, #0
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f7ff fdf5 	bl	80023a4 <LL_I2C_HandleTransfer>

    // Send the high byte of the register address
    LL_I2C_TransmitData8(I2Cx, (uint8_t)(target_reg >> 8));
 80027ba:	893b      	ldrh	r3, [r7, #8]
 80027bc:	0a1b      	lsrs	r3, r3, #8
 80027be:	b29b      	uxth	r3, r3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	4619      	mov	r1, r3
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f7ff fe13 	bl	80023f0 <LL_I2C_TransmitData8>

    // Wait until the data transmission is complete
    while (!LL_I2C_IsActiveFlag_TXE(I2Cx));
 80027ca:	bf00      	nop
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f7ff fd92 	bl	80022f6 <LL_I2C_IsActiveFlag_TXE>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f9      	beq.n	80027cc <i2cdevWriteReg16+0x50>

    // Send the low byte of the register address
    LL_I2C_TransmitData8(I2Cx, (uint8_t)(target_reg & 0xFF));
 80027d8:	893b      	ldrh	r3, [r7, #8]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	4619      	mov	r1, r3
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f7ff fe06 	bl	80023f0 <LL_I2C_TransmitData8>

    // Wait until the data transmission is complete
    while (!LL_I2C_IsActiveFlag_TXE(I2Cx));
 80027e4:	bf00      	nop
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f7ff fd85 	bl	80022f6 <LL_I2C_IsActiveFlag_TXE>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f9      	beq.n	80027e6 <i2cdevWriteReg16+0x6a>
//    //I2C wait for : STOP CLEAR
//    while(LL_I2C_IsActiveFlag_STOP(I2Cx)==RESET);


    // Initiate the I2C transfer to send data with DMA
    LL_DMA_ConfigAddresses(DMA1,
 80027f2:	687c      	ldr	r4, [r7, #4]
 80027f4:	2100      	movs	r1, #0
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f7ff fd67 	bl	80022ca <LL_I2C_DMA_GetRegAddr>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2210      	movs	r2, #16
 8002800:	9200      	str	r2, [sp, #0]
 8002802:	4622      	mov	r2, r4
 8002804:	2105      	movs	r1, #5
 8002806:	4814      	ldr	r0, [pc, #80]	@ (8002858 <i2cdevWriteReg16+0xdc>)
 8002808:	f7ff fe6c 	bl	80024e4 <LL_DMA_ConfigAddresses>
                           LL_DMA_CHANNEL_6,
                           (uint32_t)p_values,
                           LL_I2C_DMA_GetRegAddr(I2Cx, LL_I2C_DMA_REG_DATA_TRANSMIT),
                           LL_DMA_DIRECTION_MEMORY_TO_PERIPH);

    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, size);
 800280c:	6a3a      	ldr	r2, [r7, #32]
 800280e:	2105      	movs	r1, #5
 8002810:	4811      	ldr	r0, [pc, #68]	@ (8002858 <i2cdevWriteReg16+0xdc>)
 8002812:	f7ff fe41 	bl	8002498 <LL_DMA_SetDataLength>
    LL_I2C_EnableDMAReq_TX(I2Cx);
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7ff fd37 	bl	800228a <LL_I2C_EnableDMAReq_TX>
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800281c:	2105      	movs	r1, #5
 800281e:	480e      	ldr	r0, [pc, #56]	@ (8002858 <i2cdevWriteReg16+0xdc>)
 8002820:	f7ff fdf6 	bl	8002410 <LL_DMA_EnableChannel>

    osDelay(10);
 8002824:	200a      	movs	r0, #10
 8002826:	f003 f90d 	bl	8005a44 <osDelay>
    // Wait briefly to ensure DMA starts properly
    while(!LL_DMA_IsActiveFlag_TC6(DMA1));
 800282a:	bf00      	nop
 800282c:	480a      	ldr	r0, [pc, #40]	@ (8002858 <i2cdevWriteReg16+0xdc>)
 800282e:	f7ff fe97 	bl	8002560 <LL_DMA_IsActiveFlag_TC6>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f9      	beq.n	800282c <i2cdevWriteReg16+0xb0>

    // Clear STOP flag to avoid any unwanted stoppage
    LL_I2C_ClearFlag_STOP(I2Cx);
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f7ff fd96 	bl	800236a <LL_I2C_ClearFlag_STOP>

    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 800283e:	2105      	movs	r1, #5
 8002840:	4805      	ldr	r0, [pc, #20]	@ (8002858 <i2cdevWriteReg16+0xdc>)
 8002842:	f7ff fe07 	bl	8002454 <LL_DMA_DisableChannel>

    // Clear STOP flag at the end of the transfer
    LL_I2C_ClearFlag_STOP(I2Cx);
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f7ff fd8f 	bl	800236a <LL_I2C_ClearFlag_STOP>
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	bd90      	pop	{r4, r7, pc}
 8002854:	80002000 	.word	0x80002000
 8002858:	40020000 	.word	0x40020000

0800285c <I2C_expander_set_register>:
#include "i2c_drv.h"

#include "tca6408a.h"

bool I2C_expander_set_register(uint8_t reg_address,uint8_t reg_value)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	460a      	mov	r2, r1
 8002866:	71fb      	strb	r3, [r7, #7]
 8002868:	4613      	mov	r3, r2
 800286a:	71bb      	strb	r3, [r7, #6]
	i2cdevWriteReg8(I2C1, I2C_EXPANDER_DEFAULT_I2C_ADDRESS, reg_address, reg_value);
 800286c:	79bb      	ldrb	r3, [r7, #6]
 800286e:	79fa      	ldrb	r2, [r7, #7]
 8002870:	2120      	movs	r1, #32
 8002872:	4804      	ldr	r0, [pc, #16]	@ (8002884 <I2C_expander_set_register+0x28>)
 8002874:	f7ff fe9c 	bl	80025b0 <i2cdevWriteReg8>

	return true;
 8002878:	2301      	movs	r3, #1
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40005400 	.word	0x40005400

08002888 <I2C_expander_initialize>:

    return true;
}

bool I2C_expander_initialize()
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
    uint8_t reg_value;

    //set all outputs zero
    reg_value = 0x30; // 1-->on, 0-->off
 800288e:	2330      	movs	r3, #48	@ 0x30
 8002890:	71fb      	strb	r3, [r7, #7]
    I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,0x00);
 8002892:	2100      	movs	r1, #0
 8002894:	2001      	movs	r0, #1
 8002896:	f7ff ffe1 	bl	800285c <I2C_expander_set_register>

    //configure inversion all 0
    reg_value = 0x00; // 1-->inveritng, 0-->non-inveritng
 800289a:	2300      	movs	r3, #0
 800289c:	71fb      	strb	r3, [r7, #7]
    i2cdevWriteReg8(I2C1, I2C_EXPANDER_DEFAULT_I2C_ADDRESS, POLARITY_INVERSION_REG_ADDRESS, reg_value);
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	2202      	movs	r2, #2
 80028a2:	2120      	movs	r1, #32
 80028a4:	480a      	ldr	r0, [pc, #40]	@ (80028d0 <I2C_expander_initialize+0x48>)
 80028a6:	f7ff fe83 	bl	80025b0 <i2cdevWriteReg8>

    //configure pins out/in
    reg_value = INTERRUPT_SENSE_BACKWARD_PIN|INTERRUPT_SENSE_FORWARD_PIN; // 1-->input, 0-->output
 80028aa:	23c0      	movs	r3, #192	@ 0xc0
 80028ac:	71fb      	strb	r3, [r7, #7]
    i2cdevWriteReg8(I2C1, I2C_EXPANDER_DEFAULT_I2C_ADDRESS, CONFIGURATION_REG_ADDRESS, reg_value);
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	2203      	movs	r2, #3
 80028b2:	2120      	movs	r1, #32
 80028b4:	4806      	ldr	r0, [pc, #24]	@ (80028d0 <I2C_expander_initialize+0x48>)
 80028b6:	f7ff fe7b 	bl	80025b0 <i2cdevWriteReg8>

    reg_value=LPN_FORWARD_PIN | LED_FORWARD_PIN;
 80028ba:	2314      	movs	r3, #20
 80028bc:	71fb      	strb	r3, [r7, #7]
    I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,LPN_FORWARD_PIN | LED_FORWARD_PIN );
 80028be:	2114      	movs	r1, #20
 80028c0:	2001      	movs	r0, #1
 80028c2:	f7ff ffcb 	bl	800285c <I2C_expander_set_register>

    return true;
 80028c6:	2301      	movs	r3, #1
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40005400 	.word	0x40005400

080028d4 <RdByte>:

uint8_t RdByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	460b      	mov	r3, r1
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	817b      	strh	r3, [r7, #10]
	uint16_t Address= (p_platform->address)>>1;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	085b      	lsrs	r3, r3, #1
 80028e8:	82fb      	strh	r3, [r7, #22]
	i2cdevReadReg16(I2C1, Address, RegisterAdress, p_value, 1);
 80028ea:	8afb      	ldrh	r3, [r7, #22]
 80028ec:	b2d9      	uxtb	r1, r3
 80028ee:	897a      	ldrh	r2, [r7, #10]
 80028f0:	2301      	movs	r3, #1
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4804      	ldr	r0, [pc, #16]	@ (8002908 <RdByte+0x34>)
 80028f8:	f7ff fecc 	bl	8002694 <i2cdevReadReg16>
	return 0;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40005400 	.word	0x40005400

0800290c <WrByte>:

uint8_t WrByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af02      	add	r7, sp, #8
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
 8002918:	4613      	mov	r3, r2
 800291a:	707b      	strb	r3, [r7, #1]
	uint8_t rx_buffer[1];
	rx_buffer[0]=value;
 800291c:	787b      	ldrb	r3, [r7, #1]
 800291e:	733b      	strb	r3, [r7, #12]
	uint16_t Address= (p_platform->address)>>1;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	085b      	lsrs	r3, r3, #1
 8002926:	81fb      	strh	r3, [r7, #14]
	i2cdevWriteReg16(I2C1, Address, RegisterAdress, rx_buffer, 1);
 8002928:	89fb      	ldrh	r3, [r7, #14]
 800292a:	b2d9      	uxtb	r1, r3
 800292c:	f107 030c 	add.w	r3, r7, #12
 8002930:	887a      	ldrh	r2, [r7, #2]
 8002932:	2001      	movs	r0, #1
 8002934:	9000      	str	r0, [sp, #0]
 8002936:	4804      	ldr	r0, [pc, #16]	@ (8002948 <WrByte+0x3c>)
 8002938:	f7ff ff20 	bl	800277c <i2cdevWriteReg16>
	return 0;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40005400 	.word	0x40005400

0800294c <WrMulti>:
uint8_t WrMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	@ 0x28
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	460b      	mov	r3, r1
 800295a:	817b      	strh	r3, [r7, #10]
	uint16_t Address= (p_platform->address)>>1;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	085b      	lsrs	r3, r3, #1
 8002962:	833b      	strh	r3, [r7, #24]
	uint32_t remaining_size = size;  // Calculate remaining size to write
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	61fb      	str	r3, [r7, #28]
    uint16_t current_address =RegisterAdress;  // Initialize current address
 8002968:	897b      	ldrh	r3, [r7, #10]
 800296a:	837b      	strh	r3, [r7, #26]
	while(remaining_size> 0){
 800296c:	e01d      	b.n	80029aa <WrMulti+0x5e>
		uint32_t current_chunk_size = (remaining_size > chunk_size) ? chunk_size : remaining_size;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	2b80      	cmp	r3, #128	@ 0x80
 8002972:	bf28      	it	cs
 8002974:	2380      	movcs	r3, #128	@ 0x80
 8002976:	617b      	str	r3, [r7, #20]
		i2cdevWriteReg16(I2C1, Address, current_address, p_values, current_chunk_size);
 8002978:	8b3b      	ldrh	r3, [r7, #24]
 800297a:	b2d9      	uxtb	r1, r3
 800297c:	8b7a      	ldrh	r2, [r7, #26]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	480d      	ldr	r0, [pc, #52]	@ (80029bc <WrMulti+0x70>)
 8002986:	f7ff fef9 	bl	800277c <i2cdevWriteReg16>
		remaining_size-= current_chunk_size;
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	61fb      	str	r3, [r7, #28]
		current_address+=current_chunk_size;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	b29a      	uxth	r2, r3
 8002996:	8b7b      	ldrh	r3, [r7, #26]
 8002998:	4413      	add	r3, r2
 800299a:	837b      	strh	r3, [r7, #26]
		p_values+= current_chunk_size;
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	4413      	add	r3, r2
 80029a2:	607b      	str	r3, [r7, #4]
		osDelay(10);
 80029a4:	200a      	movs	r0, #10
 80029a6:	f003 f84d 	bl	8005a44 <osDelay>
	while(remaining_size> 0){
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1de      	bne.n	800296e <WrMulti+0x22>
	}

	return 0;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3720      	adds	r7, #32
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40005400 	.word	0x40005400

080029c0 <RdMulti>:
uint8_t RdMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	@ 0x28
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	460b      	mov	r3, r1
 80029ce:	817b      	strh	r3, [r7, #10]
	uint16_t Address= (p_platform->address)>>1;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	085b      	lsrs	r3, r3, #1
 80029d6:	833b      	strh	r3, [r7, #24]
	uint32_t remaining_size = size;  // Calculate remaining size to write
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	61fb      	str	r3, [r7, #28]
	uint16_t current_address =RegisterAdress;  // Initialize current address
 80029dc:	897b      	ldrh	r3, [r7, #10]
 80029de:	837b      	strh	r3, [r7, #26]
	while(remaining_size> 0){
 80029e0:	e01d      	b.n	8002a1e <RdMulti+0x5e>
		uint32_t current_chunk_size = (remaining_size > chunk_size) ? chunk_size : remaining_size;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	2b80      	cmp	r3, #128	@ 0x80
 80029e6:	bf28      	it	cs
 80029e8:	2380      	movcs	r3, #128	@ 0x80
 80029ea:	617b      	str	r3, [r7, #20]
		i2cdevReadReg16(I2C1, Address, current_address, p_values, current_chunk_size);
 80029ec:	8b3b      	ldrh	r3, [r7, #24]
 80029ee:	b2d9      	uxtb	r1, r3
 80029f0:	8b7a      	ldrh	r2, [r7, #26]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	480d      	ldr	r0, [pc, #52]	@ (8002a30 <RdMulti+0x70>)
 80029fa:	f7ff fe4b 	bl	8002694 <i2cdevReadReg16>
		remaining_size-= current_chunk_size;
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	61fb      	str	r3, [r7, #28]
		current_address+=current_chunk_size;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	8b7b      	ldrh	r3, [r7, #26]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	837b      	strh	r3, [r7, #26]
		p_values+= current_chunk_size;
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	4413      	add	r3, r2
 8002a16:	607b      	str	r3, [r7, #4]
		osDelay(10);
 8002a18:	200a      	movs	r0, #10
 8002a1a:	f003 f813 	bl	8005a44 <osDelay>
	while(remaining_size> 0){
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1de      	bne.n	80029e2 <RdMulti+0x22>
	}
	return 0;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3720      	adds	r7, #32
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40005400 	.word	0x40005400

08002a34 <SwapBuffer>:
}

void SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]
	uint32_t i, tmp;

	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4)
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	e021      	b.n	8002a8a <SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3301      	adds	r3, #1
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	440b      	add	r3, r1
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	041b      	lsls	r3, r3, #16
 8002a5c:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	3302      	adds	r3, #2
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	440b      	add	r3, r1
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	3203      	adds	r2, #3
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	440a      	add	r2, r1
 8002a74:	7812      	ldrb	r2, [r2, #0]
 8002a76:	4313      	orrs	r3, r2
		tmp = (
 8002a78:	60bb      	str	r3, [r7, #8]

		memcpy(&(buffer[i]), &tmp, 4);
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4413      	add	r3, r2
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	3304      	adds	r3, #4
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	887b      	ldrh	r3, [r7, #2]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d3d9      	bcc.n	8002a46 <SwapBuffer+0x12>
	}
}
 8002a92:	bf00      	nop
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <WaitMs>:

uint8_t WaitMs(
		VL53L5CX_Platform *p_platform,
               uint32_t TimeMs)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
	osDelay(TimeMs);
 8002aaa:	6838      	ldr	r0, [r7, #0]
 8002aac:	f002 ffca 	bl	8005a44 <osDelay>
	return 0;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <_vl53l5cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	4608      	mov	r0, r1
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4603      	mov	r3, r0
 8002aca:	70fb      	strb	r3, [r7, #3]
 8002acc:	460b      	mov	r3, r1
 8002ace:	70bb      	strb	r3, [r7, #2]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 8002adc:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
		status |= RdMulti(&(p_dev->platform), address,
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	8839      	ldrh	r1, [r7, #0]
 8002ae8:	f7ff ff6a 	bl	80029c0 <RdMulti>
 8002aec:	4603      	mov	r3, r0
 8002aee:	461a      	mov	r2, r3
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	210a      	movs	r1, #10
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff ffd0 	bl	8002aa0 <WaitMs>
 8002b00:	4603      	mov	r3, r0
 8002b02:	461a      	mov	r2, r3
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8002b0a:	7bbb      	ldrb	r3, [r7, #14]
 8002b0c:	2bc7      	cmp	r3, #199	@ 0xc7
 8002b0e:	d904      	bls.n	8002b1a <_vl53l5cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L5CX_STATUS_TIMEOUT_ERROR;
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
			break;
 8002b18:	e01a      	b.n	8002b50 <_vl53l5cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d909      	bls.n	8002b34 <_vl53l5cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3502 	ldrb.w	r3, [r3, #1282]	@ 0x502
 8002b26:	2b7e      	cmp	r3, #126	@ 0x7e
 8002b28:	d904      	bls.n	8002b34 <_vl53l5cx_poll_for_answer+0x7a>
		{
			status |= VL53L5CX_MCU_ERROR;
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002b30:	73fb      	strb	r3, [r7, #15]
			break;
 8002b32:	e00d      	b.n	8002b50 <_vl53l5cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8002b34:	7bbb      	ldrb	r3, [r7, #14]
 8002b36:	3301      	adds	r3, #1
 8002b38:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8002b3a:	78bb      	ldrb	r3, [r7, #2]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8002b44:	7e3b      	ldrb	r3, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	7f3a      	ldrb	r2, [r7, #28]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d1c5      	bne.n	8002adc <_vl53l5cx_poll_for_answer+0x22>

	return status;
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <_vl53l5cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l5cx_poll_for_mcu_boot(
              VL53L5CX_Configuration      *p_dev)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L5CX_STATUS_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	81bb      	strh	r3, [r7, #12]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f107 020b 	add.w	r2, r7, #11
 8002b70:	2106      	movs	r1, #6
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff feae 	bl	80028d4 <RdByte>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8002b82:	7afb      	ldrb	r3, [r7, #11]
 8002b84:	b25b      	sxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	da10      	bge.n	8002bac <_vl53l5cx_poll_for_mcu_boot+0x52>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f107 020a 	add.w	r2, r7, #10
 8002b90:	2107      	movs	r1, #7
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fe9e 	bl	80028d4 <RdByte>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	73fb      	strb	r3, [r7, #15]
			status |= go2_status1;
 8002ba2:	7aba      	ldrb	r2, [r7, #10]
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	73fb      	strb	r3, [r7, #15]
			break;
 8002baa:	e012      	b.n	8002bd2 <_vl53l5cx_poll_for_mcu_boot+0x78>
		}
		(void)WaitMs(&(p_dev->platform), 1);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2101      	movs	r1, #1
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff75 	bl	8002aa0 <WaitMs>
		timeout++;
 8002bb6:	89bb      	ldrh	r3, [r7, #12]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8002bbc:	7afb      	ldrb	r3, [r7, #11]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d104      	bne.n	8002bd0 <_vl53l5cx_poll_for_mcu_boot+0x76>
			break;
		}

	}while (timeout < (uint16_t)500);
 8002bc6:	89bb      	ldrh	r3, [r7, #12]
 8002bc8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002bcc:	d3cd      	bcc.n	8002b6a <_vl53l5cx_poll_for_mcu_boot+0x10>
 8002bce:	e000      	b.n	8002bd2 <_vl53l5cx_poll_for_mcu_boot+0x78>
			break;
 8002bd0:	bf00      	nop

   return status;
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <_vl53l5cx_send_offset_data>:
 */

static uint8_t _vl53l5cx_send_offset_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b0ea      	sub	sp, #424	@ 0x1a8
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002be6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002bea:	6018      	str	r0, [r3, #0]
 8002bec:	460a      	mov	r2, r1
 8002bee:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002bf2:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8002bf6:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8002bfe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002c02:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c06:	4ad9      	ldr	r2, [pc, #868]	@ (8002f6c <_vl53l5cx_send_offset_data+0x390>)
 8002c08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c0c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8002c10:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002c14:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002c18:	4ad5      	ldr	r2, [pc, #852]	@ (8002f70 <_vl53l5cx_send_offset_data+0x394>)
 8002c1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c1e:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 8002c22:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002c26:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f503 60a0 	add.w	r0, r3, #1280	@ 0x500
               p_dev->offset_data, VL53L5CX_OFFSET_BUFFER_SIZE);
 8002c30:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002c34:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	3310      	adds	r3, #16
	(void)memcpy(p_dev->temp_buffer,
 8002c3c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8002c40:	4619      	mov	r1, r3
 8002c42:	f005 fbcd 	bl	80083e0 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4){
 8002c46:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002c4a:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b10      	cmp	r3, #16
 8002c52:	f040 8122 	bne.w	8002e9a <_vl53l5cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8002c56:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002c5a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8002c64:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002c68:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c6c:	cb03      	ldmia	r3!, {r0, r1}
 8002c6e:	6010      	str	r0, [r2, #0]
 8002c70:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8002c72:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002c76:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c80:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fed5 	bl	8002a34 <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8002c8a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002c8e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f203 513c 	addw	r1, r3, #1340	@ 0x53c
 8002c98:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002c9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f005 fb9d 	bl	80083e0 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8002ca6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002caa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f503 61c8 	add.w	r1, r3, #1600	@ 0x640
 8002cb4:	f107 0318 	add.w	r3, r7, #24
 8002cb8:	2280      	movs	r2, #128	@ 0x80
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f005 fb90 	bl	80083e0 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8002cc6:	e0ac      	b.n	8002e22 <_vl53l5cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8002cce:	e09c      	b.n	8002e0a <_vl53l5cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8002cd0:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8002cd4:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4413      	add	r3, r2
 8002cdc:	005a      	lsls	r2, r3, #1
 8002cde:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002ce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ce6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8002cea:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002cee:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	1c59      	adds	r1, r3, #1
 8002cfa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002cfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d06:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8002d08:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002d0c:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	440b      	add	r3, r1
 8002d14:	3304      	adds	r3, #4
 8002d16:	0059      	lsls	r1, r3, #1
 8002d18:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d24:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 8002d26:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002d2a:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	f103 0109 	add.w	r1, r3, #9
 8002d38:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002d3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d44:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8002d46:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002d4a:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8002d4e:	0092      	lsls	r2, r2, #2
 8002d50:	440a      	add	r2, r1
                                  /(uint32_t)4;
 8002d52:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8002d54:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8002d60:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8002d64:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	005a      	lsls	r2, r3, #1
 8002d6e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002d72:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002d76:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002d7a:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8002d7c:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8002d80:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4413      	add	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002d90:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002d94:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002d98:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8002d9a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002d9e:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8002da2:	00d2      	lsls	r2, r2, #3
 8002da4:	440a      	add	r2, r1
 8002da6:	3204      	adds	r2, #4
 8002da8:	0051      	lsls	r1, r2, #1
 8002daa:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8002dae:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8002db2:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8002db6:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8002db8:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8002dbc:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8002dc0:	00d2      	lsls	r2, r2, #3
 8002dc2:	440a      	add	r2, r1
 8002dc4:	0052      	lsls	r2, r2, #1
 8002dc6:	f102 0109 	add.w	r1, r2, #9
 8002dca:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8002dce:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8002dd2:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8002dd6:	4413      	add	r3, r2
                                  /(int16_t)4;
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	da00      	bge.n	8002dde <_vl53l5cx_send_offset_data+0x202>
 8002ddc:	3303      	adds	r3, #3
 8002dde:	109b      	asrs	r3, r3, #2
 8002de0:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 8002de2:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8002de6:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	441a      	add	r2, r3
 8002dee:	b209      	sxth	r1, r1
 8002df0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002df4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002df8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8002dfc:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8002e0a:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	f77f af5e 	ble.w	8002cd0 <_vl53l5cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 8002e14:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8002e22:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	f77f af4e 	ble.w	8002cc8 <_vl53l5cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8002e2c:	f107 0318 	add.w	r3, r7, #24
 8002e30:	3320      	adds	r3, #32
 8002e32:	2260      	movs	r2, #96	@ 0x60
 8002e34:	2100      	movs	r1, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f005 faa6 	bl	8008388 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8002e3c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002e40:	3340      	adds	r3, #64	@ 0x40
 8002e42:	22c0      	movs	r2, #192	@ 0xc0
 8002e44:	2100      	movs	r1, #0
 8002e46:	4618      	mov	r0, r3
 8002e48:	f005 fa9e 	bl	8008388 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8002e4c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002e50:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f203 533c 	addw	r3, r3, #1340	@ 0x53c
 8002e5a:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8002e5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e62:	4618      	mov	r0, r3
 8002e64:	f005 fabc 	bl	80083e0 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8002e68:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002e6c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8002e76:	f107 0118 	add.w	r1, r7, #24
 8002e7a:	2280      	movs	r2, #128	@ 0x80
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f005 faaf 	bl	80083e0 <memcpy>
		range_grid, sizeof(range_grid));
            SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8002e82:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002e86:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e90:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fdcd 	bl	8002a34 <SwapBuffer>
	}

	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8002ea0:	e01b      	b.n	8002eda <_vl53l5cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 8002ea2:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8002ea6:	f103 0208 	add.w	r2, r3, #8
 8002eaa:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8002eae:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8002eb2:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8002eb6:	6809      	ldr	r1, [r1, #0]
 8002eb8:	440a      	add	r2, r1
 8002eba:	f892 1500 	ldrb.w	r1, [r2, #1280]	@ 0x500
 8002ebe:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8002ec2:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	4413      	add	r3, r2
 8002eca:	460a      	mov	r2, r1
 8002ecc:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8002ed0:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8002eda:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8002ede:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 8002ee2:	d3de      	bcc.n	8002ea2 <_vl53l5cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8002ee4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002ee8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f503 62dc 	add.w	r2, r3, #1760	@ 0x6e0
 8002ef2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002ef6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002efa:	cb03      	ldmia	r3!, {r0, r1}
 8002efc:	6010      	str	r0, [r2, #0]
 8002efe:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8002f00:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002f04:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002f0e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8002f18:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 8002f1c:	f642 6118 	movw	r1, #11800	@ 0x2e18
 8002f20:	f7ff fd14 	bl	800294c <WrMulti>
 8002f24:	4603      	mov	r3, r0
 8002f26:	461a      	mov	r2, r3
 8002f28:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8002f32:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002f36:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	9301      	str	r3, [sp, #4]
 8002f3e:	23ff      	movs	r3, #255	@ 0xff
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8002f46:	2201      	movs	r2, #1
 8002f48:	2104      	movs	r1, #4
 8002f4a:	6800      	ldr	r0, [r0, #0]
 8002f4c:	f7ff fdb5 	bl	8002aba <_vl53l5cx_poll_for_answer>
 8002f50:	4603      	mov	r3, r0
 8002f52:	461a      	mov	r2, r3
 8002f54:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8002f5e:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	08008430 	.word	0x08008430
 8002f70:	08008438 	.word	0x08008438

08002f74 <_vl53l5cx_send_xtalk_data>:
 */

static uint8_t _vl53l5cx_send_xtalk_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b0ca      	sub	sp, #296	@ 0x128
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f7e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f82:	6018      	str	r0, [r3, #0]
 8002f84:	460a      	mov	r2, r1
 8002f86:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f8a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8002f8e:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8002f96:	4a9a      	ldr	r2, [pc, #616]	@ (8003200 <_vl53l5cx_send_xtalk_data+0x28c>)
 8002f98:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002f9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fa0:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8002fa4:	4a97      	ldr	r2, [pc, #604]	@ (8003204 <_vl53l5cx_send_xtalk_data+0x290>)
 8002fa6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002faa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fae:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 8002fb2:	4b95      	ldr	r3, [pc, #596]	@ (8003208 <_vl53l5cx_send_xtalk_data+0x294>)
 8002fb4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8002fb8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002fbc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f503 60a0 	add.w	r0, r3, #1280	@ 0x500
 8002fc6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002fca:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8002fd4:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f005 fa01 	bl	80083e0 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4)
 8002fde:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002fe2:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	f040 80d2 	bne.w	8003192 <_vl53l5cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8002fee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002ff2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8003002:	cb03      	ldmia	r3!, {r0, r1}
 8003004:	6010      	str	r0, [r2, #0]
 8003006:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8003008:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800300c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 8003016:	461a      	mov	r2, r3
 8003018:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800301c:	cb03      	ldmia	r3!, {r0, r1}
 800301e:	6010      	str	r0, [r2, #0]
 8003020:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8003022:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003026:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003030:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fcfd 	bl	8002a34 <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 800303a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800303e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f203 5134 	addw	r1, r3, #1332	@ 0x534
 8003048:	f107 0308 	add.w	r3, r7, #8
 800304c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003050:	4618      	mov	r0, r3
 8003052:	f005 f9c5 	bl	80083e0 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 8003056:	2300      	movs	r3, #0
 8003058:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800305c:	e05d      	b.n	800311a <_vl53l5cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 800305e:	2300      	movs	r3, #0
 8003060:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8003064:	e04e      	b.n	8003104 <_vl53l5cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 8003066:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 800306a:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	005a      	lsls	r2, r3, #1
 8003074:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003078:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800307c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8003080:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8003084:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	440b      	add	r3, r1
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	1c59      	adds	r1, r3, #1
 8003090:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003094:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003098:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800309c:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 800309e:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80030a2:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	440b      	add	r3, r1
 80030aa:	3304      	adds	r3, #4
 80030ac:	0059      	lsls	r1, r3, #1
 80030ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80030b2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80030b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80030ba:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 80030bc:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80030c0:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	440b      	add	r3, r1
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	f103 0109 	add.w	r1, r3, #9
 80030ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80030d2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80030d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80030da:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80030dc:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80030e0:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 80030e4:	0092      	lsls	r2, r2, #2
 80030e6:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 80030e8:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80030ea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80030ee:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80030f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 80030f6:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	3301      	adds	r3, #1
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8003104:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8003108:	2b03      	cmp	r3, #3
 800310a:	ddac      	ble.n	8003066 <_vl53l5cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 800310c:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8003110:	b2db      	uxtb	r3, r3
 8003112:	3301      	adds	r3, #1
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800311a:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 800311e:	2b03      	cmp	r3, #3
 8003120:	dd9d      	ble.n	800305e <_vl53l5cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 8003122:	f107 0308 	add.w	r3, r7, #8
 8003126:	3340      	adds	r3, #64	@ 0x40
 8003128:	22c0      	movs	r2, #192	@ 0xc0
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f005 f92b 	bl	8008388 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 8003132:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003136:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f203 5334 	addw	r3, r3, #1332	@ 0x534
 8003140:	f107 0108 	add.w	r1, r7, #8
 8003144:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003148:	4618      	mov	r0, r3
 800314a:	f005 f949 	bl	80083e0 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 800314e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003152:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800315c:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fc67 	bl	8002a34 <SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 8003166:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800316a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8003174:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8003178:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 800317a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800317e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 8003188:	2204      	movs	r2, #4
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f005 f8fb 	bl	8008388 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8003192:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003196:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800319a:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 800319c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80031a0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 80031aa:	f44f 7342 	mov.w	r3, #776	@ 0x308
 80031ae:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 80031b2:	f7ff fbcb 	bl	800294c <WrMulti>
 80031b6:	4603      	mov	r3, r0
 80031b8:	461a      	mov	r2, r3
 80031ba:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80031be:	4313      	orrs	r3, r2
 80031c0:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80031c4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80031c8:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 80031cc:	2303      	movs	r3, #3
 80031ce:	9301      	str	r3, [sp, #4]
 80031d0:	23ff      	movs	r3, #255	@ 0xff
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80031d8:	2201      	movs	r2, #1
 80031da:	2104      	movs	r1, #4
 80031dc:	6800      	ldr	r0, [r0, #0]
 80031de:	f7ff fc6c 	bl	8002aba <_vl53l5cx_poll_for_answer>
 80031e2:	4603      	mov	r3, r0
 80031e4:	461a      	mov	r2, r3
 80031e6:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80031f0:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	08008440 	.word	0x08008440
 8003204:	08008448 	.word	0x08008448
 8003208:	0001fca0 	.word	0x0001fca0

0800320c <vl53l5cx_is_alive>:

uint8_t vl53l5cx_is_alive(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_is_alive)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	73fb      	strb	r3, [r7, #15]
	uint8_t device_id, revision_id;

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fb72 	bl	800290c <WrByte>
 8003228:	4603      	mov	r3, r0
 800322a:	461a      	mov	r2, r3
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	4313      	orrs	r3, r2
 8003230:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0, &device_id);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f107 020e 	add.w	r2, r7, #14
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fb4a 	bl	80028d4 <RdByte>
 8003240:	4603      	mov	r3, r0
 8003242:	461a      	mov	r2, r3
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	4313      	orrs	r3, r2
 8003248:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 1, &revision_id);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f107 020d 	add.w	r2, r7, #13
 8003250:	2101      	movs	r1, #1
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fb3e 	bl	80028d4 <RdByte>
 8003258:	4603      	mov	r3, r0
 800325a:	461a      	mov	r2, r3
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	4313      	orrs	r3, r2
 8003260:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2202      	movs	r2, #2
 8003266:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fb4e 	bl	800290c <WrByte>
 8003270:	4603      	mov	r3, r0
 8003272:	461a      	mov	r2, r3
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	4313      	orrs	r3, r2
 8003278:	73fb      	strb	r3, [r7, #15]

	if((device_id == (uint8_t)0xF0) && (revision_id == (uint8_t)0x02))
 800327a:	7bbb      	ldrb	r3, [r7, #14]
 800327c:	2bf0      	cmp	r3, #240	@ 0xf0
 800327e:	d106      	bne.n	800328e <vl53l5cx_is_alive+0x82>
 8003280:	7b7b      	ldrb	r3, [r7, #13]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d103      	bne.n	800328e <vl53l5cx_is_alive+0x82>
	{
		*p_is_alive = 1;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2201      	movs	r2, #1
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e002      	b.n	8003294 <vl53l5cx_is_alive+0x88>
	}
	else
	{
		*p_is_alive = 0;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8003294:	7bfb      	ldrb	r3, [r7, #15]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <vl53l5cx_init>:

uint8_t vl53l5cx_init(
		VL53L5CX_Configuration		*p_dev)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	@ 0x28
 80032a4:	af04      	add	r7, sp, #16
 80032a6:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 80032ac:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80032b0:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 80032b2:	2301      	movs	r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L5CX_DEFAULT_XTALK;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a80      	ldr	r2, [pc, #512]	@ (80034bc <vl53l5cx_init+0x21c>)
 80032ba:	60da      	str	r2, [r3, #12]
	p_dev->default_configuration = (uint8_t*)VL53L5CX_DEFAULT_CONFIGURATION;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a80      	ldr	r2, [pc, #512]	@ (80034c0 <vl53l5cx_init+0x220>)
 80032c0:	609a      	str	r2, [r3, #8]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2aac 	strb.w	r2, [r3, #2732]	@ 0xaac

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fb1a 	bl	800290c <WrByte>
 80032d8:	4603      	mov	r3, r0
 80032da:	461a      	mov	r2, r3
 80032dc:	7dfb      	ldrb	r3, [r7, #23]
 80032de:	4313      	orrs	r3, r2
 80032e0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2204      	movs	r2, #4
 80032e6:	2109      	movs	r1, #9
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fb0f 	bl	800290c <WrByte>
 80032ee:	4603      	mov	r3, r0
 80032f0:	461a      	mov	r2, r3
 80032f2:	7dfb      	ldrb	r3, [r7, #23]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2240      	movs	r2, #64	@ 0x40
 80032fc:	210f      	movs	r1, #15
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff fb04 	bl	800290c <WrByte>
 8003304:	4603      	mov	r3, r0
 8003306:	461a      	mov	r2, r3
 8003308:	7dfb      	ldrb	r3, [r7, #23]
 800330a:	4313      	orrs	r3, r2
 800330c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2203      	movs	r2, #3
 8003312:	210a      	movs	r1, #10
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff faf9 	bl	800290c <WrByte>
 800331a:	4603      	mov	r3, r0
 800331c:	461a      	mov	r2, r3
 800331e:	7dfb      	ldrb	r3, [r7, #23]
 8003320:	4313      	orrs	r3, r2
 8003322:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f107 0216 	add.w	r2, r7, #22
 800332a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fad0 	bl	80028d4 <RdByte>
 8003334:	4603      	mov	r3, r0
 8003336:	461a      	mov	r2, r3
 8003338:	7dfb      	ldrb	r3, [r7, #23]
 800333a:	4313      	orrs	r3, r2
 800333c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	210c      	movs	r1, #12
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff fae1 	bl	800290c <WrByte>
 800334a:	4603      	mov	r3, r0
 800334c:	461a      	mov	r2, r3
 800334e:	7dfb      	ldrb	r3, [r7, #23]
 8003350:	4313      	orrs	r3, r2
 8003352:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f240 1101 	movw	r1, #257	@ 0x101
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff fad5 	bl	800290c <WrByte>
 8003362:	4603      	mov	r3, r0
 8003364:	461a      	mov	r2, r3
 8003366:	7dfb      	ldrb	r3, [r7, #23]
 8003368:	4313      	orrs	r3, r2
 800336a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fac9 	bl	800290c <WrByte>
 800337a:	4603      	mov	r3, r0
 800337c:	461a      	mov	r2, r3
 800337e:	7dfb      	ldrb	r3, [r7, #23]
 8003380:	4313      	orrs	r3, r2
 8003382:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fabd 	bl	800290c <WrByte>
 8003392:	4603      	mov	r3, r0
 8003394:	461a      	mov	r2, r3
 8003396:	7dfb      	ldrb	r3, [r7, #23]
 8003398:	4313      	orrs	r3, r2
 800339a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f244 0102 	movw	r1, #16386	@ 0x4002
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fab1 	bl	800290c <WrByte>
 80033aa:	4603      	mov	r3, r0
 80033ac:	461a      	mov	r2, r3
 80033ae:	7dfb      	ldrb	r3, [r7, #23]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f244 0102 	movw	r1, #16386	@ 0x4002
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff faa5 	bl	800290c <WrByte>
 80033c2:	4603      	mov	r3, r0
 80033c4:	461a      	mov	r2, r3
 80033c6:	7dfb      	ldrb	r3, [r7, #23]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2203      	movs	r2, #3
 80033d0:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff fa99 	bl	800290c <WrByte>
 80033da:	4603      	mov	r3, r0
 80033dc:	461a      	mov	r2, r3
 80033de:	7dfb      	ldrb	r3, [r7, #23]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f240 1103 	movw	r1, #259	@ 0x103
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff fa8d 	bl	800290c <WrByte>
 80033f2:	4603      	mov	r3, r0
 80033f4:	461a      	mov	r2, r3
 80033f6:	7dfb      	ldrb	r3, [r7, #23]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	210c      	movs	r1, #12
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fa82 	bl	800290c <WrByte>
 8003408:	4603      	mov	r3, r0
 800340a:	461a      	mov	r2, r3
 800340c:	7dfb      	ldrb	r3, [r7, #23]
 800340e:	4313      	orrs	r3, r2
 8003410:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2243      	movs	r2, #67	@ 0x43
 8003416:	210f      	movs	r1, #15
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fa77 	bl	800290c <WrByte>
 800341e:	4603      	mov	r3, r0
 8003420:	461a      	mov	r2, r3
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	4313      	orrs	r3, r2
 8003426:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2101      	movs	r1, #1
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff fb37 	bl	8002aa0 <WaitMs>
 8003432:	4603      	mov	r3, r0
 8003434:	461a      	mov	r2, r3
 8003436:	7dfb      	ldrb	r3, [r7, #23]
 8003438:	4313      	orrs	r3, r2
 800343a:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2240      	movs	r2, #64	@ 0x40
 8003440:	210f      	movs	r1, #15
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fa62 	bl	800290c <WrByte>
 8003448:	4603      	mov	r3, r0
 800344a:	461a      	mov	r2, r3
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	4313      	orrs	r3, r2
 8003450:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	210a      	movs	r1, #10
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fa57 	bl	800290c <WrByte>
 800345e:	4603      	mov	r3, r0
 8003460:	461a      	mov	r2, r3
 8003462:	7dfb      	ldrb	r3, [r7, #23]
 8003464:	4313      	orrs	r3, r2
 8003466:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2164      	movs	r1, #100	@ 0x64
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fb17 	bl	8002aa0 <WaitMs>
 8003472:	4603      	mov	r3, r0
 8003474:	461a      	mov	r2, r3
 8003476:	7dfb      	ldrb	r3, [r7, #23]
 8003478:	4313      	orrs	r3, r2
 800347a:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff fa41 	bl	800290c <WrByte>
 800348a:	4603      	mov	r3, r0
 800348c:	461a      	mov	r2, r3
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	4313      	orrs	r3, r2
 8003492:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8003494:	2301      	movs	r3, #1
 8003496:	9301      	str	r3, [sp, #4]
 8003498:	23ff      	movs	r3, #255	@ 0xff
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	2306      	movs	r3, #6
 800349e:	2200      	movs	r2, #0
 80034a0:	2101      	movs	r1, #1
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff fb09 	bl	8002aba <_vl53l5cx_poll_for_answer>
 80034a8:	4603      	mov	r3, r0
 80034aa:	461a      	mov	r2, r3
 80034ac:	7dfb      	ldrb	r3, [r7, #23]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80034b2:	7dfb      	ldrb	r3, [r7, #23]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f040 8354 	bne.w	8003b62 <vl53l5cx_init+0x8c2>
 80034ba:	e003      	b.n	80034c4 <vl53l5cx_init+0x224>
 80034bc:	0801d90c 	.word	0x0801d90c
 80034c0:	0801d540 	.word	0x0801d540
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	210e      	movs	r1, #14
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fa1e 	bl	800290c <WrByte>
 80034d0:	4603      	mov	r3, r0
 80034d2:	461a      	mov	r2, r3
 80034d4:	7dfb      	ldrb	r3, [r7, #23]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2202      	movs	r2, #2
 80034de:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff fa12 	bl	800290c <WrByte>
 80034e8:	4603      	mov	r3, r0
 80034ea:	461a      	mov	r2, r3
 80034ec:	7dfb      	ldrb	r3, [r7, #23]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	220d      	movs	r2, #13
 80034f6:	2103      	movs	r1, #3
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff fa07 	bl	800290c <WrByte>
 80034fe:	4603      	mov	r3, r0
 8003500:	461a      	mov	r2, r3
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	4313      	orrs	r3, r2
 8003506:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff f9fb 	bl	800290c <WrByte>
 8003516:	4603      	mov	r3, r0
 8003518:	461a      	mov	r2, r3
 800351a:	7dfb      	ldrb	r3, [r7, #23]
 800351c:	4313      	orrs	r3, r2
 800351e:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8003520:	2310      	movs	r3, #16
 8003522:	9301      	str	r3, [sp, #4]
 8003524:	2310      	movs	r3, #16
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	2321      	movs	r3, #33	@ 0x21
 800352a:	2200      	movs	r2, #0
 800352c:	2101      	movs	r1, #1
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff fac3 	bl	8002aba <_vl53l5cx_poll_for_answer>
 8003534:	4603      	mov	r3, r0
 8003536:	461a      	mov	r2, r3
 8003538:	7dfb      	ldrb	r3, [r7, #23]
 800353a:	4313      	orrs	r3, r2
 800353c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff f9e0 	bl	800290c <WrByte>
 800354c:	4603      	mov	r3, r0
 800354e:	461a      	mov	r2, r3
 8003550:	7dfb      	ldrb	r3, [r7, #23]
 8003552:	4313      	orrs	r3, r2
 8003554:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f107 0216 	add.w	r2, r7, #22
 800355c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff f9b7 	bl	80028d4 <RdByte>
 8003566:	4603      	mov	r3, r0
 8003568:	461a      	mov	r2, r3
 800356a:	7dfb      	ldrb	r3, [r7, #23]
 800356c:	4313      	orrs	r3, r2
 800356e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	210c      	movs	r1, #12
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff f9c8 	bl	800290c <WrByte>
 800357c:	4603      	mov	r3, r0
 800357e:	461a      	mov	r2, r3
 8003580:	7dfb      	ldrb	r3, [r7, #23]
 8003582:	4313      	orrs	r3, r2
 8003584:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff f9bc 	bl	800290c <WrByte>
 8003594:	4603      	mov	r3, r0
 8003596:	461a      	mov	r2, r3
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	4313      	orrs	r3, r2
 800359c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f240 1101 	movw	r1, #257	@ 0x101
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff f9b0 	bl	800290c <WrByte>
 80035ac:	4603      	mov	r3, r0
 80035ae:	461a      	mov	r2, r3
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff f9a4 	bl	800290c <WrByte>
 80035c4:	4603      	mov	r3, r0
 80035c6:	461a      	mov	r2, r3
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff f998 	bl	800290c <WrByte>
 80035dc:	4603      	mov	r3, r0
 80035de:	461a      	mov	r2, r3
 80035e0:	7dfb      	ldrb	r3, [r7, #23]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f244 0102 	movw	r1, #16386	@ 0x4002
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff f98c 	bl	800290c <WrByte>
 80035f4:	4603      	mov	r3, r0
 80035f6:	461a      	mov	r2, r3
 80035f8:	7dfb      	ldrb	r3, [r7, #23]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f244 0102 	movw	r1, #16386	@ 0x4002
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff f980 	bl	800290c <WrByte>
 800360c:	4603      	mov	r3, r0
 800360e:	461a      	mov	r2, r3
 8003610:	7dfb      	ldrb	r3, [r7, #23]
 8003612:	4313      	orrs	r3, r2
 8003614:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2203      	movs	r2, #3
 800361a:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff f974 	bl	800290c <WrByte>
 8003624:	4603      	mov	r3, r0
 8003626:	461a      	mov	r2, r3
 8003628:	7dfb      	ldrb	r3, [r7, #23]
 800362a:	4313      	orrs	r3, r2
 800362c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f240 1103 	movw	r1, #259	@ 0x103
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff f968 	bl	800290c <WrByte>
 800363c:	4603      	mov	r3, r0
 800363e:	461a      	mov	r2, r3
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	4313      	orrs	r3, r2
 8003644:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f244 010f 	movw	r1, #16399	@ 0x400f
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff f95c 	bl	800290c <WrByte>
 8003654:	4603      	mov	r3, r0
 8003656:	461a      	mov	r2, r3
 8003658:	7dfb      	ldrb	r3, [r7, #23]
 800365a:	4313      	orrs	r3, r2
 800365c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2243      	movs	r2, #67	@ 0x43
 8003662:	f240 211a 	movw	r1, #538	@ 0x21a
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff f950 	bl	800290c <WrByte>
 800366c:	4603      	mov	r3, r0
 800366e:	461a      	mov	r2, r3
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	4313      	orrs	r3, r2
 8003674:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2203      	movs	r2, #3
 800367a:	f240 211a 	movw	r1, #538	@ 0x21a
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff f944 	bl	800290c <WrByte>
 8003684:	4603      	mov	r3, r0
 8003686:	461a      	mov	r2, r3
 8003688:	7dfb      	ldrb	r3, [r7, #23]
 800368a:	4313      	orrs	r3, r2
 800368c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f240 211a 	movw	r1, #538	@ 0x21a
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff f938 	bl	800290c <WrByte>
 800369c:	4603      	mov	r3, r0
 800369e:	461a      	mov	r2, r3
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f240 211a 	movw	r1, #538	@ 0x21a
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff f92c 	bl	800290c <WrByte>
 80036b4:	4603      	mov	r3, r0
 80036b6:	461a      	mov	r2, r3
 80036b8:	7dfb      	ldrb	r3, [r7, #23]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f240 2119 	movw	r1, #537	@ 0x219
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff f920 	bl	800290c <WrByte>
 80036cc:	4603      	mov	r3, r0
 80036ce:	461a      	mov	r2, r3
 80036d0:	7dfb      	ldrb	r3, [r7, #23]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f240 211b 	movw	r1, #539	@ 0x21b
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff f914 	bl	800290c <WrByte>
 80036e4:	4603      	mov	r3, r0
 80036e6:	461a      	mov	r2, r3
 80036e8:	7dfb      	ldrb	r3, [r7, #23]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff f908 	bl	800290c <WrByte>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	7dfb      	ldrb	r3, [r7, #23]
 8003702:	4313      	orrs	r3, r2
 8003704:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f107 0216 	add.w	r2, r7, #22
 800370c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff f8df 	bl	80028d4 <RdByte>
 8003716:	4603      	mov	r3, r0
 8003718:	461a      	mov	r2, r3
 800371a:	7dfb      	ldrb	r3, [r7, #23]
 800371c:	4313      	orrs	r3, r2
 800371e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	210c      	movs	r1, #12
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff f8f0 	bl	800290c <WrByte>
 800372c:	4603      	mov	r3, r0
 800372e:	461a      	mov	r2, r3
 8003730:	7dfb      	ldrb	r3, [r7, #23]
 8003732:	4313      	orrs	r3, r2
 8003734:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff f8e4 	bl	800290c <WrByte>
 8003744:	4603      	mov	r3, r0
 8003746:	461a      	mov	r2, r3
 8003748:	7dfb      	ldrb	r3, [r7, #23]
 800374a:	4313      	orrs	r3, r2
 800374c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2207      	movs	r2, #7
 8003752:	2120      	movs	r1, #32
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff f8d9 	bl	800290c <WrByte>
 800375a:	4603      	mov	r3, r0
 800375c:	461a      	mov	r2, r3
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	4313      	orrs	r3, r2
 8003762:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2206      	movs	r2, #6
 8003768:	2120      	movs	r1, #32
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff f8ce 	bl	800290c <WrByte>
 8003770:	4603      	mov	r3, r0
 8003772:	461a      	mov	r2, r3
 8003774:	7dfb      	ldrb	r3, [r7, #23]
 8003776:	4313      	orrs	r3, r2
 8003778:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2209      	movs	r2, #9
 800377e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff f8c2 	bl	800290c <WrByte>
 8003788:	4603      	mov	r3, r0
 800378a:	461a      	mov	r2, r3
 800378c:	7dfb      	ldrb	r3, [r7, #23]
 800378e:	4313      	orrs	r3, r2
 8003790:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003798:	4ae1      	ldr	r2, [pc, #900]	@ (8003b20 <vl53l5cx_init+0x880>)
 800379a:	2100      	movs	r1, #0
 800379c:	f7ff f8d6 	bl	800294c <WrMulti>
 80037a0:	4603      	mov	r3, r0
 80037a2:	461a      	mov	r2, r3
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	220a      	movs	r2, #10
 80037ae:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff f8aa 	bl	800290c <WrByte>
 80037b8:	4603      	mov	r3, r0
 80037ba:	461a      	mov	r2, r3
 80037bc:	7dfb      	ldrb	r3, [r7, #23]
 80037be:	4313      	orrs	r3, r2
 80037c0:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037c8:	4ad6      	ldr	r2, [pc, #856]	@ (8003b24 <vl53l5cx_init+0x884>)
 80037ca:	2100      	movs	r1, #0
 80037cc:	f7ff f8be 	bl	800294c <WrMulti>
 80037d0:	4603      	mov	r3, r0
 80037d2:	461a      	mov	r2, r3
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	220b      	movs	r2, #11
 80037de:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff f892 	bl	800290c <WrByte>
 80037e8:	4603      	mov	r3, r0
 80037ea:	461a      	mov	r2, r3
 80037ec:	7dfb      	ldrb	r3, [r7, #23]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80037f8:	4acb      	ldr	r2, [pc, #812]	@ (8003b28 <vl53l5cx_init+0x888>)
 80037fa:	2100      	movs	r1, #0
 80037fc:	f7ff f8a6 	bl	800294c <WrMulti>
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	4313      	orrs	r3, r2
 8003808:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff f87a 	bl	800290c <WrByte>
 8003818:	4603      	mov	r3, r0
 800381a:	461a      	mov	r2, r3
 800381c:	7dfb      	ldrb	r3, [r7, #23]
 800381e:	4313      	orrs	r3, r2
 8003820:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2202      	movs	r2, #2
 8003826:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff f86e 	bl	800290c <WrByte>
 8003830:	4603      	mov	r3, r0
 8003832:	461a      	mov	r2, r3
 8003834:	7dfb      	ldrb	r3, [r7, #23]
 8003836:	4313      	orrs	r3, r2
 8003838:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	220d      	movs	r2, #13
 800383e:	2103      	movs	r1, #3
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff f863 	bl	800290c <WrByte>
 8003846:	4603      	mov	r3, r0
 8003848:	461a      	mov	r2, r3
 800384a:	7dfb      	ldrb	r3, [r7, #23]
 800384c:	4313      	orrs	r3, r2
 800384e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff f857 	bl	800290c <WrByte>
 800385e:	4603      	mov	r3, r0
 8003860:	461a      	mov	r2, r3
 8003862:	7dfb      	ldrb	r3, [r7, #23]
 8003864:	4313      	orrs	r3, r2
 8003866:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8003868:	2310      	movs	r3, #16
 800386a:	9301      	str	r3, [sp, #4]
 800386c:	2310      	movs	r3, #16
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	2321      	movs	r3, #33	@ 0x21
 8003872:	2200      	movs	r2, #0
 8003874:	2101      	movs	r1, #1
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff f91f 	bl	8002aba <_vl53l5cx_poll_for_answer>
 800387c:	4603      	mov	r3, r0
 800387e:	461a      	mov	r2, r3
 8003880:	7dfb      	ldrb	r3, [r7, #23]
 8003882:	4313      	orrs	r3, r2
 8003884:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8003886:	7dfb      	ldrb	r3, [r7, #23]
 8003888:	2b00      	cmp	r3, #0
 800388a:	f040 816c 	bne.w	8003b66 <vl53l5cx_init+0x8c6>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff f838 	bl	800290c <WrByte>
 800389c:	4603      	mov	r3, r0
 800389e:	461a      	mov	r2, r3
 80038a0:	7dfb      	ldrb	r3, [r7, #23]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f107 0216 	add.w	r2, r7, #22
 80038ac:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff f80f 	bl	80028d4 <RdByte>
 80038b6:	4603      	mov	r3, r0
 80038b8:	461a      	mov	r2, r3
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
 80038bc:	4313      	orrs	r3, r2
 80038be:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	210c      	movs	r1, #12
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff f820 	bl	800290c <WrByte>
 80038cc:	4603      	mov	r3, r0
 80038ce:	461a      	mov	r2, r3
 80038d0:	7dfb      	ldrb	r3, [r7, #23]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff f814 	bl	800290c <WrByte>
 80038e4:	4603      	mov	r3, r0
 80038e6:	461a      	mov	r2, r3
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff f808 	bl	800290c <WrByte>
 80038fc:	4603      	mov	r3, r0
 80038fe:	461a      	mov	r2, r3
 8003900:	7dfb      	ldrb	r3, [r7, #23]
 8003902:	4313      	orrs	r3, r2
 8003904:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f240 1115 	movw	r1, #277	@ 0x115
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe fffc 	bl	800290c <WrByte>
 8003914:	4603      	mov	r3, r0
 8003916:	461a      	mov	r2, r3
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	4313      	orrs	r3, r2
 800391c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2242      	movs	r2, #66	@ 0x42
 8003922:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe fff0 	bl	800290c <WrByte>
 800392c:	4603      	mov	r3, r0
 800392e:	461a      	mov	r2, r3
 8003930:	7dfb      	ldrb	r3, [r7, #23]
 8003932:	4313      	orrs	r3, r2
 8003934:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f240 1117 	movw	r1, #279	@ 0x117
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe ffe4 	bl	800290c <WrByte>
 8003944:	4603      	mov	r3, r0
 8003946:	461a      	mov	r2, r3
 8003948:	7dfb      	ldrb	r3, [r7, #23]
 800394a:	4313      	orrs	r3, r2
 800394c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	210b      	movs	r1, #11
 8003954:	4618      	mov	r0, r3
 8003956:	f7fe ffd9 	bl	800290c <WrByte>
 800395a:	4603      	mov	r3, r0
 800395c:	461a      	mov	r2, r3
 800395e:	7dfb      	ldrb	r3, [r7, #23]
 8003960:	4313      	orrs	r3, r2
 8003962:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f107 0216 	add.w	r2, r7, #22
 800396a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe ffb0 	bl	80028d4 <RdByte>
 8003974:	4603      	mov	r3, r0
 8003976:	461a      	mov	r2, r3
 8003978:	7dfb      	ldrb	r3, [r7, #23]
 800397a:	4313      	orrs	r3, r2
 800397c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	210c      	movs	r1, #12
 8003984:	4618      	mov	r0, r3
 8003986:	f7fe ffc1 	bl	800290c <WrByte>
 800398a:	4603      	mov	r3, r0
 800398c:	461a      	mov	r2, r3
 800398e:	7dfb      	ldrb	r3, [r7, #23]
 8003990:	4313      	orrs	r3, r2
 8003992:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	210b      	movs	r1, #11
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe ffb6 	bl	800290c <WrByte>
 80039a0:	4603      	mov	r3, r0
 80039a2:	461a      	mov	r2, r3
 80039a4:	7dfb      	ldrb	r3, [r7, #23]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_mcu_boot(p_dev);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff f8d5 	bl	8002b5a <_vl53l5cx_poll_for_mcu_boot>
 80039b0:	4603      	mov	r3, r0
 80039b2:	461a      	mov	r2, r3
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f040 80d4 	bne.w	8003b6a <vl53l5cx_init+0x8ca>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2202      	movs	r2, #2
 80039c6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fe ff9e 	bl	800290c <WrByte>
 80039d0:	4603      	mov	r3, r0
 80039d2:	461a      	mov	r2, r3
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	2328      	movs	r3, #40	@ 0x28
 80039de:	4a53      	ldr	r2, [pc, #332]	@ (8003b2c <vl53l5cx_init+0x88c>)
 80039e0:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 80039e4:	f7fe ffb2 	bl	800294c <WrMulti>
 80039e8:	4603      	mov	r3, r0
 80039ea:	461a      	mov	r2, r3
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 80039f2:	2302      	movs	r3, #2
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	23ff      	movs	r3, #255	@ 0xff
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80039fe:	2200      	movs	r2, #0
 8003a00:	2104      	movs	r1, #4
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff f859 	bl	8002aba <_vl53l5cx_poll_for_answer>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8003a12:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8003a1a:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 8003a1e:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8003a22:	f7fe ffcd 	bl	80029c0 <RdMulti>
 8003a26:	4603      	mov	r3, r0
 8003a28:	461a      	mov	r2, r3
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f103 0010 	add.w	r0, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a3c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8003a40:	4619      	mov	r1, r3
 8003a42:	f004 fccd 	bl	80083e0 <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8003a46:	2110      	movs	r1, #16
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff f8c7 	bl	8002bdc <_vl53l5cx_send_offset_data>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	461a      	mov	r2, r3
 8003a52:	7dfb      	ldrb	r3, [r7, #23]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L5CX_DEFAULT_XTALK,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003a5e:	4a34      	ldr	r2, [pc, #208]	@ (8003b30 <vl53l5cx_init+0x890>)
 8003a60:	4618      	mov	r0, r3
 8003a62:	4611      	mov	r1, r2
 8003a64:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f004 fcb9 	bl	80083e0 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8003a6e:	2110      	movs	r1, #16
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff fa7f 	bl	8002f74 <_vl53l5cx_send_xtalk_data>
 8003a76:	4603      	mov	r3, r0
 8003a78:	461a      	mov	r2, r3
 8003a7a:	7dfb      	ldrb	r3, [r7, #23]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 8003a8a:	f642 4134 	movw	r1, #11316	@ 0x2c34
 8003a8e:	f7fe ff5d 	bl	800294c <WrMulti>
 8003a92:	4603      	mov	r3, r0
 8003a94:	461a      	mov	r2, r3
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	9301      	str	r3, [sp, #4]
 8003aa0:	23ff      	movs	r3, #255	@ 0xff
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	2104      	movs	r1, #4
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff f804 	bl	8002aba <_vl53l5cx_poll_for_answer>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	7dfb      	ldrb	r3, [r7, #23]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8003abc:	f107 0110 	add.w	r1, r7, #16
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fe98 	bl	80047fc <vl53l5cx_dci_write_data>
 8003acc:	4603      	mov	r3, r0
 8003ace:	461a      	mov	r2, r3
 8003ad0:	7dfb      	ldrb	r3, [r7, #23]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	75fb      	strb	r3, [r7, #23]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8003ad6:	f107 010c 	add.w	r1, r7, #12
 8003ada:	2304      	movs	r3, #4
 8003adc:	f64d 1264 	movw	r2, #55652	@ 0xd964
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fe8b 	bl	80047fc <vl53l5cx_dci_write_data>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	461a      	mov	r2, r3
 8003aea:	7dfb      	ldrb	r3, [r7, #23]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

	tmp = (uint8_t)1;
 8003af0:	2301      	movs	r3, #1
 8003af2:	75bb      	strb	r3, [r7, #22]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8003afa:	2326      	movs	r3, #38	@ 0x26
 8003afc:	9302      	str	r3, [sp, #8]
 8003afe:	2301      	movs	r3, #1
 8003b00:	9301      	str	r3, [sp, #4]
 8003b02:	f107 0316 	add.w	r3, r7, #22
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	2328      	movs	r3, #40	@ 0x28
 8003b0a:	f24e 1208 	movw	r2, #57608	@ 0xe108
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 ff12 	bl	8004938 <vl53l5cx_dci_replace_data>
 8003b14:	4603      	mov	r3, r0
 8003b16:	461a      	mov	r2, r3
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	e00a      	b.n	8003b34 <vl53l5cx_init+0x894>
 8003b1e:	bf00      	nop
 8003b20:	08008540 	.word	0x08008540
 8003b24:	08010540 	.word	0x08010540
 8003b28:	08018540 	.word	0x08018540
 8003b2c:	0801dc14 	.word	0x0801dc14
 8003b30:	0801d90c 	.word	0x0801d90c
 8003b34:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x26);
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8003b3c:	2325      	movs	r3, #37	@ 0x25
 8003b3e:	9302      	str	r3, [sp, #8]
 8003b40:	2301      	movs	r3, #1
 8003b42:	9301      	str	r3, [sp, #4]
 8003b44:	f107 0316 	add.w	r3, r7, #22
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	2328      	movs	r3, #40	@ 0x28
 8003b4c:	f24e 1208 	movw	r2, #57608	@ 0xe108
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fef1 	bl	8004938 <vl53l5cx_dci_replace_data>
 8003b56:	4603      	mov	r3, r0
 8003b58:	461a      	mov	r2, r3
 8003b5a:	7dfb      	ldrb	r3, [r7, #23]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	75fb      	strb	r3, [r7, #23]
 8003b60:	e004      	b.n	8003b6c <vl53l5cx_init+0x8cc>
		goto exit;
 8003b62:	bf00      	nop
 8003b64:	e002      	b.n	8003b6c <vl53l5cx_init+0x8cc>
		goto exit;
 8003b66:	bf00      	nop
 8003b68:	e000      	b.n	8003b6c <vl53l5cx_init+0x8cc>
		goto exit;
 8003b6a:	bf00      	nop
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x25);

exit:
	return status;
 8003b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop

08003b78 <vl53l5cx_set_i2c_address>:

uint8_t vl53l5cx_set_i2c_address(
		VL53L5CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fe febb 	bl	800290c <WrByte>
 8003b96:	4603      	mov	r3, r0
 8003b98:	461a      	mov	r2, r3
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	887b      	ldrh	r3, [r7, #2]
 8003ba4:	085b      	lsrs	r3, r3, #1
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	2104      	movs	r1, #4
 8003bae:	f7fe fead 	bl	800290c <WrByte>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	887a      	ldrh	r2, [r7, #2]
 8003bc0:	801a      	strh	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe fe9e 	bl	800290c <WrByte>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	73fb      	strb	r3, [r7, #15]

	return status;
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <vl53l5cx_start_ranging>:
	return status;
}

uint8_t vl53l5cx_start_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8003be4:	b5b0      	push	{r4, r5, r7, lr}
 8003be6:	b09c      	sub	sp, #112	@ 0x70
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	657b      	str	r3, [r7, #84]	@ 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8003bfa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 8003c00:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 8003c04:	4619      	mov	r1, r3
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fbd0 	bl	80043ac <vl53l5cx_get_resolution>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	p_dev->data_read_size = 0;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	605a      	str	r2, [r3, #4]
	p_dev->streamcount = 255;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	22ff      	movs	r2, #255	@ 0xff
 8003c24:	709a      	strb	r2, [r3, #2]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8003c26:	4baa      	ldr	r3, [pc, #680]	@ (8003ed0 <vl53l5cx_start_ranging+0x2ec>)
 8003c28:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8003c2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L5CX_START_BH,
 8003c32:	4ba8      	ldr	r3, [pc, #672]	@ (8003ed4 <vl53l5cx_start_ranging+0x2f0>)
 8003c34:	f107 040c 	add.w	r4, r7, #12
 8003c38:	461d      	mov	r5, r3
 8003c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003c46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L5CX_TARGET_STATUS_BH,
		VL53L5CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 8003c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 8003c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c52:	3310      	adds	r3, #16
 8003c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 8003c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c58:	3320      	adds	r3, #32
 8003c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 8003c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c5e:	3340      	adds	r3, #64	@ 0x40
 8003c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 8003c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c64:	3380      	adds	r3, #128	@ 0x80
 8003c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8003c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c6a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8003c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c72:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8003c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8003c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8003c88:	2300      	movs	r3, #0
 8003c8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c8c:	e073      	b.n	8003d76 <vl53l5cx_start_ranging+0x192>
	{
		if ((output[i] == (uint8_t)0) 
 8003c8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	3368      	adds	r3, #104	@ 0x68
 8003c94:	443b      	add	r3, r7
 8003c96:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d067      	beq.n	8003d6e <vl53l5cx_start_ranging+0x18a>
                    || ((output_bh_enable[i/(uint32_t)32]
 8003c9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	3368      	adds	r3, #104	@ 0x68
 8003ca6:	443b      	add	r3, r7
 8003ca8:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8003cac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cae:	f003 031f 	and.w	r3, r3, #31
 8003cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb6:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d057      	beq.n	8003d6e <vl53l5cx_start_ranging+0x18a>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8003cbe:	f107 020c 	add.w	r2, r7, #12
 8003cc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8003cca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d03a      	beq.n	8003d4e <vl53l5cx_start_ranging+0x16a>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8003cd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b0c      	cmp	r3, #12
 8003ce4:	d833      	bhi.n	8003d4e <vl53l5cx_start_ranging+0x16a>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 8003ce6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ce8:	885b      	ldrh	r3, [r3, #2]
 8003cea:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d910      	bls.n	8003d14 <vl53l5cx_start_ranging+0x130>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8003cf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cf4:	885b      	ldrh	r3, [r3, #2]
 8003cf6:	f645 028f 	movw	r2, #22671	@ 0x588f
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d80a      	bhi.n	8003d14 <vl53l5cx_start_ranging+0x130>
			{
				bh_ptr->size = resolution;
 8003cfe:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d06:	b299      	uxth	r1, r3
 8003d08:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003d0a:	8813      	ldrh	r3, [r2, #0]
 8003d0c:	f361 130f 	bfi	r3, r1, #4, #12
 8003d10:	8013      	strh	r3, [r2, #0]
 8003d12:	e009      	b.n	8003d28 <vl53l5cx_start_ranging+0x144>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 8003d14:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1c:	b299      	uxth	r1, r3
 8003d1e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003d20:	8813      	ldrh	r3, [r2, #0]
 8003d22:	f361 130f 	bfi	r3, r1, #4, #12
 8003d26:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L5CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003d2e:	7812      	ldrb	r2, [r2, #0]
 8003d30:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	4611      	mov	r1, r2
 8003d38:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003d3a:	8812      	ldrh	r2, [r2, #0]
 8003d3c:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8003d40:	b292      	uxth	r2, r2
 8003d42:	fb01 f202 	mul.w	r2, r1, r2
 8003d46:	441a      	add	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	605a      	str	r2, [r3, #4]
 8003d4c:	e009      	b.n	8003d62 <vl53l5cx_start_ranging+0x17e>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003d54:	8812      	ldrh	r2, [r2, #0]
 8003d56:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8003d5a:	b292      	uxth	r2, r2
 8003d5c:	441a      	add	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	605a      	str	r2, [r3, #4]
		}
		p_dev->data_read_size += (uint32_t)4;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	1d1a      	adds	r2, r3, #4
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	605a      	str	r2, [r3, #4]
 8003d6c:	e000      	b.n	8003d70 <vl53l5cx_start_ranging+0x18c>
			continue;
 8003d6e:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8003d70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d72:	3301      	adds	r3, #1
 8003d74:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d78:	2b0b      	cmp	r3, #11
 8003d7a:	d988      	bls.n	8003c8e <vl53l5cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t)24;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f103 0218 	add.w	r2, r3, #24
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	605a      	str	r2, [r3, #4]

	status |= vl53l5cx_dci_write_data(p_dev,
 8003d88:	f107 010c 	add.w	r1, r7, #12
 8003d8c:	2330      	movs	r3, #48	@ 0x30
 8003d8e:	f64d 1280 	movw	r2, #55680	@ 0xd980
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fd32 	bl	80047fc <vl53l5cx_dci_write_data>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output), VL53L5CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	653b      	str	r3, [r7, #80]	@ 0x50
	header_config[1] = i + (uint32_t)1;
 8003dac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dae:	3301      	adds	r3, #1
 8003db0:	657b      	str	r3, [r7, #84]	@ 0x54

	status |= vl53l5cx_dci_write_data(p_dev,
 8003db2:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8003db6:	2308      	movs	r3, #8
 8003db8:	f64d 1268 	movw	r2, #55656	@ 0xd968
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fd1d 	bl	80047fc <vl53l5cx_dci_write_data>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(header_config), VL53L5CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev,
 8003dd0:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	f64d 1270 	movw	r2, #55664	@ 0xd970
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fd0e 	bl	80047fc <vl53l5cx_dci_write_data>
 8003de0:	4603      	mov	r3, r0
 8003de2:	461a      	mov	r2, r3
 8003de4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output_bh_enable), VL53L5CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fe fd88 	bl	800290c <WrByte>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2205      	movs	r2, #5
 8003e0e:	2109      	movs	r1, #9
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fe fd7b 	bl	800290c <WrByte>
 8003e16:	4603      	mov	r3, r0
 8003e18:	461a      	mov	r2, r3
 8003e1a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fe fd6d 	bl	800290c <WrByte>
 8003e32:	4603      	mov	r3, r0
 8003e34:	461a      	mov	r2, r3
 8003e36:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53L5CX_UI_CMD_END -
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8003e46:	2304      	movs	r3, #4
 8003e48:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8003e4c:	f7fe fd7e 	bl	800294c <WrMulti>
 8003e50:	4603      	mov	r3, r0
 8003e52:	461a      	mov	r2, r3
 8003e54:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8003e5e:	2303      	movs	r3, #3
 8003e60:	9301      	str	r3, [sp, #4]
 8003e62:	23ff      	movs	r3, #255	@ 0xff
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	2104      	movs	r1, #4
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fe fe23 	bl	8002aba <_vl53l5cx_poll_for_answer>
 8003e74:	4603      	mov	r3, r0
 8003e76:	461a      	mov	r2, r3
 8003e78:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l5cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
	status |= vl53l5cx_dci_read_data(p_dev,
 8003e88:	230c      	movs	r3, #12
 8003e8a:	f245 4240 	movw	r2, #21568	@ 0x5440
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fc2a 	bl	80046e8 <vl53l5cx_dci_read_data>
 8003e94:	4603      	mov	r3, r0
 8003e96:	461a      	mov	r2, r3
 8003e98:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	if(tmp != p_dev->data_read_size)
 8003eb0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d002      	beq.n	8003ec4 <vl53l5cx_start_ranging+0x2e0>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8003ebe:	23ff      	movs	r3, #255	@ 0xff
 8003ec0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return status;
 8003ec4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3768      	adds	r7, #104	@ 0x68
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bdb0      	pop	{r4, r5, r7, pc}
 8003ed0:	08008450 	.word	0x08008450
 8003ed4:	08008460 	.word	0x08008460

08003ed8 <vl53l5cx_check_data_ready>:
}

uint8_t vl53l5cx_check_data_ready(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	73fb      	strb	r3, [r7, #15]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8003eee:	2304      	movs	r3, #4
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	f7fe fd65 	bl	80029c0 <RdMulti>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	461a      	mov	r2, r3
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	789b      	ldrb	r3, [r3, #2]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d020      	beq.n	8003f50 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8003f14:	2bff      	cmp	r3, #255	@ 0xff
 8003f16:	d01b      	beq.n	8003f50 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3501 	ldrb.w	r3, [r3, #1281]	@ 0x501
 8003f1e:	2b05      	cmp	r3, #5
 8003f20:	d116      	bne.n	8003f50 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3502 	ldrb.w	r3, [r3, #1282]	@ 0x502
 8003f28:	f003 0305 	and.w	r3, r3, #5
 8003f2c:	2b05      	cmp	r3, #5
 8003f2e:	d10f      	bne.n	8003f50 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 3503 	ldrb.w	r3, [r3, #1283]	@ 0x503
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d008      	beq.n	8003f50 <vl53l5cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2201      	movs	r2, #1
 8003f42:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	709a      	strb	r2, [r3, #2]
 8003f4e:	e00e      	b.n	8003f6e <vl53l5cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 3503 	ldrb.w	r3, [r3, #1283]	@ 0x503
 8003f56:	b25b      	sxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	da05      	bge.n	8003f68 <vl53l5cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 2502 	ldrb.w	r2, [r3, #1282]	@ 0x502
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <vl53l5cx_get_ranging_data>:

uint8_t vl53l5cx_get_ranging_data(
		VL53L5CX_Configuration		*p_dev,
		VL53L5CX_ResultsData		*p_results)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	77fb      	strb	r3, [r7, #31]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, j, msize;

	status |= RdMulti(&(p_dev->platform), 0x0,
 8003f86:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= RdMulti(&(p_dev->platform), 0x0,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2100      	movs	r1, #0
 8003f94:	f7fe fd14 	bl	80029c0 <RdMulti>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	7ffb      	ldrb	r3, [r7, #31]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	709a      	strb	r2, [r3, #2]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	f7fe fd3a 	bl	8002a34 <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	61bb      	str	r3, [r7, #24]
 8003fc4:	e10e      	b.n	80041e4 <vl53l5cx_get_ranging_data+0x26c>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	4413      	add	r3, r2
 8003fd0:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d915      	bls.n	800400c <vl53l5cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b0c      	cmp	r3, #12
 8003fec:	d80e      	bhi.n	800400c <vl53l5cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8004002:	b29b      	uxth	r3, r3
 8004004:	fb02 f303 	mul.w	r3, r2, r3
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	e005      	b.n	8004018 <vl53l5cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8004014:	b29b      	uxth	r3, r3
 8004016:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	885b      	ldrh	r3, [r3, #2]
 800401c:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8004020:	4293      	cmp	r3, r2
 8004022:	f000 80bb 	beq.w	800419c <vl53l5cx_get_ranging_data+0x224>
 8004026:	f24e 0284 	movw	r2, #57476	@ 0xe084
 800402a:	4293      	cmp	r3, r2
 800402c:	f300 80d2 	bgt.w	80041d4 <vl53l5cx_get_ranging_data+0x25c>
 8004030:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8004034:	4293      	cmp	r3, r2
 8004036:	f000 80a3 	beq.w	8004180 <vl53l5cx_get_ranging_data+0x208>
 800403a:	f24e 0244 	movw	r2, #57412	@ 0xe044
 800403e:	4293      	cmp	r3, r2
 8004040:	f300 80c8 	bgt.w	80041d4 <vl53l5cx_get_ranging_data+0x25c>
 8004044:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8004048:	4293      	cmp	r3, r2
 800404a:	f000 808b 	beq.w	8004164 <vl53l5cx_get_ranging_data+0x1ec>
 800404e:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8004052:	4293      	cmp	r3, r2
 8004054:	f300 80be 	bgt.w	80041d4 <vl53l5cx_get_ranging_data+0x25c>
 8004058:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 800405c:	4293      	cmp	r3, r2
 800405e:	d073      	beq.n	8004148 <vl53l5cx_get_ranging_data+0x1d0>
 8004060:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8004064:	4293      	cmp	r3, r2
 8004066:	f300 80b5 	bgt.w	80041d4 <vl53l5cx_get_ranging_data+0x25c>
 800406a:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 800406e:	4293      	cmp	r3, r2
 8004070:	d05c      	beq.n	800412c <vl53l5cx_get_ranging_data+0x1b4>
 8004072:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8004076:	4293      	cmp	r3, r2
 8004078:	f300 80ac 	bgt.w	80041d4 <vl53l5cx_get_ranging_data+0x25c>
 800407c:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8004080:	4293      	cmp	r3, r2
 8004082:	d045      	beq.n	8004110 <vl53l5cx_get_ranging_data+0x198>
 8004084:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8004088:	4293      	cmp	r3, r2
 800408a:	f300 80a3 	bgt.w	80041d4 <vl53l5cx_get_ranging_data+0x25c>
 800408e:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8004092:	4293      	cmp	r3, r2
 8004094:	f000 8090 	beq.w	80041b8 <vl53l5cx_get_ranging_data+0x240>
 8004098:	f64d 0258 	movw	r2, #55384	@ 0xd858
 800409c:	4293      	cmp	r3, r2
 800409e:	f300 8099 	bgt.w	80041d4 <vl53l5cx_get_ranging_data+0x25c>
 80040a2:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d024      	beq.n	80040f4 <vl53l5cx_get_ranging_data+0x17c>
 80040aa:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 80040ae:	4293      	cmp	r3, r2
 80040b0:	f300 8090 	bgt.w	80041d4 <vl53l5cx_get_ranging_data+0x25c>
 80040b4:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d004      	beq.n	80040c6 <vl53l5cx_get_ranging_data+0x14e>
 80040bc:	f245 42d0 	movw	r2, #21712	@ 0x54d0
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00a      	beq.n	80040da <vl53l5cx_get_ranging_data+0x162>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 80040c4:	e086      	b.n	80041d4 <vl53l5cx_get_ranging_data+0x25c>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	330c      	adds	r3, #12
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	4413      	add	r3, r2
 80040ce:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 80040d2:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	701a      	strb	r2, [r3, #0]
				break;
 80040d8:	e07d      	b.n	80041d6 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->ambient_per_spad,
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	3304      	adds	r3, #4
 80040e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4619      	mov	r1, r3
 80040ee:	f004 f977 	bl	80083e0 <memcpy>
				break;
 80040f2:	e070      	b.n	80041d6 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_spads_enabled,
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	3304      	adds	r3, #4
 80040fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_spads_enabled,
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4619      	mov	r1, r3
 800410a:	f004 f969 	bl	80083e0 <memcpy>
				break;
 800410e:	e062      	b.n	80041d6 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_target_detected,
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	3304      	adds	r3, #4
 800411a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4619      	mov	r1, r3
 8004126:	f004 f95b 	bl	80083e0 <memcpy>
				break;
 800412a:	e054      	b.n	80041d6 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->signal_per_spad,
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	f503 7011 	add.w	r0, r3, #580	@ 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	3304      	adds	r3, #4
 8004136:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4619      	mov	r1, r3
 8004142:	f004 f94d 	bl	80083e0 <memcpy>
				break;
 8004146:	e046      	b.n	80041d6 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->range_sigma_mm,
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	f503 7051 	add.w	r0, r3, #836	@ 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	3304      	adds	r3, #4
 8004152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	4413      	add	r3, r2
				(void)memcpy(p_results->range_sigma_mm,
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4619      	mov	r1, r3
 800415e:	f004 f93f 	bl	80083e0 <memcpy>
				break;
 8004162:	e038      	b.n	80041d6 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->distance_mm,
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	3304      	adds	r3, #4
 800416e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4619      	mov	r1, r3
 800417a:	f004 f931 	bl	80083e0 <memcpy>
				break;
 800417e:	e02a      	b.n	80041d6 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->reflectance,
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	f203 4044 	addw	r0, r3, #1092	@ 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	3304      	adds	r3, #4
 800418a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4619      	mov	r1, r3
 8004196:	f004 f923 	bl	80083e0 <memcpy>
				break;
 800419a:	e01c      	b.n	80041d6 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->target_status,
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	f203 4084 	addw	r0, r3, #1156	@ 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	3304      	adds	r3, #4
 80041a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4619      	mov	r1, r3
 80041b2:	f004 f915 	bl	80083e0 <memcpy>
				break;
 80041b6:	e00e      	b.n	80041d6 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(&p_results->motion_indicator,
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	3304      	adds	r3, #4
 80041c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4619      	mov	r1, r3
 80041ce:	f004 f907 	bl	80083e0 <memcpy>
				break;
 80041d2:	e000      	b.n	80041d6 <vl53l5cx_get_ranging_data+0x25e>
				break;
 80041d4:	bf00      	nop
		}
		i += msize;
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	4413      	add	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	3304      	adds	r3, #4
 80041e2:	61bb      	str	r3, [r7, #24]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	f4ff aeeb 	bcc.w	8003fc6 <vl53l5cx_get_ranging_data+0x4e>

#ifndef VL53L5CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]
 80041f4:	e00d      	b.n	8004212 <vl53l5cx_get_ranging_data+0x29a>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	0ada      	lsrs	r2, r3, #11
 8004202:	6839      	ldr	r1, [r7, #0]
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	3301      	adds	r3, #1
 8004210:	61bb      	str	r3, [r7, #24]
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b3f      	cmp	r3, #63	@ 0x3f
 8004216:	d9ee      	bls.n	80041f6 <vl53l5cx_get_ranging_data+0x27e>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8004218:	2300      	movs	r3, #0
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	e056      	b.n	80042cc <vl53l5cx_get_ranging_data+0x354>
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	4413      	add	r3, r2
 800422a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	da00      	bge.n	8004234 <vl53l5cx_get_ranging_data+0x2bc>
 8004232:	3303      	adds	r3, #3
 8004234:	109b      	asrs	r3, r3, #2
 8004236:	b219      	sxth	r1, r3
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	4413      	add	r3, r2
 8004244:	460a      	mov	r2, r1
 8004246:	809a      	strh	r2, [r3, #4]
		if(p_results->distance_mm[i] < 0)
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	4413      	add	r3, r2
 8004254:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	da07      	bge.n	800426c <vl53l5cx_get_ranging_data+0x2f4>
		{
			p_results->distance_mm[i] = 0;
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	4413      	add	r3, r2
 8004268:	2200      	movs	r2, #0
 800426a:	809a      	strh	r2, [r3, #4]
		}
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	4413      	add	r3, r2
 8004272:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	085b      	lsrs	r3, r3, #1
 800427a:	b2d9      	uxtb	r1, r3
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	4413      	add	r3, r2
 8004282:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8004286:	460a      	mov	r2, r1
 8004288:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	4413      	add	r3, r2
 8004296:	889b      	ldrh	r3, [r3, #4]
 8004298:	09db      	lsrs	r3, r3, #7
 800429a:	b299      	uxth	r1, r3
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	4413      	add	r3, r2
 80042a8:	460a      	mov	r2, r1
 80042aa:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	3390      	adds	r3, #144	@ 0x90
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	0ada      	lsrs	r2, r3, #11
 80042ba:	6839      	ldr	r1, [r7, #0]
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	3390      	adds	r3, #144	@ 0x90
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	605a      	str	r2, [r3, #4]
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	3301      	adds	r3, #1
 80042ca:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80042d0:	d9a5      	bls.n	800421e <vl53l5cx_get_ranging_data+0x2a6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80042d2:	2300      	movs	r3, #0
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	e01b      	b.n	8004310 <vl53l5cx_get_ranging_data+0x398>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d110      	bne.n	800430a <vl53l5cx_get_ranging_data+0x392>
			for(j = 0; j < (uint32_t)
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	e00a      	b.n	8004304 <vl53l5cx_get_ranging_data+0x38c>
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L5CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	4413      	add	r3, r2
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	4413      	add	r3, r2
 80042f8:	22ff      	movs	r2, #255	@ 0xff
 80042fa:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	3301      	adds	r3, #1
 8004302:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f1      	beq.n	80042ee <vl53l5cx_get_ranging_data+0x376>
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	3301      	adds	r3, #1
 800430e:	61bb      	str	r3, [r7, #24]
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	2b3f      	cmp	r3, #63	@ 0x3f
 8004314:	d9e0      	bls.n	80042d8 <vl53l5cx_get_ranging_data+0x360>
		}
	}
#endif

#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8004316:	2300      	movs	r3, #0
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	e014      	b.n	8004346 <vl53l5cx_get_ranging_data+0x3ce>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	4a1f      	ldr	r2, [pc, #124]	@ (80043a8 <vl53l5cx_get_ranging_data+0x430>)
 800432c:	fba2 2303 	umull	r2, r3, r2, r3
 8004330:	0bda      	lsrs	r2, r3, #15
 8004332:	6839      	ldr	r1, [r7, #0]
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	3301      	adds	r3, #1
 8004344:	61bb      	str	r3, [r7, #24]
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	2b1f      	cmp	r3, #31
 800434a:	d9e7      	bls.n	800431c <vl53l5cx_get_ranging_data+0x3a4>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3508 	ldrb.w	r3, [r3, #1288]	@ 0x508
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3509 	ldrb.w	r3, [r3, #1289]	@ 0x509
 800435c:	461a      	mov	r2, r3
 800435e:	89fb      	ldrh	r3, [r7, #14]
 8004360:	4313      	orrs	r3, r2
 8004362:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8004368:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4413      	add	r3, r2
 800436e:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)3])) & 0xFFU;
 800437a:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	4413      	add	r3, r2
 8004380:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8004384:	461a      	mov	r2, r3
 8004386:	89bb      	ldrh	r3, [r7, #12]
 8004388:	4313      	orrs	r3, r2
 800438a:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 800438c:	89fa      	ldrh	r2, [r7, #14]
 800438e:	89bb      	ldrh	r3, [r7, #12]
 8004390:	429a      	cmp	r2, r3
 8004392:	d003      	beq.n	800439c <vl53l5cx_get_ranging_data+0x424>
	{
		status |= VL53L5CX_STATUS_CORRUPTED_FRAME;
 8004394:	7ffb      	ldrb	r3, [r7, #31]
 8004396:	f043 0302 	orr.w	r3, r3, #2
 800439a:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 800439c:	7ffb      	ldrb	r3, [r7, #31]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3720      	adds	r7, #32
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	80008001 	.word	0x80008001

080043ac <vl53l5cx_get_resolution>:

uint8_t vl53l5cx_get_resolution(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 80043c0:	2308      	movs	r3, #8
 80043c2:	f245 4250 	movw	r2, #21584	@ 0x5450
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f98e 	bl	80046e8 <vl53l5cx_dci_read_data>
 80043cc:	4603      	mov	r3, r0
 80043ce:	461a      	mov	r2, r3
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 3501 	ldrb.w	r3, [r3, #1281]	@ 0x501
 80043e2:	fb12 f303 	smulbb	r3, r2, r3
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	701a      	strb	r2, [r3, #0]

	return status;
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <vl53l5cx_set_resolution>:


uint8_t vl53l5cx_set_resolution(
		VL53L5CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	460b      	mov	r3, r1
 8004400:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	2b10      	cmp	r3, #16
 800440a:	d002      	beq.n	8004412 <vl53l5cx_set_resolution+0x1c>
 800440c:	2b40      	cmp	r3, #64	@ 0x40
 800440e:	d055      	beq.n	80044bc <vl53l5cx_set_resolution+0xc6>
 8004410:	e0a9      	b.n	8004566 <vl53l5cx_set_resolution+0x170>
		case VL53L5CX_RESOLUTION_4X4:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_read_data(p_dev,
 8004418:	2310      	movs	r3, #16
 800441a:	f64a 5238 	movw	r2, #44344	@ 0xad38
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f962 	bl	80046e8 <vl53l5cx_dci_read_data>
 8004424:	4603      	mov	r3, r0
 8004426:	461a      	mov	r2, r3
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	4313      	orrs	r3, r2
 800442c:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2240      	movs	r2, #64	@ 0x40
 8004432:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x06] = 64;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2240      	movs	r2, #64	@ 0x40
 800443a:	f883 2506 	strb.w	r2, [r3, #1286]	@ 0x506
			p_dev->temp_buffer[0x09] = 4;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2204      	movs	r2, #4
 8004442:	f883 2509 	strb.w	r2, [r3, #1289]	@ 0x509
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_write_data(p_dev,
 800444c:	2310      	movs	r3, #16
 800444e:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f9d2 	bl	80047fc <vl53l5cx_dci_write_data>
 8004458:	4603      	mov	r3, r0
 800445a:	461a      	mov	r2, r3
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	4313      	orrs	r3, r2
 8004460:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_read_data(p_dev,
 8004468:	2308      	movs	r3, #8
 800446a:	f245 4250 	movw	r2, #21584	@ 0x5450
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f93a 	bl	80046e8 <vl53l5cx_dci_read_data>
 8004474:	4603      	mov	r3, r0
 8004476:	461a      	mov	r2, r3
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	4313      	orrs	r3, r2
 800447c:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2204      	movs	r2, #4
 8004482:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
			p_dev->temp_buffer[0x01] = 4;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2204      	movs	r2, #4
 800448a:	f883 2501 	strb.w	r2, [r3, #1281]	@ 0x501
			p_dev->temp_buffer[0x04] = 8;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2208      	movs	r2, #8
 8004492:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x05] = 8;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2208      	movs	r2, #8
 800449a:	f883 2505 	strb.w	r2, [r3, #1285]	@ 0x505
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_write_data(p_dev,
 80044a4:	2308      	movs	r3, #8
 80044a6:	f245 4250 	movw	r2, #21584	@ 0x5450
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f9a6 	bl	80047fc <vl53l5cx_dci_write_data>
 80044b0:	4603      	mov	r3, r0
 80044b2:	461a      	mov	r2, r3
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			break;
 80044ba:	e057      	b.n	800456c <vl53l5cx_set_resolution+0x176>

		case VL53L5CX_RESOLUTION_8X8:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_read_data(p_dev,
 80044c2:	2310      	movs	r3, #16
 80044c4:	f64a 5238 	movw	r2, #44344	@ 0xad38
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f90d 	bl	80046e8 <vl53l5cx_dci_read_data>
 80044ce:	4603      	mov	r3, r0
 80044d0:	461a      	mov	r2, r3
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2210      	movs	r2, #16
 80044dc:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x06] = 16;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2210      	movs	r2, #16
 80044e4:	f883 2506 	strb.w	r2, [r3, #1286]	@ 0x506
			p_dev->temp_buffer[0x09] = 1;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2509 	strb.w	r2, [r3, #1289]	@ 0x509
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_write_data(p_dev,
 80044f6:	2310      	movs	r3, #16
 80044f8:	f64a 5238 	movw	r2, #44344	@ 0xad38
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f97d 	bl	80047fc <vl53l5cx_dci_write_data>
 8004502:	4603      	mov	r3, r0
 8004504:	461a      	mov	r2, r3
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	4313      	orrs	r3, r2
 800450a:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_read_data(p_dev,
 8004512:	2308      	movs	r3, #8
 8004514:	f245 4250 	movw	r2, #21584	@ 0x5450
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f8e5 	bl	80046e8 <vl53l5cx_dci_read_data>
 800451e:	4603      	mov	r3, r0
 8004520:	461a      	mov	r2, r3
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	4313      	orrs	r3, r2
 8004526:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2208      	movs	r2, #8
 800452c:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
			p_dev->temp_buffer[0x01] = 8;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2208      	movs	r2, #8
 8004534:	f883 2501 	strb.w	r2, [r3, #1281]	@ 0x501
			p_dev->temp_buffer[0x04] = 4;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2204      	movs	r2, #4
 800453c:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x05] = 4;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2204      	movs	r2, #4
 8004544:	f883 2505 	strb.w	r2, [r3, #1285]	@ 0x505
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_write_data(p_dev,
 800454e:	2308      	movs	r3, #8
 8004550:	f245 4250 	movw	r2, #21584	@ 0x5450
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f951 	bl	80047fc <vl53l5cx_dci_write_data>
 800455a:	4603      	mov	r3, r0
 800455c:	461a      	mov	r2, r3
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	4313      	orrs	r3, r2
 8004562:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);

			break;
 8004564:	e002      	b.n	800456c <vl53l5cx_set_resolution+0x176>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 8004566:	237f      	movs	r3, #127	@ 0x7f
 8004568:	73fb      	strb	r3, [r7, #15]
			break;
 800456a:	bf00      	nop
		}

	status |= _vl53l5cx_send_offset_data(p_dev, resolution);
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	4619      	mov	r1, r3
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7fe fb33 	bl	8002bdc <_vl53l5cx_send_offset_data>
 8004576:	4603      	mov	r3, r0
 8004578:	461a      	mov	r2, r3
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	4313      	orrs	r3, r2
 800457e:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l5cx_send_xtalk_data(p_dev, resolution);
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	4619      	mov	r1, r3
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7fe fcf5 	bl	8002f74 <_vl53l5cx_send_xtalk_data>
 800458a:	4603      	mov	r3, r0
 800458c:	461a      	mov	r2, r3
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	4313      	orrs	r3, r2
 8004592:	73fb      	strb	r3, [r7, #15]

	return status;
 8004594:	7bfb      	ldrb	r3, [r7, #15]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <vl53l5cx_set_ranging_frequency_hz>:
}

uint8_t vl53l5cx_set_ranging_frequency_hz(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b088      	sub	sp, #32
 80045a2:	af04      	add	r7, sp, #16
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	460b      	mov	r3, r1
 80045a8:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 80045b4:	2301      	movs	r3, #1
 80045b6:	9302      	str	r3, [sp, #8]
 80045b8:	2301      	movs	r3, #1
 80045ba:	9301      	str	r3, [sp, #4]
 80045bc:	1cfb      	adds	r3, r7, #3
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	2304      	movs	r3, #4
 80045c2:	f245 4258 	movw	r2, #21592	@ 0x5458
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f9b6 	bl	8004938 <vl53l5cx_dci_replace_data>
 80045cc:	4603      	mov	r3, r0
 80045ce:	461a      	mov	r2, r3
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <vl53l5cx_set_target_order>:
}

uint8_t vl53l5cx_set_target_order(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				target_order)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af04      	add	r7, sp, #16
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	73fb      	strb	r3, [r7, #15]

	if((target_order == (uint8_t)VL53L5CX_TARGET_ORDER_CLOSEST)
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d002      	beq.n	80045fc <vl53l5cx_set_target_order+0x1c>
		|| (target_order == (uint8_t)VL53L5CX_TARGET_ORDER_STRONGEST))
 80045f6:	78fb      	ldrb	r3, [r7, #3]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d114      	bne.n	8004626 <vl53l5cx_set_target_order+0x46>
	{
		status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8004602:	2300      	movs	r3, #0
 8004604:	9302      	str	r3, [sp, #8]
 8004606:	2301      	movs	r3, #1
 8004608:	9301      	str	r3, [sp, #4]
 800460a:	1cfb      	adds	r3, r7, #3
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	2304      	movs	r3, #4
 8004610:	f64a 6264 	movw	r2, #44644	@ 0xae64
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f98f 	bl	8004938 <vl53l5cx_dci_replace_data>
 800461a:	4603      	mov	r3, r0
 800461c:	461a      	mov	r2, r3
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	4313      	orrs	r3, r2
 8004622:	73fb      	strb	r3, [r7, #15]
				VL53L5CX_DCI_TARGET_ORDER, 4,
                                (uint8_t*)&target_order, 1, 0x0);
 8004624:	e003      	b.n	800462e <vl53l5cx_set_target_order+0x4e>
	}else
	{
		status |= VL53L5CX_STATUS_INVALID_PARAM;
 8004626:	7bfb      	ldrb	r3, [r7, #15]
 8004628:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 800462c:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800462e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <vl53l5cx_set_ranging_mode>:
}

uint8_t vl53l5cx_set_ranging_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8004648:	2300      	movs	r3, #0
 800464a:	60bb      	str	r3, [r7, #8]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8004652:	2308      	movs	r3, #8
 8004654:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f845 	bl	80046e8 <vl53l5cx_dci_read_data>
 800465e:	4603      	mov	r3, r0
 8004660:	461a      	mov	r2, r3
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	4313      	orrs	r3, r2
 8004666:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d002      	beq.n	8004674 <vl53l5cx_set_ranging_mode+0x3c>
 800466e:	2b03      	cmp	r3, #3
 8004670:	d00b      	beq.n	800468a <vl53l5cx_set_ranging_mode+0x52>
 8004672:	e015      	b.n	80046a0 <vl53l5cx_set_ranging_mode+0x68>
	{
		case VL53L5CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2501 	strb.w	r2, [r3, #1281]	@ 0x501
			p_dev->temp_buffer[0x03] = 0x3;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2203      	movs	r2, #3
 8004680:	f883 2503 	strb.w	r2, [r3, #1283]	@ 0x503
			single_range = 0x00;
 8004684:	2300      	movs	r3, #0
 8004686:	60bb      	str	r3, [r7, #8]
			break;
 8004688:	e00d      	b.n	80046a6 <vl53l5cx_set_ranging_mode+0x6e>

		case VL53L5CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2203      	movs	r2, #3
 800468e:	f883 2501 	strb.w	r2, [r3, #1281]	@ 0x501
			p_dev->temp_buffer[0x03] = 0x2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2202      	movs	r2, #2
 8004696:	f883 2503 	strb.w	r2, [r3, #1283]	@ 0x503
			single_range = 0x01;
 800469a:	2301      	movs	r3, #1
 800469c:	60bb      	str	r3, [r7, #8]
			break;
 800469e:	e002      	b.n	80046a6 <vl53l5cx_set_ranging_mode+0x6e>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 80046a0:	237f      	movs	r3, #127	@ 0x7f
 80046a2:	73fb      	strb	r3, [r7, #15]
			break;
 80046a4:	bf00      	nop
	}

	status |= vl53l5cx_dci_write_data(p_dev, p_dev->temp_buffer,
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 80046ac:	2308      	movs	r3, #8
 80046ae:	f64a 5230 	movw	r2, #44336	@ 0xad30
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f8a2 	bl	80047fc <vl53l5cx_dci_write_data>
 80046b8:	4603      	mov	r3, r0
 80046ba:	461a      	mov	r2, r3
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	4313      	orrs	r3, r2
 80046c0:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 80046c2:	f107 0108 	add.w	r1, r7, #8
 80046c6:	2304      	movs	r3, #4
 80046c8:	f64d 1264 	movw	r2, #55652	@ 0xd964
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f895 	bl	80047fc <vl53l5cx_dci_write_data>
 80046d2:	4603      	mov	r3, r0
 80046d4:	461a      	mov	r2, r3
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	4313      	orrs	r3, r2
 80046da:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_SINGLE_RANGE, 
                        (uint16_t)sizeof(single_range));

	return status;
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <vl53l5cx_dci_read_data>:
uint8_t vl53l5cx_dci_read_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08c      	sub	sp, #48	@ 0x30
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 80046fc:	887b      	ldrh	r3, [r7, #2]
 80046fe:	330c      	adds	r3, #12
 8004700:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8004702:	4a3d      	ldr	r2, [pc, #244]	@ (80047f8 <vl53l5cx_dci_read_data+0x110>)
 8004704:	f107 0314 	add.w	r3, r7, #20
 8004708:	ca07      	ldmia	r2, {r0, r1, r2}
 800470a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
 800470e:	887b      	ldrh	r3, [r7, #2]
 8004710:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8004714:	d903      	bls.n	800471e <vl53l5cx_dci_read_data+0x36>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8004716:	23ff      	movs	r3, #255	@ 0xff
 8004718:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800471c:	e065      	b.n	80047ea <vl53l5cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	0a1b      	lsrs	r3, r3, #8
 8004722:	b2db      	uxtb	r3, r3
 8004724:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 800472c:	887b      	ldrh	r3, [r7, #2]
 800472e:	111b      	asrs	r3, r3, #4
 8004730:	b2db      	uxtb	r3, r3
 8004732:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8004734:	887b      	ldrh	r3, [r7, #2]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	b2db      	uxtb	r3, r3
 800473c:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f107 0214 	add.w	r2, r7, #20
 8004744:	230c      	movs	r3, #12
 8004746:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 800474a:	f7fe f8ff 	bl	800294c <WrMulti>
 800474e:	4603      	mov	r3, r0
 8004750:	461a      	mov	r2, r3
 8004752:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004756:	4313      	orrs	r3, r2
 8004758:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			(VL53L5CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 800475c:	2303      	movs	r3, #3
 800475e:	9301      	str	r3, [sp, #4]
 8004760:	23ff      	movs	r3, #255	@ 0xff
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004768:	2201      	movs	r2, #1
 800476a:	2104      	movs	r1, #4
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f7fe f9a4 	bl	8002aba <_vl53l5cx_poll_for_answer>
 8004772:	4603      	mov	r3, r0
 8004774:	461a      	mov	r2, r3
 8004776:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800477a:	4313      	orrs	r3, r2
 800477c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			VL53L5CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8004780:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	f642 4104 	movw	r1, #11268	@ 0x2c04
 800478e:	f7fe f917 	bl	80029c0 <RdMulti>
 8004792:	4603      	mov	r3, r0
 8004794:	461a      	mov	r2, r3
 8004796:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800479a:	4313      	orrs	r3, r2
 800479c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 80047a6:	887b      	ldrh	r3, [r7, #2]
 80047a8:	330c      	adds	r3, #12
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	4619      	mov	r1, r3
 80047ae:	4610      	mov	r0, r2
 80047b0:	f7fe f940 	bl	8002a34 <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 80047b4:	2300      	movs	r3, #0
 80047b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80047b8:	e011      	b.n	80047de <vl53l5cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 80047ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80047be:	1d1a      	adds	r2, r3, #4
 80047c0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	440b      	add	r3, r1
 80047c8:	68f9      	ldr	r1, [r7, #12]
 80047ca:	440a      	add	r2, r1
 80047cc:	f892 2500 	ldrb.w	r2, [r2, #1280]	@ 0x500
 80047d0:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 80047d2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3301      	adds	r3, #1
 80047da:	b29b      	uxth	r3, r3
 80047dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80047de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047e2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80047e6:	429a      	cmp	r2, r3
 80047e8:	dbe7      	blt.n	80047ba <vl53l5cx_dci_read_data+0xd2>
		}
	}

	return status;
 80047ea:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3728      	adds	r7, #40	@ 0x28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	08008490 	.word	0x08008490

080047fc <vl53l5cx_dci_write_data>:
uint8_t vl53l5cx_dci_write_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08c      	sub	sp, #48	@ 0x30
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8004810:	2300      	movs	r3, #0
 8004812:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8004814:	2300      	movs	r3, #0
 8004816:	753b      	strb	r3, [r7, #20]
 8004818:	2300      	movs	r3, #0
 800481a:	757b      	strb	r3, [r7, #21]
 800481c:	2300      	movs	r3, #0
 800481e:	75bb      	strb	r3, [r7, #22]
 8004820:	230f      	movs	r3, #15
 8004822:	75fb      	strb	r3, [r7, #23]
 8004824:	2305      	movs	r3, #5
 8004826:	763b      	strb	r3, [r7, #24]
 8004828:	2301      	movs	r3, #1
 800482a:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 800482c:	887b      	ldrh	r3, [r7, #2]
 800482e:	3308      	adds	r3, #8
 8004830:	121b      	asrs	r3, r3, #8
 8004832:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8004834:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8004836:	887b      	ldrh	r3, [r7, #2]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	3308      	adds	r3, #8
 800483c:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 800483e:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L5CX_UI_CMD_END - 
 8004840:	887b      	ldrh	r3, [r7, #2]
 8004842:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 8004846:	3334      	adds	r3, #52	@ 0x34
 8004848:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 800484a:	887b      	ldrh	r3, [r7, #2]
 800484c:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8004850:	d903      	bls.n	800485a <vl53l5cx_dci_write_data+0x5e>
           > (uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L5CX_STATUS_ERROR;
 8004852:	23ff      	movs	r3, #255	@ 0xff
 8004854:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004858:	e068      	b.n	800492c <vl53l5cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	0a1b      	lsrs	r3, r3, #8
 800485e:	b2db      	uxtb	r3, r3
 8004860:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8004868:	887b      	ldrh	r3, [r7, #2]
 800486a:	111b      	asrs	r3, r3, #4
 800486c:	b2db      	uxtb	r3, r3
 800486e:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8004870:	887b      	ldrh	r3, [r7, #2]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	b2db      	uxtb	r3, r3
 8004878:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 800487a:	887b      	ldrh	r3, [r7, #2]
 800487c:	4619      	mov	r1, r3
 800487e:	68b8      	ldr	r0, [r7, #8]
 8004880:	f7fe f8d8 	bl	8002a34 <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8004884:	887b      	ldrh	r3, [r7, #2]
 8004886:	3b01      	subs	r3, #1
 8004888:	b29b      	uxth	r3, r3
 800488a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800488c:	e012      	b.n	80048b4 <vl53l5cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 800488e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	441a      	add	r2, r3
 8004896:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800489a:	3304      	adds	r3, #4
 800489c:	7811      	ldrb	r1, [r2, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4413      	add	r3, r2
 80048a2:	460a      	mov	r2, r1
 80048a4:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 80048a8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80048b4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	dae8      	bge.n	800488e <vl53l5cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 80048c6:	887b      	ldrh	r3, [r7, #2]
 80048c8:	3304      	adds	r3, #4
 80048ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4413      	add	r3, r2
 80048d2:	461a      	mov	r2, r3
 80048d4:	f107 0314 	add.w	r3, r7, #20
 80048d8:	cb03      	ldmia	r3!, {r0, r1}
 80048da:	6010      	str	r0, [r2, #0]
 80048dc:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 80048de:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 80048e6:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 80048e8:	330c      	adds	r3, #12
 80048ea:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80048ec:	f7fe f82e 	bl	800294c <WrMulti>
 80048f0:	4603      	mov	r3, r0
 80048f2:	461a      	mov	r2, r3
 80048f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80048fe:	2303      	movs	r3, #3
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	23ff      	movs	r3, #255	@ 0xff
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800490a:	2201      	movs	r2, #1
 800490c:	2104      	movs	r1, #4
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f7fe f8d3 	bl	8002aba <_vl53l5cx_poll_for_answer>
 8004914:	4603      	mov	r3, r0
 8004916:	461a      	mov	r2, r3
 8004918:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800491c:	4313      	orrs	r3, r2
 800491e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 8004922:	887b      	ldrh	r3, [r7, #2]
 8004924:	4619      	mov	r1, r3
 8004926:	68b8      	ldr	r0, [r7, #8]
 8004928:	f7fe f884 	bl	8002a34 <SwapBuffer>
	}

	return status;
 800492c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004930:	4618      	mov	r0, r3
 8004932:	3728      	adds	r7, #40	@ 0x28
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <vl53l5cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	75fb      	strb	r3, [r7, #23]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 800494a:	887b      	ldrh	r3, [r7, #2]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f7ff fec9 	bl	80046e8 <vl53l5cx_dci_read_data>
 8004956:	4603      	mov	r3, r0
 8004958:	461a      	mov	r2, r3
 800495a:	7dfb      	ldrb	r3, [r7, #23]
 800495c:	4313      	orrs	r3, r2
 800495e:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8004960:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	4413      	add	r3, r2
 8004966:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004968:	6a39      	ldr	r1, [r7, #32]
 800496a:	4618      	mov	r0, r3
 800496c:	f003 fd38 	bl	80083e0 <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 8004970:	887b      	ldrh	r3, [r7, #2]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	68b9      	ldr	r1, [r7, #8]
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f7ff ff40 	bl	80047fc <vl53l5cx_dci_write_data>
 800497c:	4603      	mov	r3, r0
 800497e:	461a      	mov	r2, r3
 8004980:	7dfb      	ldrb	r3, [r7, #23]
 8004982:	4313      	orrs	r3, r2
 8004984:	75fb      	strb	r3, [r7, #23]

	return status;
 8004986:	7dfb      	ldrb	r3, [r7, #23]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <LL_GPIO_SetPinMode>:
{
 8004990:	b480      	push	{r7}
 8004992:	b08b      	sub	sp, #44	@ 0x2c
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	fa93 f3a3 	rbit	r3, r3
 80049aa:	613b      	str	r3, [r7, #16]
  return result;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80049b6:	2320      	movs	r3, #32
 80049b8:	e003      	b.n	80049c2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	fab3 f383 	clz	r3, r3
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	2103      	movs	r1, #3
 80049c6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	401a      	ands	r2, r3
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	fa93 f3a3 	rbit	r3, r3
 80049d8:	61fb      	str	r3, [r7, #28]
  return result;
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80049e4:	2320      	movs	r3, #32
 80049e6:	e003      	b.n	80049f0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80049e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ea:	fab3 f383 	clz	r3, r3
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	fa01 f303 	lsl.w	r3, r1, r3
 80049f8:	431a      	orrs	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	601a      	str	r2, [r3, #0]
}
 80049fe:	bf00      	nop
 8004a00:	372c      	adds	r7, #44	@ 0x2c
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <LL_GPIO_SetPinOutputType>:
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	401a      	ands	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	fb01 f303 	mul.w	r3, r1, r3
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	605a      	str	r2, [r3, #4]
}
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <LL_GPIO_SetPinSpeed>:
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b08b      	sub	sp, #44	@ 0x2c
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	fa93 f3a3 	rbit	r3, r3
 8004a54:	613b      	str	r3, [r7, #16]
  return result;
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8004a60:	2320      	movs	r3, #32
 8004a62:	e003      	b.n	8004a6c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	fab3 f383 	clz	r3, r3
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	2103      	movs	r1, #3
 8004a70:	fa01 f303 	lsl.w	r3, r1, r3
 8004a74:	43db      	mvns	r3, r3
 8004a76:	401a      	ands	r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	fa93 f3a3 	rbit	r3, r3
 8004a82:	61fb      	str	r3, [r7, #28]
  return result;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8004a8e:	2320      	movs	r3, #32
 8004a90:	e003      	b.n	8004a9a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a94:	fab3 f383 	clz	r3, r3
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	609a      	str	r2, [r3, #8]
}
 8004aa8:	bf00      	nop
 8004aaa:	372c      	adds	r7, #44	@ 0x2c
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <LL_GPIO_SetPinPull>:
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b08b      	sub	sp, #44	@ 0x2c
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	fa93 f3a3 	rbit	r3, r3
 8004ace:	613b      	str	r3, [r7, #16]
  return result;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004ada:	2320      	movs	r3, #32
 8004adc:	e003      	b.n	8004ae6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	fab3 f383 	clz	r3, r3
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	2103      	movs	r1, #3
 8004aea:	fa01 f303 	lsl.w	r3, r1, r3
 8004aee:	43db      	mvns	r3, r3
 8004af0:	401a      	ands	r2, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	fa93 f3a3 	rbit	r3, r3
 8004afc:	61fb      	str	r3, [r7, #28]
  return result;
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004b08:	2320      	movs	r3, #32
 8004b0a:	e003      	b.n	8004b14 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0e:	fab3 f383 	clz	r3, r3
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	60da      	str	r2, [r3, #12]
}
 8004b22:	bf00      	nop
 8004b24:	372c      	adds	r7, #44	@ 0x2c
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <LL_GPIO_SetAFPin_0_7>:
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b08b      	sub	sp, #44	@ 0x2c
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a1a      	ldr	r2, [r3, #32]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	fa93 f3a3 	rbit	r3, r3
 8004b48:	613b      	str	r3, [r7, #16]
  return result;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8004b54:	2320      	movs	r3, #32
 8004b56:	e003      	b.n	8004b60 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	fab3 f383 	clz	r3, r3
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	210f      	movs	r1, #15
 8004b64:	fa01 f303 	lsl.w	r3, r1, r3
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	401a      	ands	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	fa93 f3a3 	rbit	r3, r3
 8004b76:	61fb      	str	r3, [r7, #28]
  return result;
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8004b82:	2320      	movs	r3, #32
 8004b84:	e003      	b.n	8004b8e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b88:	fab3 f383 	clz	r3, r3
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	fa01 f303 	lsl.w	r3, r1, r3
 8004b96:	431a      	orrs	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	621a      	str	r2, [r3, #32]
}
 8004b9c:	bf00      	nop
 8004b9e:	372c      	adds	r7, #44	@ 0x2c
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <LL_GPIO_SetAFPin_8_15>:
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b08b      	sub	sp, #44	@ 0x2c
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	0a1b      	lsrs	r3, r3, #8
 8004bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	fa93 f3a3 	rbit	r3, r3
 8004bc4:	613b      	str	r3, [r7, #16]
  return result;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004bd0:	2320      	movs	r3, #32
 8004bd2:	e003      	b.n	8004bdc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	fab3 f383 	clz	r3, r3
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	210f      	movs	r1, #15
 8004be0:	fa01 f303 	lsl.w	r3, r1, r3
 8004be4:	43db      	mvns	r3, r3
 8004be6:	401a      	ands	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	0a1b      	lsrs	r3, r3, #8
 8004bec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	fa93 f3a3 	rbit	r3, r3
 8004bf4:	61fb      	str	r3, [r7, #28]
  return result;
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004c00:	2320      	movs	r3, #32
 8004c02:	e003      	b.n	8004c0c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c06:	fab3 f383 	clz	r3, r3
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	fa01 f303 	lsl.w	r3, r1, r3
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004c1a:	bf00      	nop
 8004c1c:	372c      	adds	r7, #44	@ 0x2c
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b088      	sub	sp, #32
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	fa93 f3a3 	rbit	r3, r3
 8004c3c:	60fb      	str	r3, [r7, #12]
  return result;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <LL_GPIO_Init+0x26>
    return 32U;
 8004c48:	2320      	movs	r3, #32
 8004c4a:	e003      	b.n	8004c54 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	fab3 f383 	clz	r3, r3
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004c56:	e048      	b.n	8004cea <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	fa01 f303 	lsl.w	r3, r1, r3
 8004c64:	4013      	ands	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d03a      	beq.n	8004ce4 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d003      	beq.n	8004c7e <LL_GPIO_Init+0x58>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d10e      	bne.n	8004c9c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	461a      	mov	r2, r3
 8004c84:	69b9      	ldr	r1, [r7, #24]
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7ff fed7 	bl	8004a3a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	6819      	ldr	r1, [r3, #0]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	461a      	mov	r2, r3
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff feb7 	bl	8004a0a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	69b9      	ldr	r1, [r7, #24]
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff ff05 	bl	8004ab4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d111      	bne.n	8004cd6 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2bff      	cmp	r3, #255	@ 0xff
 8004cb6:	d807      	bhi.n	8004cc8 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	69b9      	ldr	r1, [r7, #24]
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff ff34 	bl	8004b2e <LL_GPIO_SetAFPin_0_7>
 8004cc6:	e006      	b.n	8004cd6 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	69b9      	ldr	r1, [r7, #24]
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff ff69 	bl	8004ba8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	69b9      	ldr	r1, [r7, #24]
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7ff fe56 	bl	8004990 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1af      	bne.n	8004c58 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3720      	adds	r7, #32
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <LL_I2C_Enable>:
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f043 0201 	orr.w	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	601a      	str	r2, [r3, #0]
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <LL_I2C_Disable>:
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f023 0201 	bic.w	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	601a      	str	r2, [r3, #0]
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <LL_I2C_ConfigFilters>:
{
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	0219      	lsls	r1, r3, #8
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	601a      	str	r2, [r3, #0]
}
 8004d64:	bf00      	nop
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <LL_I2C_SetOwnAddress1>:
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004d84:	f023 0307 	bic.w	r3, r3, #7
 8004d88:	68b9      	ldr	r1, [r7, #8]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	609a      	str	r2, [r3, #8]
}
 8004d94:	bf00      	nop
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <LL_I2C_EnableOwnAddress1>:
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	609a      	str	r2, [r3, #8]
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <LL_I2C_DisableOwnAddress1>:
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	609a      	str	r2, [r3, #8]
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <LL_I2C_SetTiming>:
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	611a      	str	r2, [r3, #16]
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <LL_I2C_SetMode>:
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	601a      	str	r2, [r3, #0]
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <LL_I2C_AcknowledgeNextData>:
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	605a      	str	r2, [r3, #4]
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7ff ff65 	bl	8004d22 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	6899      	ldr	r1, [r3, #8]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	461a      	mov	r2, r3
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff ff6d 	bl	8004d42 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff ffb6 	bl	8004de0 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff ff44 	bl	8004d02 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff ffa0 	bl	8004dc0 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	6919      	ldr	r1, [r3, #16]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff ff70 	bl	8004d70 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7ff ff81 	bl	8004da0 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7ff ffa9 	bl	8004dfc <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	4619      	mov	r1, r3
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff ffb6 	bl	8004e22 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <LL_RCC_HSI_IsReady>:
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004ec4:	4b07      	ldr	r3, [pc, #28]	@ (8004ee4 <LL_RCC_HSI_IsReady+0x24>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ecc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ed0:	d101      	bne.n	8004ed6 <LL_RCC_HSI_IsReady+0x16>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <LL_RCC_HSI_IsReady+0x18>
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40021000 	.word	0x40021000

08004ee8 <LL_RCC_LSE_IsReady>:
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8004eec:	4b07      	ldr	r3, [pc, #28]	@ (8004f0c <LL_RCC_LSE_IsReady+0x24>)
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d101      	bne.n	8004efe <LL_RCC_LSE_IsReady+0x16>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <LL_RCC_LSE_IsReady+0x18>
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40021000 	.word	0x40021000

08004f10 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8004f14:	4b06      	ldr	r3, [pc, #24]	@ (8004f30 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0308 	and.w	r3, r3, #8
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d101      	bne.n	8004f24 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	40021000 	.word	0x40021000

08004f34 <LL_RCC_MSI_GetRange>:
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004f38:	4b04      	ldr	r3, [pc, #16]	@ (8004f4c <LL_RCC_MSI_GetRange+0x18>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40021000 	.word	0x40021000

08004f50 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004f54:	4b04      	ldr	r3, [pc, #16]	@ (8004f68 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8004f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f5a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	40021000 	.word	0x40021000

08004f6c <LL_RCC_GetSysClkSource>:
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004f70:	4b04      	ldr	r3, [pc, #16]	@ (8004f84 <LL_RCC_GetSysClkSource+0x18>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 030c 	and.w	r3, r3, #12
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000

08004f88 <LL_RCC_GetAHBPrescaler>:
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004f8c:	4b04      	ldr	r3, [pc, #16]	@ (8004fa0 <LL_RCC_GetAHBPrescaler+0x18>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40021000 	.word	0x40021000

08004fa4 <LL_RCC_GetAPB1Prescaler>:
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004fa8:	4b04      	ldr	r3, [pc, #16]	@ (8004fbc <LL_RCC_GetAPB1Prescaler+0x18>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40021000 	.word	0x40021000

08004fc0 <LL_RCC_GetAPB2Prescaler>:
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004fc4:	4b04      	ldr	r3, [pc, #16]	@ (8004fd8 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40021000 	.word	0x40021000

08004fdc <LL_RCC_GetUSARTClockSource>:
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8004fe4:	4b06      	ldr	r3, [pc, #24]	@ (8005000 <LL_RCC_GetUSARTClockSource+0x24>)
 8004fe6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	401a      	ands	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	041b      	lsls	r3, r3, #16
 8004ff2:	4313      	orrs	r3, r2
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	40021000 	.word	0x40021000

08005004 <LL_RCC_PLL_GetMainSource>:
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005008:	4b04      	ldr	r3, [pc, #16]	@ (800501c <LL_RCC_PLL_GetMainSource+0x18>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f003 0303 	and.w	r3, r3, #3
}
 8005010:	4618      	mov	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40021000 	.word	0x40021000

08005020 <LL_RCC_PLL_GetN>:
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005024:	4b04      	ldr	r3, [pc, #16]	@ (8005038 <LL_RCC_PLL_GetN+0x18>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	0a1b      	lsrs	r3, r3, #8
 800502a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800502e:	4618      	mov	r0, r3
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	40021000 	.word	0x40021000

0800503c <LL_RCC_PLL_GetR>:
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005040:	4b04      	ldr	r3, [pc, #16]	@ (8005054 <LL_RCC_PLL_GetR+0x18>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 8005048:	4618      	mov	r0, r3
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	40021000 	.word	0x40021000

08005058 <LL_RCC_PLL_GetDivider>:
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800505c:	4b04      	ldr	r3, [pc, #16]	@ (8005070 <LL_RCC_PLL_GetDivider+0x18>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005064:	4618      	mov	r0, r3
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40021000 	.word	0x40021000

08005074 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b03      	cmp	r3, #3
 8005084:	d137      	bne.n	80050f6 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff ffa8 	bl	8004fdc <LL_RCC_GetUSARTClockSource>
 800508c:	4603      	mov	r3, r0
 800508e:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8005092:	2b03      	cmp	r3, #3
 8005094:	f200 80b3 	bhi.w	80051fe <LL_RCC_GetUSARTClockFreq+0x18a>
 8005098:	a201      	add	r2, pc, #4	@ (adr r2, 80050a0 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800509a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509e:	bf00      	nop
 80050a0:	080050df 	.word	0x080050df
 80050a4:	080050b1 	.word	0x080050b1
 80050a8:	080050b9 	.word	0x080050b9
 80050ac:	080050cb 	.word	0x080050cb
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80050b0:	f000 f8c2 	bl	8005238 <RCC_GetSystemClockFreq>
 80050b4:	60f8      	str	r0, [r7, #12]
        break;
 80050b6:	e0b3      	b.n	8005220 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80050b8:	f7ff ff02 	bl	8004ec0 <LL_RCC_HSI_IsReady>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 809f 	beq.w	8005202 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 80050c4:	4b59      	ldr	r3, [pc, #356]	@ (800522c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80050c6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80050c8:	e09b      	b.n	8005202 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80050ca:	f7ff ff0d 	bl	8004ee8 <LL_RCC_LSE_IsReady>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8098 	beq.w	8005206 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 80050d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050da:	60fb      	str	r3, [r7, #12]
        }
        break;
 80050dc:	e093      	b.n	8005206 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80050de:	f000 f8ab 	bl	8005238 <RCC_GetSystemClockFreq>
 80050e2:	4603      	mov	r3, r0
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 f937 	bl	8005358 <RCC_GetHCLKClockFreq>
 80050ea:	4603      	mov	r3, r0
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 f95d 	bl	80053ac <RCC_GetPCLK2ClockFreq>
 80050f2:	60f8      	str	r0, [r7, #12]
        break;
 80050f4:	e094      	b.n	8005220 <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b0c      	cmp	r3, #12
 80050fa:	d146      	bne.n	800518a <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff ff6d 	bl	8004fdc <LL_RCC_GetUSARTClockSource>
 8005102:	4603      	mov	r3, r0
 8005104:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8005108:	2b0c      	cmp	r3, #12
 800510a:	d87e      	bhi.n	800520a <LL_RCC_GetUSARTClockFreq+0x196>
 800510c:	a201      	add	r2, pc, #4	@ (adr r2, 8005114 <LL_RCC_GetUSARTClockFreq+0xa0>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	08005173 	.word	0x08005173
 8005118:	0800520b 	.word	0x0800520b
 800511c:	0800520b 	.word	0x0800520b
 8005120:	0800520b 	.word	0x0800520b
 8005124:	08005149 	.word	0x08005149
 8005128:	0800520b 	.word	0x0800520b
 800512c:	0800520b 	.word	0x0800520b
 8005130:	0800520b 	.word	0x0800520b
 8005134:	08005151 	.word	0x08005151
 8005138:	0800520b 	.word	0x0800520b
 800513c:	0800520b 	.word	0x0800520b
 8005140:	0800520b 	.word	0x0800520b
 8005144:	08005161 	.word	0x08005161
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005148:	f000 f876 	bl	8005238 <RCC_GetSystemClockFreq>
 800514c:	60f8      	str	r0, [r7, #12]
        break;
 800514e:	e067      	b.n	8005220 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005150:	f7ff feb6 	bl	8004ec0 <LL_RCC_HSI_IsReady>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d059      	beq.n	800520e <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 800515a:	4b34      	ldr	r3, [pc, #208]	@ (800522c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800515c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800515e:	e056      	b.n	800520e <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005160:	f7ff fec2 	bl	8004ee8 <LL_RCC_LSE_IsReady>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d053      	beq.n	8005212 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 800516a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800516e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005170:	e04f      	b.n	8005212 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005172:	f000 f861 	bl	8005238 <RCC_GetSystemClockFreq>
 8005176:	4603      	mov	r3, r0
 8005178:	4618      	mov	r0, r3
 800517a:	f000 f8ed 	bl	8005358 <RCC_GetHCLKClockFreq>
 800517e:	4603      	mov	r3, r0
 8005180:	4618      	mov	r0, r3
 8005182:	f000 f8ff 	bl	8005384 <RCC_GetPCLK1ClockFreq>
 8005186:	60f8      	str	r0, [r7, #12]
        break;
 8005188:	e04a      	b.n	8005220 <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b30      	cmp	r3, #48	@ 0x30
 800518e:	d147      	bne.n	8005220 <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff ff23 	bl	8004fdc <LL_RCC_GetUSARTClockSource>
 8005196:	4603      	mov	r3, r0
 8005198:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 800519c:	d01a      	beq.n	80051d4 <LL_RCC_GetUSARTClockFreq+0x160>
 800519e:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 80051a2:	d838      	bhi.n	8005216 <LL_RCC_GetUSARTClockFreq+0x1a2>
 80051a4:	4a22      	ldr	r2, [pc, #136]	@ (8005230 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00c      	beq.n	80051c4 <LL_RCC_GetUSARTClockFreq+0x150>
 80051aa:	4a21      	ldr	r2, [pc, #132]	@ (8005230 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d832      	bhi.n	8005216 <LL_RCC_GetUSARTClockFreq+0x1a2>
 80051b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80051b4:	d017      	beq.n	80051e6 <LL_RCC_GetUSARTClockFreq+0x172>
 80051b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005234 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d12c      	bne.n	8005216 <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80051bc:	f000 f83c 	bl	8005238 <RCC_GetSystemClockFreq>
 80051c0:	60f8      	str	r0, [r7, #12]
          break;
 80051c2:	e02d      	b.n	8005220 <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80051c4:	f7ff fe7c 	bl	8004ec0 <LL_RCC_HSI_IsReady>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d025      	beq.n	800521a <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 80051ce:	4b17      	ldr	r3, [pc, #92]	@ (800522c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80051d0:	60fb      	str	r3, [r7, #12]
          }
          break;
 80051d2:	e022      	b.n	800521a <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 80051d4:	f7ff fe88 	bl	8004ee8 <LL_RCC_LSE_IsReady>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01f      	beq.n	800521e <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 80051de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051e2:	60fb      	str	r3, [r7, #12]
          }
          break;
 80051e4:	e01b      	b.n	800521e <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80051e6:	f000 f827 	bl	8005238 <RCC_GetSystemClockFreq>
 80051ea:	4603      	mov	r3, r0
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 f8b3 	bl	8005358 <RCC_GetHCLKClockFreq>
 80051f2:	4603      	mov	r3, r0
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 f8c5 	bl	8005384 <RCC_GetPCLK1ClockFreq>
 80051fa:	60f8      	str	r0, [r7, #12]
          break;
 80051fc:	e010      	b.n	8005220 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80051fe:	bf00      	nop
 8005200:	e00e      	b.n	8005220 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8005202:	bf00      	nop
 8005204:	e00c      	b.n	8005220 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8005206:	bf00      	nop
 8005208:	e00a      	b.n	8005220 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800520a:	bf00      	nop
 800520c:	e008      	b.n	8005220 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800520e:	bf00      	nop
 8005210:	e006      	b.n	8005220 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8005212:	bf00      	nop
 8005214:	e004      	b.n	8005220 <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 8005216:	bf00      	nop
 8005218:	e002      	b.n	8005220 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 800521a:	bf00      	nop
 800521c:	e000      	b.n	8005220 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 800521e:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8005220:	68fb      	ldr	r3, [r7, #12]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	00f42400 	.word	0x00f42400
 8005230:	00300020 	.word	0x00300020
 8005234:	00300010 	.word	0x00300010

08005238 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800523e:	f7ff fe95 	bl	8004f6c <LL_RCC_GetSysClkSource>
 8005242:	4603      	mov	r3, r0
 8005244:	2b0c      	cmp	r3, #12
 8005246:	d851      	bhi.n	80052ec <RCC_GetSystemClockFreq+0xb4>
 8005248:	a201      	add	r2, pc, #4	@ (adr r2, 8005250 <RCC_GetSystemClockFreq+0x18>)
 800524a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524e:	bf00      	nop
 8005250:	08005285 	.word	0x08005285
 8005254:	080052ed 	.word	0x080052ed
 8005258:	080052ed 	.word	0x080052ed
 800525c:	080052ed 	.word	0x080052ed
 8005260:	080052d9 	.word	0x080052d9
 8005264:	080052ed 	.word	0x080052ed
 8005268:	080052ed 	.word	0x080052ed
 800526c:	080052ed 	.word	0x080052ed
 8005270:	080052df 	.word	0x080052df
 8005274:	080052ed 	.word	0x080052ed
 8005278:	080052ed 	.word	0x080052ed
 800527c:	080052ed 	.word	0x080052ed
 8005280:	080052e5 	.word	0x080052e5
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005284:	f7ff fe44 	bl	8004f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d111      	bne.n	80052b2 <RCC_GetSystemClockFreq+0x7a>
 800528e:	f7ff fe3f 	bl	8004f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <RCC_GetSystemClockFreq+0x6a>
 8005298:	f7ff fe4c 	bl	8004f34 <LL_RCC_MSI_GetRange>
 800529c:	4603      	mov	r3, r0
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	e003      	b.n	80052aa <RCC_GetSystemClockFreq+0x72>
 80052a2:	f7ff fe55 	bl	8004f50 <LL_RCC_MSI_GetRangeAfterStandby>
 80052a6:	4603      	mov	r3, r0
 80052a8:	0a1b      	lsrs	r3, r3, #8
 80052aa:	4a28      	ldr	r2, [pc, #160]	@ (800534c <RCC_GetSystemClockFreq+0x114>)
 80052ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052b0:	e010      	b.n	80052d4 <RCC_GetSystemClockFreq+0x9c>
 80052b2:	f7ff fe2d 	bl	8004f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d004      	beq.n	80052c6 <RCC_GetSystemClockFreq+0x8e>
 80052bc:	f7ff fe3a 	bl	8004f34 <LL_RCC_MSI_GetRange>
 80052c0:	4603      	mov	r3, r0
 80052c2:	091b      	lsrs	r3, r3, #4
 80052c4:	e003      	b.n	80052ce <RCC_GetSystemClockFreq+0x96>
 80052c6:	f7ff fe43 	bl	8004f50 <LL_RCC_MSI_GetRangeAfterStandby>
 80052ca:	4603      	mov	r3, r0
 80052cc:	091b      	lsrs	r3, r3, #4
 80052ce:	4a1f      	ldr	r2, [pc, #124]	@ (800534c <RCC_GetSystemClockFreq+0x114>)
 80052d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d4:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80052d6:	e033      	b.n	8005340 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80052d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005350 <RCC_GetSystemClockFreq+0x118>)
 80052da:	607b      	str	r3, [r7, #4]
      break;
 80052dc:	e030      	b.n	8005340 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80052de:	4b1d      	ldr	r3, [pc, #116]	@ (8005354 <RCC_GetSystemClockFreq+0x11c>)
 80052e0:	607b      	str	r3, [r7, #4]
      break;
 80052e2:	e02d      	b.n	8005340 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80052e4:	f000 f876 	bl	80053d4 <RCC_PLL_GetFreqDomain_SYS>
 80052e8:	6078      	str	r0, [r7, #4]
      break;
 80052ea:	e029      	b.n	8005340 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80052ec:	f7ff fe10 	bl	8004f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d111      	bne.n	800531a <RCC_GetSystemClockFreq+0xe2>
 80052f6:	f7ff fe0b 	bl	8004f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d004      	beq.n	800530a <RCC_GetSystemClockFreq+0xd2>
 8005300:	f7ff fe18 	bl	8004f34 <LL_RCC_MSI_GetRange>
 8005304:	4603      	mov	r3, r0
 8005306:	0a1b      	lsrs	r3, r3, #8
 8005308:	e003      	b.n	8005312 <RCC_GetSystemClockFreq+0xda>
 800530a:	f7ff fe21 	bl	8004f50 <LL_RCC_MSI_GetRangeAfterStandby>
 800530e:	4603      	mov	r3, r0
 8005310:	0a1b      	lsrs	r3, r3, #8
 8005312:	4a0e      	ldr	r2, [pc, #56]	@ (800534c <RCC_GetSystemClockFreq+0x114>)
 8005314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005318:	e010      	b.n	800533c <RCC_GetSystemClockFreq+0x104>
 800531a:	f7ff fdf9 	bl	8004f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d004      	beq.n	800532e <RCC_GetSystemClockFreq+0xf6>
 8005324:	f7ff fe06 	bl	8004f34 <LL_RCC_MSI_GetRange>
 8005328:	4603      	mov	r3, r0
 800532a:	091b      	lsrs	r3, r3, #4
 800532c:	e003      	b.n	8005336 <RCC_GetSystemClockFreq+0xfe>
 800532e:	f7ff fe0f 	bl	8004f50 <LL_RCC_MSI_GetRangeAfterStandby>
 8005332:	4603      	mov	r3, r0
 8005334:	091b      	lsrs	r3, r3, #4
 8005336:	4a05      	ldr	r2, [pc, #20]	@ (800534c <RCC_GetSystemClockFreq+0x114>)
 8005338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800533c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800533e:	bf00      	nop
  }

  return frequency;
 8005340:	687b      	ldr	r3, [r7, #4]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	08008500 	.word	0x08008500
 8005350:	00f42400 	.word	0x00f42400
 8005354:	007a1200 	.word	0x007a1200

08005358 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005360:	f7ff fe12 	bl	8004f88 <LL_RCC_GetAHBPrescaler>
 8005364:	4603      	mov	r3, r0
 8005366:	091b      	lsrs	r3, r3, #4
 8005368:	f003 030f 	and.w	r3, r3, #15
 800536c:	4a04      	ldr	r2, [pc, #16]	@ (8005380 <RCC_GetHCLKClockFreq+0x28>)
 800536e:	5cd3      	ldrb	r3, [r2, r3]
 8005370:	461a      	mov	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	40d3      	lsrs	r3, r2
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	080084e8 	.word	0x080084e8

08005384 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800538c:	f7ff fe0a 	bl	8004fa4 <LL_RCC_GetAPB1Prescaler>
 8005390:	4603      	mov	r3, r0
 8005392:	0a1b      	lsrs	r3, r3, #8
 8005394:	4a04      	ldr	r2, [pc, #16]	@ (80053a8 <RCC_GetPCLK1ClockFreq+0x24>)
 8005396:	5cd3      	ldrb	r3, [r2, r3]
 8005398:	461a      	mov	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	40d3      	lsrs	r3, r2
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	080084f8 	.word	0x080084f8

080053ac <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80053b4:	f7ff fe04 	bl	8004fc0 <LL_RCC_GetAPB2Prescaler>
 80053b8:	4603      	mov	r3, r0
 80053ba:	0adb      	lsrs	r3, r3, #11
 80053bc:	4a04      	ldr	r2, [pc, #16]	@ (80053d0 <RCC_GetPCLK2ClockFreq+0x24>)
 80053be:	5cd3      	ldrb	r3, [r2, r3]
 80053c0:	461a      	mov	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	40d3      	lsrs	r3, r2
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	080084f8 	.word	0x080084f8

080053d4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80053d4:	b590      	push	{r4, r7, lr}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80053da:	f7ff fe13 	bl	8005004 <LL_RCC_PLL_GetMainSource>
 80053de:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d036      	beq.n	8005454 <RCC_PLL_GetFreqDomain_SYS+0x80>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b03      	cmp	r3, #3
 80053ea:	d836      	bhi.n	800545a <RCC_PLL_GetFreqDomain_SYS+0x86>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d003      	beq.n	80053fa <RCC_PLL_GetFreqDomain_SYS+0x26>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d02a      	beq.n	800544e <RCC_PLL_GetFreqDomain_SYS+0x7a>
 80053f8:	e02f      	b.n	800545a <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80053fa:	f7ff fd89 	bl	8004f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d111      	bne.n	8005428 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8005404:	f7ff fd84 	bl	8004f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d004      	beq.n	8005418 <RCC_PLL_GetFreqDomain_SYS+0x44>
 800540e:	f7ff fd91 	bl	8004f34 <LL_RCC_MSI_GetRange>
 8005412:	4603      	mov	r3, r0
 8005414:	0a1b      	lsrs	r3, r3, #8
 8005416:	e003      	b.n	8005420 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8005418:	f7ff fd9a 	bl	8004f50 <LL_RCC_MSI_GetRangeAfterStandby>
 800541c:	4603      	mov	r3, r0
 800541e:	0a1b      	lsrs	r3, r3, #8
 8005420:	4a2f      	ldr	r2, [pc, #188]	@ (80054e0 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005426:	e010      	b.n	800544a <RCC_PLL_GetFreqDomain_SYS+0x76>
 8005428:	f7ff fd72 	bl	8004f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <RCC_PLL_GetFreqDomain_SYS+0x68>
 8005432:	f7ff fd7f 	bl	8004f34 <LL_RCC_MSI_GetRange>
 8005436:	4603      	mov	r3, r0
 8005438:	091b      	lsrs	r3, r3, #4
 800543a:	e003      	b.n	8005444 <RCC_PLL_GetFreqDomain_SYS+0x70>
 800543c:	f7ff fd88 	bl	8004f50 <LL_RCC_MSI_GetRangeAfterStandby>
 8005440:	4603      	mov	r3, r0
 8005442:	091b      	lsrs	r3, r3, #4
 8005444:	4a26      	ldr	r2, [pc, #152]	@ (80054e0 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800544a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800544c:	e02f      	b.n	80054ae <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800544e:	4b25      	ldr	r3, [pc, #148]	@ (80054e4 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8005450:	607b      	str	r3, [r7, #4]
      break;
 8005452:	e02c      	b.n	80054ae <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005454:	4b24      	ldr	r3, [pc, #144]	@ (80054e8 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8005456:	607b      	str	r3, [r7, #4]
      break;
 8005458:	e029      	b.n	80054ae <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800545a:	f7ff fd59 	bl	8004f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d111      	bne.n	8005488 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8005464:	f7ff fd54 	bl	8004f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d004      	beq.n	8005478 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 800546e:	f7ff fd61 	bl	8004f34 <LL_RCC_MSI_GetRange>
 8005472:	4603      	mov	r3, r0
 8005474:	0a1b      	lsrs	r3, r3, #8
 8005476:	e003      	b.n	8005480 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8005478:	f7ff fd6a 	bl	8004f50 <LL_RCC_MSI_GetRangeAfterStandby>
 800547c:	4603      	mov	r3, r0
 800547e:	0a1b      	lsrs	r3, r3, #8
 8005480:	4a17      	ldr	r2, [pc, #92]	@ (80054e0 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005486:	e010      	b.n	80054aa <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8005488:	f7ff fd42 	bl	8004f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d004      	beq.n	800549c <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8005492:	f7ff fd4f 	bl	8004f34 <LL_RCC_MSI_GetRange>
 8005496:	4603      	mov	r3, r0
 8005498:	091b      	lsrs	r3, r3, #4
 800549a:	e003      	b.n	80054a4 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 800549c:	f7ff fd58 	bl	8004f50 <LL_RCC_MSI_GetRangeAfterStandby>
 80054a0:	4603      	mov	r3, r0
 80054a2:	091b      	lsrs	r3, r3, #4
 80054a4:	4a0e      	ldr	r2, [pc, #56]	@ (80054e0 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80054a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054aa:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80054ac:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80054ae:	f7ff fdd3 	bl	8005058 <LL_RCC_PLL_GetDivider>
 80054b2:	4603      	mov	r3, r0
 80054b4:	091b      	lsrs	r3, r3, #4
 80054b6:	3301      	adds	r3, #1
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	fbb2 f4f3 	udiv	r4, r2, r3
 80054be:	f7ff fdaf 	bl	8005020 <LL_RCC_PLL_GetN>
 80054c2:	4603      	mov	r3, r0
 80054c4:	fb03 f404 	mul.w	r4, r3, r4
 80054c8:	f7ff fdb8 	bl	800503c <LL_RCC_PLL_GetR>
 80054cc:	4603      	mov	r3, r0
 80054ce:	0e5b      	lsrs	r3, r3, #25
 80054d0:	3301      	adds	r3, #1
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80054d8:	4618      	mov	r0, r3
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd90      	pop	{r4, r7, pc}
 80054e0:	08008500 	.word	0x08008500
 80054e4:	00f42400 	.word	0x00f42400
 80054e8:	007a1200 	.word	0x007a1200

080054ec <LL_SPI_IsEnabled>:
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054fc:	2b40      	cmp	r3, #64	@ 0x40
 80054fe:	d101      	bne.n	8005504 <LL_SPI_IsEnabled+0x18>
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <LL_SPI_IsEnabled+0x1a>
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <LL_SPI_SetRxFIFOThreshold>:
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	431a      	orrs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	605a      	str	r2, [r3, #4]
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <LL_SPI_SetCRCPolynomial>:
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	461a      	mov	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	611a      	str	r2, [r3, #16]
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff ffc0 	bl	80054ec <LL_SPI_IsEnabled>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d145      	bne.n	80055fe <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800557a:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	6811      	ldr	r1, [r2, #0]
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	6852      	ldr	r2, [r2, #4]
 8005586:	4311      	orrs	r1, r2
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	68d2      	ldr	r2, [r2, #12]
 800558c:	4311      	orrs	r1, r2
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	6912      	ldr	r2, [r2, #16]
 8005592:	4311      	orrs	r1, r2
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	6952      	ldr	r2, [r2, #20]
 8005598:	4311      	orrs	r1, r2
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	6992      	ldr	r2, [r2, #24]
 800559e:	4311      	orrs	r1, r2
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	69d2      	ldr	r2, [r2, #28]
 80055a4:	4311      	orrs	r1, r2
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	6a12      	ldr	r2, [r2, #32]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	431a      	orrs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80055ba:	f023 0304 	bic.w	r3, r3, #4
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	6891      	ldr	r1, [r2, #8]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	6952      	ldr	r2, [r2, #20]
 80055c6:	0c12      	lsrs	r2, r2, #16
 80055c8:	430a      	orrs	r2, r1
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055d8:	d204      	bcs.n	80055e4 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 80055da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff ff97 	bl	8005512 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055ec:	d105      	bne.n	80055fa <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff ff9f 	bl	8005538 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80055fa:	2300      	movs	r3, #0
 80055fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <LL_USART_IsEnabled>:
__STATIC_INLINE uint32_t LL_USART_IsEnabled(const USART_TypeDef *USARTx) {
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
	return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <LL_USART_IsEnabled+0x18>
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <LL_USART_IsEnabled+0x1a>
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <LL_USART_SetStopBitsLength>:
		uint32_t StopBits) {
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6039      	str	r1, [r7, #0]
	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	605a      	str	r2, [r3, #4]
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <LL_USART_SetHWFlowCtrl>:
		uint32_t HardwareFlowControl) {
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
	MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE,
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	431a      	orrs	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	609a      	str	r2, [r3, #8]
}
 800566e:	bf00      	nop
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <LL_USART_SetBaudRate>:
{
 800567a:	b480      	push	{r7}
 800567c:	b087      	sub	sp, #28
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	607a      	str	r2, [r7, #4]
 8005686:	603b      	str	r3, [r7, #0]
	if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800568e:	d11a      	bne.n	80056c6 <LL_USART_SetBaudRate+0x4c>
		usartdiv = (uint16_t) (__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	005a      	lsls	r2, r3, #1
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	085b      	lsrs	r3, r3, #1
 8005698:	441a      	add	r2, r3
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	617b      	str	r3, [r7, #20]
		brrtemp = usartdiv & 0xFFF0U;
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80056aa:	4013      	ands	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]
		brrtemp |= (uint16_t) ((usartdiv & (uint16_t) 0x000FU) >> 1U);
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	085b      	lsrs	r3, r3, #1
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]
		USARTx->BRR = brrtemp;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	60da      	str	r2, [r3, #12]
}
 80056c4:	e00a      	b.n	80056dc <LL_USART_SetBaudRate+0x62>
				(uint16_t) (__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	085a      	lsrs	r2, r3, #1
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	441a      	add	r2, r3
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	461a      	mov	r2, r3
		USARTx->BRR =
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	60da      	str	r2, [r3, #12]
}
 80056dc:	bf00      	nop
 80056de:	371c      	adds	r7, #28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7ff ff84 	bl	8005608 <LL_USART_IsEnabled>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d148      	bne.n	8005798 <LL_USART_Init+0xb0>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	4b26      	ldr	r3, [pc, #152]	@ (80057a4 <LL_USART_Init+0xbc>)
 800570c:	4013      	ands	r3, r2
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	6851      	ldr	r1, [r2, #4]
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	68d2      	ldr	r2, [r2, #12]
 8005716:	4311      	orrs	r1, r2
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	6912      	ldr	r2, [r2, #16]
 800571c:	4311      	orrs	r1, r2
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	6992      	ldr	r2, [r2, #24]
 8005722:	430a      	orrs	r2, r1
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	4619      	mov	r1, r3
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff ff7c 	bl	800562e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	4619      	mov	r1, r3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7ff ff89 	bl	8005654 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a18      	ldr	r2, [pc, #96]	@ (80057a8 <LL_USART_Init+0xc0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d104      	bne.n	8005754 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800574a:	2003      	movs	r0, #3
 800574c:	f7ff fc92 	bl	8005074 <LL_RCC_GetUSARTClockFreq>
 8005750:	60b8      	str	r0, [r7, #8]
 8005752:	e010      	b.n	8005776 <LL_USART_Init+0x8e>
    }
    else if (USARTx == USART2)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a15      	ldr	r2, [pc, #84]	@ (80057ac <LL_USART_Init+0xc4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d104      	bne.n	8005766 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800575c:	200c      	movs	r0, #12
 800575e:	f7ff fc89 	bl	8005074 <LL_RCC_GetUSARTClockFreq>
 8005762:	60b8      	str	r0, [r7, #8]
 8005764:	e007      	b.n	8005776 <LL_USART_Init+0x8e>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a11      	ldr	r2, [pc, #68]	@ (80057b0 <LL_USART_Init+0xc8>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d103      	bne.n	8005776 <LL_USART_Init+0x8e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800576e:	2030      	movs	r0, #48	@ 0x30
 8005770:	f7ff fc80 	bl	8005074 <LL_RCC_GetUSARTClockFreq>
 8005774:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00d      	beq.n	8005798 <LL_USART_Init+0xb0>
        && (USART_InitStruct->BaudRate != 0U))
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d009      	beq.n	8005798 <LL_USART_Init+0xb0>
    {
      status = SUCCESS;
 8005784:	2300      	movs	r3, #0
 8005786:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8005790:	68b9      	ldr	r1, [r7, #8]
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff ff71 	bl	800567a <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005798:	7bfb      	ldrb	r3, [r7, #15]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	efff69f3 	.word	0xefff69f3
 80057a8:	40013800 	.word	0x40013800
 80057ac:	40004400 	.word	0x40004400
 80057b0:	40004800 	.word	0x40004800

080057b4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c6:	4a07      	ldr	r2, [pc, #28]	@ (80057e4 <LL_InitTick+0x30>)
 80057c8:	3b01      	subs	r3, #1
 80057ca:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80057cc:	4b05      	ldr	r3, [pc, #20]	@ (80057e4 <LL_InitTick+0x30>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057d2:	4b04      	ldr	r3, [pc, #16]	@ (80057e4 <LL_InitTick+0x30>)
 80057d4:	2205      	movs	r2, #5
 80057d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	e000e010 	.word	0xe000e010

080057e8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80057f0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff ffdd 	bl	80057b4 <LL_InitTick>
}
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800580c:	4a04      	ldr	r2, [pc, #16]	@ (8005820 <LL_SetSystemCoreClock+0x1c>)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6013      	str	r3, [r2, #0]
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	20000000 	.word	0x20000000

08005824 <__NVIC_SetPriority>:
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	4603      	mov	r3, r0
 800582c:	6039      	str	r1, [r7, #0]
 800582e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005834:	2b00      	cmp	r3, #0
 8005836:	db0a      	blt.n	800584e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	b2da      	uxtb	r2, r3
 800583c:	490c      	ldr	r1, [pc, #48]	@ (8005870 <__NVIC_SetPriority+0x4c>)
 800583e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005842:	0112      	lsls	r2, r2, #4
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	440b      	add	r3, r1
 8005848:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800584c:	e00a      	b.n	8005864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	b2da      	uxtb	r2, r3
 8005852:	4908      	ldr	r1, [pc, #32]	@ (8005874 <__NVIC_SetPriority+0x50>)
 8005854:	79fb      	ldrb	r3, [r7, #7]
 8005856:	f003 030f 	and.w	r3, r3, #15
 800585a:	3b04      	subs	r3, #4
 800585c:	0112      	lsls	r2, r2, #4
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	440b      	add	r3, r1
 8005862:	761a      	strb	r2, [r3, #24]
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	e000e100 	.word	0xe000e100
 8005874:	e000ed00 	.word	0xe000ed00

08005878 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800587c:	2100      	movs	r1, #0
 800587e:	f06f 0004 	mvn.w	r0, #4
 8005882:	f7ff ffcf 	bl	8005824 <__NVIC_SetPriority>
#endif
}
 8005886:	bf00      	nop
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005892:	f3ef 8305 	mrs	r3, IPSR
 8005896:	603b      	str	r3, [r7, #0]
  return(result);
 8005898:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800589e:	f06f 0305 	mvn.w	r3, #5
 80058a2:	607b      	str	r3, [r7, #4]
 80058a4:	e00c      	b.n	80058c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80058a6:	4b0a      	ldr	r3, [pc, #40]	@ (80058d0 <osKernelInitialize+0x44>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d105      	bne.n	80058ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80058ae:	4b08      	ldr	r3, [pc, #32]	@ (80058d0 <osKernelInitialize+0x44>)
 80058b0:	2201      	movs	r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	607b      	str	r3, [r7, #4]
 80058b8:	e002      	b.n	80058c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80058ba:	f04f 33ff 	mov.w	r3, #4294967295
 80058be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80058c0:	687b      	ldr	r3, [r7, #4]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	20001028 	.word	0x20001028

080058d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058da:	f3ef 8305 	mrs	r3, IPSR
 80058de:	603b      	str	r3, [r7, #0]
  return(result);
 80058e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80058e6:	f06f 0305 	mvn.w	r3, #5
 80058ea:	607b      	str	r3, [r7, #4]
 80058ec:	e010      	b.n	8005910 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80058ee:	4b0b      	ldr	r3, [pc, #44]	@ (800591c <osKernelStart+0x48>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d109      	bne.n	800590a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80058f6:	f7ff ffbf 	bl	8005878 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80058fa:	4b08      	ldr	r3, [pc, #32]	@ (800591c <osKernelStart+0x48>)
 80058fc:	2202      	movs	r2, #2
 80058fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005900:	f001 f87a 	bl	80069f8 <vTaskStartScheduler>
      stat = osOK;
 8005904:	2300      	movs	r3, #0
 8005906:	607b      	str	r3, [r7, #4]
 8005908:	e002      	b.n	8005910 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800590a:	f04f 33ff 	mov.w	r3, #4294967295
 800590e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005910:	687b      	ldr	r3, [r7, #4]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20001028 	.word	0x20001028

08005920 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005920:	b580      	push	{r7, lr}
 8005922:	b08e      	sub	sp, #56	@ 0x38
 8005924:	af04      	add	r7, sp, #16
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800592c:	2300      	movs	r3, #0
 800592e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005930:	f3ef 8305 	mrs	r3, IPSR
 8005934:	617b      	str	r3, [r7, #20]
  return(result);
 8005936:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005938:	2b00      	cmp	r3, #0
 800593a:	d17e      	bne.n	8005a3a <osThreadNew+0x11a>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d07b      	beq.n	8005a3a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005942:	2380      	movs	r3, #128	@ 0x80
 8005944:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005946:	2318      	movs	r3, #24
 8005948:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800594a:	2300      	movs	r3, #0
 800594c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800594e:	f04f 33ff 	mov.w	r3, #4294967295
 8005952:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d045      	beq.n	80059e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <osThreadNew+0x48>
        name = attr->name;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d008      	beq.n	800598e <osThreadNew+0x6e>
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	2b38      	cmp	r3, #56	@ 0x38
 8005980:	d805      	bhi.n	800598e <osThreadNew+0x6e>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <osThreadNew+0x72>
        return (NULL);
 800598e:	2300      	movs	r3, #0
 8005990:	e054      	b.n	8005a3c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	089b      	lsrs	r3, r3, #2
 80059a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00e      	beq.n	80059c8 <osThreadNew+0xa8>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	2b5b      	cmp	r3, #91	@ 0x5b
 80059b0:	d90a      	bls.n	80059c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d006      	beq.n	80059c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <osThreadNew+0xa8>
        mem = 1;
 80059c2:	2301      	movs	r3, #1
 80059c4:	61bb      	str	r3, [r7, #24]
 80059c6:	e010      	b.n	80059ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10c      	bne.n	80059ea <osThreadNew+0xca>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d108      	bne.n	80059ea <osThreadNew+0xca>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d104      	bne.n	80059ea <osThreadNew+0xca>
          mem = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	61bb      	str	r3, [r7, #24]
 80059e4:	e001      	b.n	80059ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d110      	bne.n	8005a12 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059f8:	9202      	str	r2, [sp, #8]
 80059fa:	9301      	str	r3, [sp, #4]
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	6a3a      	ldr	r2, [r7, #32]
 8005a04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 fe1a 	bl	8006640 <xTaskCreateStatic>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	e013      	b.n	8005a3a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d110      	bne.n	8005a3a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	f107 0310 	add.w	r3, r7, #16
 8005a20:	9301      	str	r3, [sp, #4]
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 fe68 	bl	8006700 <xTaskCreate>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d001      	beq.n	8005a3a <osThreadNew+0x11a>
            hTask = NULL;
 8005a36:	2300      	movs	r3, #0
 8005a38:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a3a:	693b      	ldr	r3, [r7, #16]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3728      	adds	r7, #40	@ 0x28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a4c:	f3ef 8305 	mrs	r3, IPSR
 8005a50:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a52:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <osDelay+0x1c>
    stat = osErrorISR;
 8005a58:	f06f 0305 	mvn.w	r3, #5
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	e007      	b.n	8005a70 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 ff8e 	bl	800698c <vTaskDelay>
    }
  }

  return (stat);
 8005a70:	68fb      	ldr	r3, [r7, #12]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
	...

08005a7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4a07      	ldr	r2, [pc, #28]	@ (8005aa8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005a8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	4a06      	ldr	r2, [pc, #24]	@ (8005aac <vApplicationGetIdleTaskMemory+0x30>)
 8005a92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2280      	movs	r2, #128	@ 0x80
 8005a98:	601a      	str	r2, [r3, #0]
}
 8005a9a:	bf00      	nop
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	2000102c 	.word	0x2000102c
 8005aac:	20001088 	.word	0x20001088

08005ab0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4a07      	ldr	r2, [pc, #28]	@ (8005adc <vApplicationGetTimerTaskMemory+0x2c>)
 8005ac0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	4a06      	ldr	r2, [pc, #24]	@ (8005ae0 <vApplicationGetTimerTaskMemory+0x30>)
 8005ac6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ace:	601a      	str	r2, [r3, #0]
}
 8005ad0:	bf00      	nop
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	20001288 	.word	0x20001288
 8005ae0:	200012e4 	.word	0x200012e4

08005ae4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f103 0208 	add.w	r2, r3, #8
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f04f 32ff 	mov.w	r2, #4294967295
 8005afc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f103 0208 	add.w	r2, r3, #8
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f103 0208 	add.w	r2, r3, #8
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b085      	sub	sp, #20
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	601a      	str	r2, [r3, #0]
}
 8005b7a:	bf00      	nop
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b86:	b480      	push	{r7}
 8005b88:	b085      	sub	sp, #20
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9c:	d103      	bne.n	8005ba6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	e00c      	b.n	8005bc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3308      	adds	r3, #8
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	e002      	b.n	8005bb4 <vListInsert+0x2e>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d2f6      	bcs.n	8005bae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	601a      	str	r2, [r3, #0]
}
 8005bec:	bf00      	nop
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	6892      	ldr	r2, [r2, #8]
 8005c0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6852      	ldr	r2, [r2, #4]
 8005c18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d103      	bne.n	8005c2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	1e5a      	subs	r2, r3, #1
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10b      	bne.n	8005c78 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c72:	bf00      	nop
 8005c74:	bf00      	nop
 8005c76:	e7fd      	b.n	8005c74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c78:	f002 f876 	bl	8007d68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c84:	68f9      	ldr	r1, [r7, #12]
 8005c86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005c88:	fb01 f303 	mul.w	r3, r1, r3
 8005c8c:	441a      	add	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	68f9      	ldr	r1, [r7, #12]
 8005cac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005cae:	fb01 f303 	mul.w	r3, r1, r3
 8005cb2:	441a      	add	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	22ff      	movs	r2, #255	@ 0xff
 8005cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	22ff      	movs	r2, #255	@ 0xff
 8005cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d114      	bne.n	8005cf8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d01a      	beq.n	8005d0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	3310      	adds	r3, #16
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f001 f91a 	bl	8006f14 <xTaskRemoveFromEventList>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d012      	beq.n	8005d0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d1c <xQueueGenericReset+0xd0>)
 8005ce8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	e009      	b.n	8005d0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	3310      	adds	r3, #16
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff fef1 	bl	8005ae4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3324      	adds	r3, #36	@ 0x24
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7ff feec 	bl	8005ae4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d0c:	f002 f85e 	bl	8007dcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d10:	2301      	movs	r3, #1
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	e000ed04 	.word	0xe000ed04

08005d20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08e      	sub	sp, #56	@ 0x38
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10b      	bne.n	8005d4c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005d46:	bf00      	nop
 8005d48:	bf00      	nop
 8005d4a:	e7fd      	b.n	8005d48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10b      	bne.n	8005d6a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d64:	bf00      	nop
 8005d66:	bf00      	nop
 8005d68:	e7fd      	b.n	8005d66 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <xQueueGenericCreateStatic+0x56>
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <xQueueGenericCreateStatic+0x5a>
 8005d76:	2301      	movs	r3, #1
 8005d78:	e000      	b.n	8005d7c <xQueueGenericCreateStatic+0x5c>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10b      	bne.n	8005d98 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	623b      	str	r3, [r7, #32]
}
 8005d92:	bf00      	nop
 8005d94:	bf00      	nop
 8005d96:	e7fd      	b.n	8005d94 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d102      	bne.n	8005da4 <xQueueGenericCreateStatic+0x84>
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d101      	bne.n	8005da8 <xQueueGenericCreateStatic+0x88>
 8005da4:	2301      	movs	r3, #1
 8005da6:	e000      	b.n	8005daa <xQueueGenericCreateStatic+0x8a>
 8005da8:	2300      	movs	r3, #0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10b      	bne.n	8005dc6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	61fb      	str	r3, [r7, #28]
}
 8005dc0:	bf00      	nop
 8005dc2:	bf00      	nop
 8005dc4:	e7fd      	b.n	8005dc2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005dc6:	2350      	movs	r3, #80	@ 0x50
 8005dc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2b50      	cmp	r3, #80	@ 0x50
 8005dce:	d00b      	beq.n	8005de8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	61bb      	str	r3, [r7, #24]
}
 8005de2:	bf00      	nop
 8005de4:	bf00      	nop
 8005de6:	e7fd      	b.n	8005de4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005de8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00d      	beq.n	8005e10 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005dfc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	4613      	mov	r3, r2
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	68b9      	ldr	r1, [r7, #8]
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 f805 	bl	8005e1a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3730      	adds	r7, #48	@ 0x30
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b084      	sub	sp, #16
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	607a      	str	r2, [r7, #4]
 8005e26:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d103      	bne.n	8005e36 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	e002      	b.n	8005e3c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e48:	2101      	movs	r1, #1
 8005e4a:	69b8      	ldr	r0, [r7, #24]
 8005e4c:	f7ff fefe 	bl	8005c4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	78fa      	ldrb	r2, [r7, #3]
 8005e54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e58:	bf00      	nop
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08e      	sub	sp, #56	@ 0x38
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10b      	bne.n	8005e94 <xQueueGenericSend+0x34>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e8e:	bf00      	nop
 8005e90:	bf00      	nop
 8005e92:	e7fd      	b.n	8005e90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d103      	bne.n	8005ea2 <xQueueGenericSend+0x42>
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <xQueueGenericSend+0x46>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <xQueueGenericSend+0x48>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10b      	bne.n	8005ec4 <xQueueGenericSend+0x64>
	__asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ebe:	bf00      	nop
 8005ec0:	bf00      	nop
 8005ec2:	e7fd      	b.n	8005ec0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d103      	bne.n	8005ed2 <xQueueGenericSend+0x72>
 8005eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d101      	bne.n	8005ed6 <xQueueGenericSend+0x76>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <xQueueGenericSend+0x78>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10b      	bne.n	8005ef4 <xQueueGenericSend+0x94>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	623b      	str	r3, [r7, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	bf00      	nop
 8005ef2:	e7fd      	b.n	8005ef0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ef4:	f001 f9ce 	bl	8007294 <xTaskGetSchedulerState>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d102      	bne.n	8005f04 <xQueueGenericSend+0xa4>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <xQueueGenericSend+0xa8>
 8005f04:	2301      	movs	r3, #1
 8005f06:	e000      	b.n	8005f0a <xQueueGenericSend+0xaa>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10b      	bne.n	8005f26 <xQueueGenericSend+0xc6>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	61fb      	str	r3, [r7, #28]
}
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
 8005f24:	e7fd      	b.n	8005f22 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f26:	f001 ff1f 	bl	8007d68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d302      	bcc.n	8005f3c <xQueueGenericSend+0xdc>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d129      	bne.n	8005f90 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	68b9      	ldr	r1, [r7, #8]
 8005f40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f42:	f000 fa0f 	bl	8006364 <prvCopyDataToQueue>
 8005f46:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d010      	beq.n	8005f72 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f52:	3324      	adds	r3, #36	@ 0x24
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 ffdd 	bl	8006f14 <xTaskRemoveFromEventList>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d013      	beq.n	8005f88 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f60:	4b3f      	ldr	r3, [pc, #252]	@ (8006060 <xQueueGenericSend+0x200>)
 8005f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	e00a      	b.n	8005f88 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d007      	beq.n	8005f88 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f78:	4b39      	ldr	r3, [pc, #228]	@ (8006060 <xQueueGenericSend+0x200>)
 8005f7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f7e:	601a      	str	r2, [r3, #0]
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f88:	f001 ff20 	bl	8007dcc <vPortExitCritical>
				return pdPASS;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e063      	b.n	8006058 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d103      	bne.n	8005f9e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f96:	f001 ff19 	bl	8007dcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e05c      	b.n	8006058 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d106      	bne.n	8005fb2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fa4:	f107 0314 	add.w	r3, r7, #20
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f001 f817 	bl	8006fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fb2:	f001 ff0b 	bl	8007dcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fb6:	f000 fd87 	bl	8006ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fba:	f001 fed5 	bl	8007d68 <vPortEnterCritical>
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fc4:	b25b      	sxtb	r3, r3
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fca:	d103      	bne.n	8005fd4 <xQueueGenericSend+0x174>
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fda:	b25b      	sxtb	r3, r3
 8005fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe0:	d103      	bne.n	8005fea <xQueueGenericSend+0x18a>
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fea:	f001 feef 	bl	8007dcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fee:	1d3a      	adds	r2, r7, #4
 8005ff0:	f107 0314 	add.w	r3, r7, #20
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f001 f806 	bl	8007008 <xTaskCheckForTimeOut>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d124      	bne.n	800604c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006002:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006004:	f000 faa6 	bl	8006554 <prvIsQueueFull>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d018      	beq.n	8006040 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800600e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006010:	3310      	adds	r3, #16
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	4611      	mov	r1, r2
 8006016:	4618      	mov	r0, r3
 8006018:	f000 ff2a 	bl	8006e70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800601c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800601e:	f000 fa31 	bl	8006484 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006022:	f000 fd5f 	bl	8006ae4 <xTaskResumeAll>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	f47f af7c 	bne.w	8005f26 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800602e:	4b0c      	ldr	r3, [pc, #48]	@ (8006060 <xQueueGenericSend+0x200>)
 8006030:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	e772      	b.n	8005f26 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006040:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006042:	f000 fa1f 	bl	8006484 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006046:	f000 fd4d 	bl	8006ae4 <xTaskResumeAll>
 800604a:	e76c      	b.n	8005f26 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800604c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800604e:	f000 fa19 	bl	8006484 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006052:	f000 fd47 	bl	8006ae4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006056:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006058:	4618      	mov	r0, r3
 800605a:	3738      	adds	r7, #56	@ 0x38
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	e000ed04 	.word	0xe000ed04

08006064 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b090      	sub	sp, #64	@ 0x40
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
 8006070:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10b      	bne.n	8006094 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800608e:	bf00      	nop
 8006090:	bf00      	nop
 8006092:	e7fd      	b.n	8006090 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d103      	bne.n	80060a2 <xQueueGenericSendFromISR+0x3e>
 800609a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <xQueueGenericSendFromISR+0x42>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <xQueueGenericSendFromISR+0x44>
 80060a6:	2300      	movs	r3, #0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10b      	bne.n	80060c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80060be:	bf00      	nop
 80060c0:	bf00      	nop
 80060c2:	e7fd      	b.n	80060c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d103      	bne.n	80060d2 <xQueueGenericSendFromISR+0x6e>
 80060ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <xQueueGenericSendFromISR+0x72>
 80060d2:	2301      	movs	r3, #1
 80060d4:	e000      	b.n	80060d8 <xQueueGenericSendFromISR+0x74>
 80060d6:	2300      	movs	r3, #0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10b      	bne.n	80060f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80060dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	623b      	str	r3, [r7, #32]
}
 80060ee:	bf00      	nop
 80060f0:	bf00      	nop
 80060f2:	e7fd      	b.n	80060f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060f4:	f001 ff18 	bl	8007f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80060f8:	f3ef 8211 	mrs	r2, BASEPRI
 80060fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	61fa      	str	r2, [r7, #28]
 800610e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006110:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006112:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006116:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800611c:	429a      	cmp	r2, r3
 800611e:	d302      	bcc.n	8006126 <xQueueGenericSendFromISR+0xc2>
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b02      	cmp	r3, #2
 8006124:	d12f      	bne.n	8006186 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006128:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800612c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006134:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800613c:	f000 f912 	bl	8006364 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006140:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006148:	d112      	bne.n	8006170 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800614a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614e:	2b00      	cmp	r3, #0
 8006150:	d016      	beq.n	8006180 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006154:	3324      	adds	r3, #36	@ 0x24
 8006156:	4618      	mov	r0, r3
 8006158:	f000 fedc 	bl	8006f14 <xTaskRemoveFromEventList>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00e      	beq.n	8006180 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00b      	beq.n	8006180 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	e007      	b.n	8006180 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006170:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006174:	3301      	adds	r3, #1
 8006176:	b2db      	uxtb	r3, r3
 8006178:	b25a      	sxtb	r2, r3
 800617a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800617c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006180:	2301      	movs	r3, #1
 8006182:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006184:	e001      	b.n	800618a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006186:	2300      	movs	r3, #0
 8006188:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800618a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800618c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006194:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006198:	4618      	mov	r0, r3
 800619a:	3740      	adds	r7, #64	@ 0x40
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08c      	sub	sp, #48	@ 0x30
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061ac:	2300      	movs	r3, #0
 80061ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10b      	bne.n	80061d2 <xQueueReceive+0x32>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	623b      	str	r3, [r7, #32]
}
 80061cc:	bf00      	nop
 80061ce:	bf00      	nop
 80061d0:	e7fd      	b.n	80061ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d103      	bne.n	80061e0 <xQueueReceive+0x40>
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <xQueueReceive+0x44>
 80061e0:	2301      	movs	r3, #1
 80061e2:	e000      	b.n	80061e6 <xQueueReceive+0x46>
 80061e4:	2300      	movs	r3, #0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10b      	bne.n	8006202 <xQueueReceive+0x62>
	__asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	61fb      	str	r3, [r7, #28]
}
 80061fc:	bf00      	nop
 80061fe:	bf00      	nop
 8006200:	e7fd      	b.n	80061fe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006202:	f001 f847 	bl	8007294 <xTaskGetSchedulerState>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d102      	bne.n	8006212 <xQueueReceive+0x72>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <xQueueReceive+0x76>
 8006212:	2301      	movs	r3, #1
 8006214:	e000      	b.n	8006218 <xQueueReceive+0x78>
 8006216:	2300      	movs	r3, #0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10b      	bne.n	8006234 <xQueueReceive+0x94>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	61bb      	str	r3, [r7, #24]
}
 800622e:	bf00      	nop
 8006230:	bf00      	nop
 8006232:	e7fd      	b.n	8006230 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006234:	f001 fd98 	bl	8007d68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800623c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01f      	beq.n	8006284 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006248:	f000 f8f6 	bl	8006438 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800624c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624e:	1e5a      	subs	r2, r3, #1
 8006250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006252:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00f      	beq.n	800627c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800625c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625e:	3310      	adds	r3, #16
 8006260:	4618      	mov	r0, r3
 8006262:	f000 fe57 	bl	8006f14 <xTaskRemoveFromEventList>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d007      	beq.n	800627c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800626c:	4b3c      	ldr	r3, [pc, #240]	@ (8006360 <xQueueReceive+0x1c0>)
 800626e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800627c:	f001 fda6 	bl	8007dcc <vPortExitCritical>
				return pdPASS;
 8006280:	2301      	movs	r3, #1
 8006282:	e069      	b.n	8006358 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d103      	bne.n	8006292 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800628a:	f001 fd9f 	bl	8007dcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800628e:	2300      	movs	r3, #0
 8006290:	e062      	b.n	8006358 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006294:	2b00      	cmp	r3, #0
 8006296:	d106      	bne.n	80062a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006298:	f107 0310 	add.w	r3, r7, #16
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fe9d 	bl	8006fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062a2:	2301      	movs	r3, #1
 80062a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062a6:	f001 fd91 	bl	8007dcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062aa:	f000 fc0d 	bl	8006ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062ae:	f001 fd5b 	bl	8007d68 <vPortEnterCritical>
 80062b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062b8:	b25b      	sxtb	r3, r3
 80062ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062be:	d103      	bne.n	80062c8 <xQueueReceive+0x128>
 80062c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062ce:	b25b      	sxtb	r3, r3
 80062d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d4:	d103      	bne.n	80062de <xQueueReceive+0x13e>
 80062d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062de:	f001 fd75 	bl	8007dcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062e2:	1d3a      	adds	r2, r7, #4
 80062e4:	f107 0310 	add.w	r3, r7, #16
 80062e8:	4611      	mov	r1, r2
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fe8c 	bl	8007008 <xTaskCheckForTimeOut>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d123      	bne.n	800633e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062f8:	f000 f916 	bl	8006528 <prvIsQueueEmpty>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d017      	beq.n	8006332 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006304:	3324      	adds	r3, #36	@ 0x24
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	4611      	mov	r1, r2
 800630a:	4618      	mov	r0, r3
 800630c:	f000 fdb0 	bl	8006e70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006310:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006312:	f000 f8b7 	bl	8006484 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006316:	f000 fbe5 	bl	8006ae4 <xTaskResumeAll>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d189      	bne.n	8006234 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006320:	4b0f      	ldr	r3, [pc, #60]	@ (8006360 <xQueueReceive+0x1c0>)
 8006322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	e780      	b.n	8006234 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006332:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006334:	f000 f8a6 	bl	8006484 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006338:	f000 fbd4 	bl	8006ae4 <xTaskResumeAll>
 800633c:	e77a      	b.n	8006234 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800633e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006340:	f000 f8a0 	bl	8006484 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006344:	f000 fbce 	bl	8006ae4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006348:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800634a:	f000 f8ed 	bl	8006528 <prvIsQueueEmpty>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	f43f af6f 	beq.w	8006234 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006356:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006358:	4618      	mov	r0, r3
 800635a:	3730      	adds	r7, #48	@ 0x30
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	e000ed04 	.word	0xe000ed04

08006364 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006370:	2300      	movs	r3, #0
 8006372:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006378:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10d      	bne.n	800639e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d14d      	bne.n	8006426 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	4618      	mov	r0, r3
 8006390:	f000 ff9e 	bl	80072d0 <xTaskPriorityDisinherit>
 8006394:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	609a      	str	r2, [r3, #8]
 800639c:	e043      	b.n	8006426 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d119      	bne.n	80063d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6858      	ldr	r0, [r3, #4]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ac:	461a      	mov	r2, r3
 80063ae:	68b9      	ldr	r1, [r7, #8]
 80063b0:	f002 f816 	bl	80083e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063bc:	441a      	add	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d32b      	bcc.n	8006426 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	605a      	str	r2, [r3, #4]
 80063d6:	e026      	b.n	8006426 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	68d8      	ldr	r0, [r3, #12]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e0:	461a      	mov	r2, r3
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	f001 fffc 	bl	80083e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	68da      	ldr	r2, [r3, #12]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f0:	425b      	negs	r3, r3
 80063f2:	441a      	add	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	68da      	ldr	r2, [r3, #12]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d207      	bcs.n	8006414 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640c:	425b      	negs	r3, r3
 800640e:	441a      	add	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b02      	cmp	r3, #2
 8006418:	d105      	bne.n	8006426 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	3b01      	subs	r3, #1
 8006424:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800642e:	697b      	ldr	r3, [r7, #20]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	2b00      	cmp	r3, #0
 8006448:	d018      	beq.n	800647c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006452:	441a      	add	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	429a      	cmp	r2, r3
 8006462:	d303      	bcc.n	800646c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68d9      	ldr	r1, [r3, #12]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006474:	461a      	mov	r2, r3
 8006476:	6838      	ldr	r0, [r7, #0]
 8006478:	f001 ffb2 	bl	80083e0 <memcpy>
	}
}
 800647c:	bf00      	nop
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800648c:	f001 fc6c 	bl	8007d68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006496:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006498:	e011      	b.n	80064be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d012      	beq.n	80064c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	3324      	adds	r3, #36	@ 0x24
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 fd34 	bl	8006f14 <xTaskRemoveFromEventList>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064b2:	f000 fe0d 	bl	80070d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	dce9      	bgt.n	800649a <prvUnlockQueue+0x16>
 80064c6:	e000      	b.n	80064ca <prvUnlockQueue+0x46>
					break;
 80064c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	22ff      	movs	r2, #255	@ 0xff
 80064ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80064d2:	f001 fc7b 	bl	8007dcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064d6:	f001 fc47 	bl	8007d68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064e2:	e011      	b.n	8006508 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d012      	beq.n	8006512 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3310      	adds	r3, #16
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 fd0f 	bl	8006f14 <xTaskRemoveFromEventList>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80064fc:	f000 fde8 	bl	80070d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	3b01      	subs	r3, #1
 8006504:	b2db      	uxtb	r3, r3
 8006506:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800650c:	2b00      	cmp	r3, #0
 800650e:	dce9      	bgt.n	80064e4 <prvUnlockQueue+0x60>
 8006510:	e000      	b.n	8006514 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006512:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	22ff      	movs	r2, #255	@ 0xff
 8006518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800651c:	f001 fc56 	bl	8007dcc <vPortExitCritical>
}
 8006520:	bf00      	nop
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006530:	f001 fc1a 	bl	8007d68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006538:	2b00      	cmp	r3, #0
 800653a:	d102      	bne.n	8006542 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800653c:	2301      	movs	r3, #1
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	e001      	b.n	8006546 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006542:	2300      	movs	r3, #0
 8006544:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006546:	f001 fc41 	bl	8007dcc <vPortExitCritical>

	return xReturn;
 800654a:	68fb      	ldr	r3, [r7, #12]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800655c:	f001 fc04 	bl	8007d68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006568:	429a      	cmp	r2, r3
 800656a:	d102      	bne.n	8006572 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800656c:	2301      	movs	r3, #1
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	e001      	b.n	8006576 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006576:	f001 fc29 	bl	8007dcc <vPortExitCritical>

	return xReturn;
 800657a:	68fb      	ldr	r3, [r7, #12]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
 8006592:	e014      	b.n	80065be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006594:	4a0f      	ldr	r2, [pc, #60]	@ (80065d4 <vQueueAddToRegistry+0x50>)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10b      	bne.n	80065b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80065a0:	490c      	ldr	r1, [pc, #48]	@ (80065d4 <vQueueAddToRegistry+0x50>)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80065aa:	4a0a      	ldr	r2, [pc, #40]	@ (80065d4 <vQueueAddToRegistry+0x50>)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	4413      	add	r3, r2
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80065b6:	e006      	b.n	80065c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	3301      	adds	r3, #1
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b07      	cmp	r3, #7
 80065c2:	d9e7      	bls.n	8006594 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	200016e4 	.word	0x200016e4

080065d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065e8:	f001 fbbe 	bl	8007d68 <vPortEnterCritical>
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065f2:	b25b      	sxtb	r3, r3
 80065f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f8:	d103      	bne.n	8006602 <vQueueWaitForMessageRestricted+0x2a>
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006608:	b25b      	sxtb	r3, r3
 800660a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660e:	d103      	bne.n	8006618 <vQueueWaitForMessageRestricted+0x40>
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006618:	f001 fbd8 	bl	8007dcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006620:	2b00      	cmp	r3, #0
 8006622:	d106      	bne.n	8006632 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	3324      	adds	r3, #36	@ 0x24
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	68b9      	ldr	r1, [r7, #8]
 800662c:	4618      	mov	r0, r3
 800662e:	f000 fc45 	bl	8006ebc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006632:	6978      	ldr	r0, [r7, #20]
 8006634:	f7ff ff26 	bl	8006484 <prvUnlockQueue>
	}
 8006638:	bf00      	nop
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <xTaskCreateStatic>:

TaskHandle_t xTaskCreateStatic(TaskFunction_t pxTaskCode,
		const char *const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
		const uint32_t ulStackDepth, void *const pvParameters,
		UBaseType_t uxPriority, StackType_t *const puxStackBuffer,
		StaticTask_t *const pxTaskBuffer) {
 8006640:	b580      	push	{r7, lr}
 8006642:	b08e      	sub	sp, #56	@ 0x38
 8006644:	af04      	add	r7, sp, #16
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
 800664c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

	configASSERT(puxStackBuffer != NULL);
 800664e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10b      	bne.n	800666c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	623b      	str	r3, [r7, #32]
}
 8006666:	bf00      	nop
 8006668:	bf00      	nop
 800666a:	e7fd      	b.n	8006668 <xTaskCreateStatic+0x28>
	configASSERT(pxTaskBuffer != NULL);
 800666c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10b      	bne.n	800668a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	61fb      	str	r3, [r7, #28]
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop
 8006688:	e7fd      	b.n	8006686 <xTaskCreateStatic+0x46>
#if( configASSERT_DEFINED == 1 )
	{
		/* Sanity check that the size of the structure used to declare a
		 variable of type StaticTask_t equals the size of the real task
		 structure. */
		volatile size_t xSize = sizeof(StaticTask_t);
 800668a:	235c      	movs	r3, #92	@ 0x5c
 800668c:	613b      	str	r3, [r7, #16]
		configASSERT(xSize == sizeof(TCB_t));
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	2b5c      	cmp	r3, #92	@ 0x5c
 8006692:	d00b      	beq.n	80066ac <xTaskCreateStatic+0x6c>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	61bb      	str	r3, [r7, #24]
}
 80066a6:	bf00      	nop
 80066a8:	bf00      	nop
 80066aa:	e7fd      	b.n	80066a8 <xTaskCreateStatic+0x68>
		(void) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066ac:	693b      	ldr	r3, [r7, #16]
	}
#endif /* configASSERT_DEFINED */

	if ((pxTaskBuffer != NULL) && (puxStackBuffer != NULL)) {
 80066ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d01e      	beq.n	80066f2 <xTaskCreateStatic+0xb2>
 80066b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d01b      	beq.n	80066f2 <xTaskCreateStatic+0xb2>
		/* The memory used for the task's TCB and stack are passed into this
		 function - use them. */
		pxNewTCB = (TCB_t*) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066bc:	627b      	str	r3, [r7, #36]	@ 0x24
		pxNewTCB->pxStack = (StackType_t*) puxStackBuffer;
 80066be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066c2:	631a      	str	r2, [r3, #48]	@ 0x30

#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* Tasks can be created statically or dynamically, so note this
			 task was created statically in case the task is later deleted. */
			pxNewTCB->ucStaticallyAllocated =
 80066c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c6:	2202      	movs	r2, #2
 80066c8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
					tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
		}
#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

		prvInitialiseNewTask(pxTaskCode, pcName, ulStackDepth, pvParameters,
 80066cc:	2300      	movs	r3, #0
 80066ce:	9303      	str	r3, [sp, #12]
 80066d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d2:	9302      	str	r3, [sp, #8]
 80066d4:	f107 0314 	add.w	r3, r7, #20
 80066d8:	9301      	str	r3, [sp, #4]
 80066da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	68b9      	ldr	r1, [r7, #8]
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 f850 	bl	800678a <prvInitialiseNewTask>
				uxPriority, &xReturn, pxNewTCB, NULL);
		prvAddNewTaskToReadyList(pxNewTCB);
 80066ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80066ec:	f000 f8de 	bl	80068ac <prvAddNewTaskToReadyList>
 80066f0:	e001      	b.n	80066f6 <xTaskCreateStatic+0xb6>
	} else {
		xReturn = NULL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80066f6:	697b      	ldr	r3, [r7, #20]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3728      	adds	r7, #40	@ 0x28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <xTaskCreate>:

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

BaseType_t xTaskCreate(TaskFunction_t pxTaskCode, const char *const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
const configSTACK_DEPTH_TYPE usStackDepth, void *const pvParameters,
		UBaseType_t uxPriority, TaskHandle_t *const pxCreatedTask) {
 8006700:	b580      	push	{r7, lr}
 8006702:	b08c      	sub	sp, #48	@ 0x30
 8006704:	af04      	add	r7, sp, #16
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	603b      	str	r3, [r7, #0]
 800670c:	4613      	mov	r3, r2
 800670e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
	{
		StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = pvPortMalloc((((size_t) usStackDepth) * sizeof(StackType_t))); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006710:	88fb      	ldrh	r3, [r7, #6]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4618      	mov	r0, r3
 8006716:	f001 fc49 	bl	8007fac <pvPortMalloc>
 800671a:	6178      	str	r0, [r7, #20]

		if (pxStack != NULL) {
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00e      	beq.n	8006740 <xTaskCreate+0x40>
			/* Allocate space for the TCB. */
			pxNewTCB = (TCB_t*) pvPortMalloc(sizeof(TCB_t)); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006722:	205c      	movs	r0, #92	@ 0x5c
 8006724:	f001 fc42 	bl	8007fac <pvPortMalloc>
 8006728:	61f8      	str	r0, [r7, #28]

			if (pxNewTCB != NULL) {
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <xTaskCreate+0x38>
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	631a      	str	r2, [r3, #48]	@ 0x30
 8006736:	e005      	b.n	8006744 <xTaskCreate+0x44>
			} else {
				/* The stack cannot be used as the TCB was not created.  Free
				 it again. */
				vPortFree(pxStack);
 8006738:	6978      	ldr	r0, [r7, #20]
 800673a:	f001 fd05 	bl	8008148 <vPortFree>
 800673e:	e001      	b.n	8006744 <xTaskCreate+0x44>
			}
		} else {
			pxNewTCB = NULL;
 8006740:	2300      	movs	r3, #0
 8006742:	61fb      	str	r3, [r7, #28]
		}
	}
#endif /* portSTACK_GROWTH */

	if (pxNewTCB != NULL) {
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d017      	beq.n	800677a <xTaskCreate+0x7a>
#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
		{
			/* Tasks can be created statically or dynamically, so note this
			 task was created dynamically in case it is later deleted. */
			pxNewTCB->ucStaticallyAllocated =
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
					tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
		}
#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

		prvInitialiseNewTask(pxTaskCode, pcName, (uint32_t) usStackDepth,
 8006752:	88fa      	ldrh	r2, [r7, #6]
 8006754:	2300      	movs	r3, #0
 8006756:	9303      	str	r3, [sp, #12]
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	9302      	str	r3, [sp, #8]
 800675c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675e:	9301      	str	r3, [sp, #4]
 8006760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	68b9      	ldr	r1, [r7, #8]
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 f80e 	bl	800678a <prvInitialiseNewTask>
				pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL);
		prvAddNewTaskToReadyList(pxNewTCB);
 800676e:	69f8      	ldr	r0, [r7, #28]
 8006770:	f000 f89c 	bl	80068ac <prvAddNewTaskToReadyList>
		xReturn = pdPASS;
 8006774:	2301      	movs	r3, #1
 8006776:	61bb      	str	r3, [r7, #24]
 8006778:	e002      	b.n	8006780 <xTaskCreate+0x80>
	} else {
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800677a:	f04f 33ff 	mov.w	r3, #4294967295
 800677e:	61bb      	str	r3, [r7, #24]
	}

	return xReturn;
 8006780:	69bb      	ldr	r3, [r7, #24]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3720      	adds	r7, #32
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <prvInitialiseNewTask>:

static void prvInitialiseNewTask(TaskFunction_t pxTaskCode,
		const char *const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
		const uint32_t ulStackDepth, void *const pvParameters,
		UBaseType_t uxPriority, TaskHandle_t *const pxCreatedTask,
		TCB_t *pxNewTCB, const MemoryRegion_t *const xRegions) {
 800678a:	b580      	push	{r7, lr}
 800678c:	b088      	sub	sp, #32
 800678e:	af00      	add	r7, sp, #0
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	60b9      	str	r1, [r7, #8]
 8006794:	607a      	str	r2, [r7, #4]
 8006796:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		(void) memset(pxNewTCB->pxStack, (int) tskSTACK_FILL_BYTE,
 8006798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	461a      	mov	r2, r3
 80067a2:	21a5      	movs	r1, #165	@ 0xa5
 80067a4:	f001 fdf0 	bl	8008388 <memset>
	 grows from high memory to low (as per the 80x86) or vice versa.
	 portSTACK_GROWTH is used to make the result positive or negative as required
	 by the port. */
#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &(pxNewTCB->pxStack[ulStackDepth - (uint32_t) 1]);
 80067a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067b2:	3b01      	subs	r3, #1
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = (StackType_t*) ((( portPOINTER_SIZE_TYPE ) pxTopOfStack)
 80067ba:	69bb      	ldr	r3, [r7, #24]
				& (~(( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK))); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067bc:	f023 0307 	bic.w	r3, r3, #7
		pxTopOfStack = (StackType_t*) ((( portPOINTER_SIZE_TYPE ) pxTopOfStack)
 80067c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT(
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00b      	beq.n	80067e4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	617b      	str	r3, [r7, #20]
}
 80067de:	bf00      	nop
 80067e0:	bf00      	nop
 80067e2:	e7fd      	b.n	80067e0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if (pcName != NULL) {
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d01f      	beq.n	800682a <prvInitialiseNewTask+0xa0>
		for (x = (UBaseType_t) 0; x < (UBaseType_t) configMAX_TASK_NAME_LEN;
 80067ea:	2300      	movs	r3, #0
 80067ec:	61fb      	str	r3, [r7, #28]
 80067ee:	e012      	b.n	8006816 <prvInitialiseNewTask+0x8c>
				x++) {
			pxNewTCB->pcTaskName[x] = pcName[x];
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	4413      	add	r3, r2
 80067f6:	7819      	ldrb	r1, [r3, #0]
 80067f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	4413      	add	r3, r2
 80067fe:	3334      	adds	r3, #52	@ 0x34
 8006800:	460a      	mov	r2, r1
 8006802:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			 configMAX_TASK_NAME_LEN characters just in case the memory after the
			 string is not accessible (extremely unlikely). */
			if (pcName[x] == (char) 0x00) {
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	4413      	add	r3, r2
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d006      	beq.n	800681e <prvInitialiseNewTask+0x94>
				x++) {
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	3301      	adds	r3, #1
 8006814:	61fb      	str	r3, [r7, #28]
		for (x = (UBaseType_t) 0; x < (UBaseType_t) configMAX_TASK_NAME_LEN;
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	2b0f      	cmp	r3, #15
 800681a:	d9e9      	bls.n	80067f0 <prvInitialiseNewTask+0x66>
 800681c:	e000      	b.n	8006820 <prvInitialiseNewTask+0x96>
				break;
 800681e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		 was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1] = '\0';
 8006820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006828:	e003      	b.n	8006832 <prvInitialiseNewTask+0xa8>
	} else {
		/* The task has not been given a name, so just ensure there is a NULL
		 terminator when it is read out. */
		pxNewTCB->pcTaskName[0] = 0x00;
 800682a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	 remove the privilege bit if one is present. */
	if (uxPriority >= (UBaseType_t) configMAX_PRIORITIES) {
 8006832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006834:	2b37      	cmp	r3, #55	@ 0x37
 8006836:	d901      	bls.n	800683c <prvInitialiseNewTask+0xb2>
		uxPriority = (UBaseType_t) configMAX_PRIORITIES - (UBaseType_t) 1U;
 8006838:	2337      	movs	r3, #55	@ 0x37
 800683a:	62bb      	str	r3, [r7, #40]	@ 0x28
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800683c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006840:	62da      	str	r2, [r3, #44]	@ 0x2c
#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006844:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006846:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684a:	2200      	movs	r2, #0
 800684c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
#endif /* configUSE_MUTEXES */

	vListInitialiseItem(&(pxNewTCB->xStateListItem));
 800684e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006850:	3304      	adds	r3, #4
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff f966 	bl	8005b24 <vListInitialiseItem>
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
 8006858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685a:	3318      	adds	r3, #24
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff f961 	bl	8005b24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	 back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
 8006862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006866:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE(&(pxNewTCB->xEventListItem),
 8006868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800686e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006870:	619a      	str	r2, [r3, #24]
			( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
 8006872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006876:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687a:	2200      	movs	r2, #0
 800687c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800687e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack,
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	68f9      	ldr	r1, [r7, #12]
 800688a:	69b8      	ldr	r0, [r7, #24]
 800688c:	f001 f93e 	bl	8007b0c <pxPortInitialiseStack>
 8006890:	4602      	mov	r2, r0
 8006892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006894:	601a      	str	r2, [r3, #0]
		}
#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
#endif /* portUSING_MPU_WRAPPERS */

	if (pxCreatedTask != NULL) {
 8006896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <prvInitialiseNewTask+0x118>
		/* Pass the handle out in an anonymous way.  The handle can be used to
		 change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = (TaskHandle_t) pxNewTCB;
 800689c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800689e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068a0:	601a      	str	r2, [r3, #0]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068a2:	bf00      	nop
 80068a4:	3720      	adds	r7, #32
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
	...

080068ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList(TCB_t *pxNewTCB) {
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	 updated. */
	taskENTER_CRITICAL();
 80068b4:	f001 fa58 	bl	8007d68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006970 <prvAddNewTaskToReadyList+0xc4>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3301      	adds	r3, #1
 80068be:	4a2c      	ldr	r2, [pc, #176]	@ (8006970 <prvAddNewTaskToReadyList+0xc4>)
 80068c0:	6013      	str	r3, [r2, #0]
		if (pxCurrentTCB == NULL) {
 80068c2:	4b2c      	ldr	r3, [pc, #176]	@ (8006974 <prvAddNewTaskToReadyList+0xc8>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d109      	bne.n	80068de <prvAddNewTaskToReadyList+0x32>
			/* There are no other tasks, or all the other tasks are in
			 the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068ca:	4a2a      	ldr	r2, [pc, #168]	@ (8006974 <prvAddNewTaskToReadyList+0xc8>)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6013      	str	r3, [r2, #0]

			if (uxCurrentNumberOfTasks == (UBaseType_t) 1) {
 80068d0:	4b27      	ldr	r3, [pc, #156]	@ (8006970 <prvAddNewTaskToReadyList+0xc4>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d110      	bne.n	80068fa <prvAddNewTaskToReadyList+0x4e>
				/* This is the first task to be created so do the preliminary
				 initialisation required.  We will not recover if this call
				 fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068d8:	f000 fc1e 	bl	8007118 <prvInitialiseTaskLists>
 80068dc:	e00d      	b.n	80068fa <prvAddNewTaskToReadyList+0x4e>
			}
		} else {
			/* If the scheduler is not already running, make this task the
			 current task if it is the highest priority task to be created
			 so far. */
			if (xSchedulerRunning == pdFALSE) {
 80068de:	4b26      	ldr	r3, [pc, #152]	@ (8006978 <prvAddNewTaskToReadyList+0xcc>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d109      	bne.n	80068fa <prvAddNewTaskToReadyList+0x4e>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
 80068e6:	4b23      	ldr	r3, [pc, #140]	@ (8006974 <prvAddNewTaskToReadyList+0xc8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d802      	bhi.n	80068fa <prvAddNewTaskToReadyList+0x4e>
					pxCurrentTCB = pxNewTCB;
 80068f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006974 <prvAddNewTaskToReadyList+0xc8>)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6013      	str	r3, [r2, #0]
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068fa:	4b20      	ldr	r3, [pc, #128]	@ (800697c <prvAddNewTaskToReadyList+0xd0>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3301      	adds	r3, #1
 8006900:	4a1e      	ldr	r2, [pc, #120]	@ (800697c <prvAddNewTaskToReadyList+0xd0>)
 8006902:	6013      	str	r3, [r2, #0]

#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006904:	4b1d      	ldr	r3, [pc, #116]	@ (800697c <prvAddNewTaskToReadyList+0xd0>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList(pxNewTCB);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006910:	4b1b      	ldr	r3, [pc, #108]	@ (8006980 <prvAddNewTaskToReadyList+0xd4>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	429a      	cmp	r2, r3
 8006916:	d903      	bls.n	8006920 <prvAddNewTaskToReadyList+0x74>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691c:	4a18      	ldr	r2, [pc, #96]	@ (8006980 <prvAddNewTaskToReadyList+0xd4>)
 800691e:	6013      	str	r3, [r2, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4a15      	ldr	r2, [pc, #84]	@ (8006984 <prvAddNewTaskToReadyList+0xd8>)
 800692e:	441a      	add	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3304      	adds	r3, #4
 8006934:	4619      	mov	r1, r3
 8006936:	4610      	mov	r0, r2
 8006938:	f7ff f901 	bl	8005b3e <vListInsertEnd>

		portSETUP_TCB(pxNewTCB);
	}
	taskEXIT_CRITICAL();
 800693c:	f001 fa46 	bl	8007dcc <vPortExitCritical>

	if (xSchedulerRunning != pdFALSE) {
 8006940:	4b0d      	ldr	r3, [pc, #52]	@ (8006978 <prvAddNewTaskToReadyList+0xcc>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00e      	beq.n	8006966 <prvAddNewTaskToReadyList+0xba>
		/* If the created task is of a higher priority than the current task
		 then it should run now. */
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
 8006948:	4b0a      	ldr	r3, [pc, #40]	@ (8006974 <prvAddNewTaskToReadyList+0xc8>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006952:	429a      	cmp	r2, r3
 8006954:	d207      	bcs.n	8006966 <prvAddNewTaskToReadyList+0xba>
			taskYIELD_IF_USING_PREEMPTION();
 8006956:	4b0c      	ldr	r3, [pc, #48]	@ (8006988 <prvAddNewTaskToReadyList+0xdc>)
 8006958:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	f3bf 8f6f 	isb	sy
			mtCOVERAGE_TEST_MARKER();
		}
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006966:	bf00      	nop
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20001bf8 	.word	0x20001bf8
 8006974:	20001724 	.word	0x20001724
 8006978:	20001c04 	.word	0x20001c04
 800697c:	20001c14 	.word	0x20001c14
 8006980:	20001c00 	.word	0x20001c00
 8006984:	20001728 	.word	0x20001728
 8006988:	e000ed04 	.word	0xe000ed04

0800698c <vTaskDelay>:
#endif /* INCLUDE_vTaskDelayUntil */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

void vTaskDelay(const TickType_t xTicksToDelay) {
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006994:	2300      	movs	r3, #0
 8006996:	60fb      	str	r3, [r7, #12]

	/* A delay time of zero just forces a reschedule. */
	if (xTicksToDelay > (TickType_t) 0U) {
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d018      	beq.n	80069d0 <vTaskDelay+0x44>
		configASSERT(uxSchedulerSuspended == 0);
 800699e:	4b14      	ldr	r3, [pc, #80]	@ (80069f0 <vTaskDelay+0x64>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00b      	beq.n	80069be <vTaskDelay+0x32>
	__asm volatile
 80069a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	60bb      	str	r3, [r7, #8]
}
 80069b8:	bf00      	nop
 80069ba:	bf00      	nop
 80069bc:	e7fd      	b.n	80069ba <vTaskDelay+0x2e>
		vTaskSuspendAll();
 80069be:	f000 f883 	bl	8006ac8 <vTaskSuspendAll>
			 list or removed from the blocked list until the scheduler
			 is resumed.

			 This task cannot be in an event list as it is the currently
			 executing task. */
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
 80069c2:	2100      	movs	r1, #0
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fcf3 	bl	80073b0 <prvAddCurrentTaskToDelayedList>
		}
		xAlreadyYielded = xTaskResumeAll();
 80069ca:	f000 f88b 	bl	8006ae4 <xTaskResumeAll>
 80069ce:	60f8      	str	r0, [r7, #12]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Force a reschedule if xTaskResumeAll has not already done so, we may
	 have put ourselves to sleep. */
	if (xAlreadyYielded == pdFALSE) {
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d107      	bne.n	80069e6 <vTaskDelay+0x5a>
		portYIELD_WITHIN_API()
 80069d6:	4b07      	ldr	r3, [pc, #28]	@ (80069f4 <vTaskDelay+0x68>)
 80069d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	f3bf 8f6f 	isb	sy
		;
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069e6:	bf00      	nop
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	20001c20 	.word	0x20001c20
 80069f4:	e000ed04 	.word	0xe000ed04

080069f8 <vTaskStartScheduler>:
}

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler(void) {
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08a      	sub	sp, #40	@ 0x28
 80069fc:	af04      	add	r7, sp, #16
	BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		 address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory(&pxIdleTaskTCBBuffer,
 8006a06:	463a      	mov	r2, r7
 8006a08:	1d39      	adds	r1, r7, #4
 8006a0a:	f107 0308 	add.w	r3, r7, #8
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff f834 	bl	8005a7c <vApplicationGetIdleTaskMemory>
				&pxIdleTaskStackBuffer, &ulIdleTaskStackSize);
		xIdleTaskHandle = xTaskCreateStatic(prvIdleTask,
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	9202      	str	r2, [sp, #8]
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	2300      	movs	r3, #0
 8006a24:	460a      	mov	r2, r1
 8006a26:	4922      	ldr	r1, [pc, #136]	@ (8006ab0 <vTaskStartScheduler+0xb8>)
 8006a28:	4822      	ldr	r0, [pc, #136]	@ (8006ab4 <vTaskStartScheduler+0xbc>)
 8006a2a:	f7ff fe09 	bl	8006640 <xTaskCreateStatic>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	4a21      	ldr	r2, [pc, #132]	@ (8006ab8 <vTaskStartScheduler+0xc0>)
 8006a32:	6013      	str	r3, [r2, #0]
		configIDLE_TASK_NAME, ulIdleTaskStackSize, (void*) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
		portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
		pxIdleTaskStackBuffer, pxIdleTaskTCBBuffer); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if (xIdleTaskHandle != NULL) {
 8006a34:	4b20      	ldr	r3, [pc, #128]	@ (8006ab8 <vTaskStartScheduler+0xc0>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d002      	beq.n	8006a42 <vTaskStartScheduler+0x4a>
			xReturn = pdPASS;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	617b      	str	r3, [r7, #20]
 8006a40:	e001      	b.n	8006a46 <vTaskStartScheduler+0x4e>
		} else {
			xReturn = pdFAIL;
 8006a42:	2300      	movs	r3, #0
 8006a44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

#if ( configUSE_TIMERS == 1 )
	{
		if (xReturn == pdPASS) {
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d102      	bne.n	8006a52 <vTaskStartScheduler+0x5a>
			xReturn = xTimerCreateTimerTask();
 8006a4c:	f000 fd04 	bl	8007458 <xTimerCreateTimerTask>
 8006a50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
#endif /* configUSE_TIMERS */

	if (xReturn == pdPASS) {
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d116      	bne.n	8006a86 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	613b      	str	r3, [r7, #16]
}
 8006a6a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a6c:	4b13      	ldr	r3, [pc, #76]	@ (8006abc <vTaskStartScheduler+0xc4>)
 8006a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a74:	4b12      	ldr	r3, [pc, #72]	@ (8006ac0 <vTaskStartScheduler+0xc8>)
 8006a76:	2201      	movs	r2, #1
 8006a78:	601a      	str	r2, [r3, #0]
		xTickCount = (TickType_t) configINITIAL_TICK_COUNT;
 8006a7a:	4b12      	ldr	r3, [pc, #72]	@ (8006ac4 <vTaskStartScheduler+0xcc>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		 portable interface. */
		if (xPortStartScheduler() != pdFALSE) {
 8006a80:	f001 f8ce 	bl	8007c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	 meaning xIdleTaskHandle is not used anywhere else. */
	(void) xIdleTaskHandle;
}
 8006a84:	e00f      	b.n	8006aa6 <vTaskStartScheduler+0xae>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8c:	d10b      	bne.n	8006aa6 <vTaskStartScheduler+0xae>
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	60fb      	str	r3, [r7, #12]
}
 8006aa0:	bf00      	nop
 8006aa2:	bf00      	nop
 8006aa4:	e7fd      	b.n	8006aa2 <vTaskStartScheduler+0xaa>
}
 8006aa6:	bf00      	nop
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	0800849c 	.word	0x0800849c
 8006ab4:	080070e9 	.word	0x080070e9
 8006ab8:	20001c1c 	.word	0x20001c1c
 8006abc:	20001c18 	.word	0x20001c18
 8006ac0:	20001c04 	.word	0x20001c04
 8006ac4:	20001bfc 	.word	0x20001bfc

08006ac8 <vTaskSuspendAll>:
	xSchedulerRunning = pdFALSE;
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll(void) {
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
	 do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	 is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006acc:	4b04      	ldr	r3, [pc, #16]	@ (8006ae0 <vTaskSuspendAll+0x18>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	4a03      	ldr	r2, [pc, #12]	@ (8006ae0 <vTaskSuspendAll+0x18>)
 8006ad4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	 the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006ad6:	bf00      	nop
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	20001c20 	.word	0x20001c20

08006ae4 <xTaskResumeAll>:
	}

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll(void) {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
	TCB_t *pxTCB = NULL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	 previous call to vTaskSuspendAll(). */
	configASSERT(uxSchedulerSuspended);
 8006af2:	4b42      	ldr	r3, [pc, #264]	@ (8006bfc <xTaskResumeAll+0x118>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10b      	bne.n	8006b12 <xTaskResumeAll+0x2e>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	603b      	str	r3, [r7, #0]
}
 8006b0c:	bf00      	nop
 8006b0e:	bf00      	nop
 8006b10:	e7fd      	b.n	8006b0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	 list while the scheduler was suspended.  If this was the case then the
	 removed task will have been added to the xPendingReadyList.  Once the
	 scheduler has been resumed it is safe to move all the pending ready
	 tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b12:	f001 f929 	bl	8007d68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b16:	4b39      	ldr	r3, [pc, #228]	@ (8006bfc <xTaskResumeAll+0x118>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	4a37      	ldr	r2, [pc, #220]	@ (8006bfc <xTaskResumeAll+0x118>)
 8006b1e:	6013      	str	r3, [r2, #0]

		if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 8006b20:	4b36      	ldr	r3, [pc, #216]	@ (8006bfc <xTaskResumeAll+0x118>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d162      	bne.n	8006bee <xTaskResumeAll+0x10a>
			if (uxCurrentNumberOfTasks > (UBaseType_t) 0U) {
 8006b28:	4b35      	ldr	r3, [pc, #212]	@ (8006c00 <xTaskResumeAll+0x11c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d05e      	beq.n	8006bee <xTaskResumeAll+0x10a>
				/* Move any readied tasks from the pending list into the
				 appropriate ready list. */
				while ( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE) {
 8006b30:	e02f      	b.n	8006b92 <xTaskResumeAll+0xae>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList)); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b32:	4b34      	ldr	r3, [pc, #208]	@ (8006c04 <xTaskResumeAll+0x120>)
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	60fb      	str	r3, [r7, #12]
					(void) uxListRemove(&(pxTCB->xEventListItem));
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3318      	adds	r3, #24
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7ff f85a 	bl	8005bf8 <uxListRemove>
					(void) uxListRemove(&(pxTCB->xStateListItem));
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	3304      	adds	r3, #4
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7ff f855 	bl	8005bf8 <uxListRemove>
					prvAddTaskToReadyList(pxTCB);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b52:	4b2d      	ldr	r3, [pc, #180]	@ (8006c08 <xTaskResumeAll+0x124>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d903      	bls.n	8006b62 <xTaskResumeAll+0x7e>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8006c08 <xTaskResumeAll+0x124>)
 8006b60:	6013      	str	r3, [r2, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b66:	4613      	mov	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4a27      	ldr	r2, [pc, #156]	@ (8006c0c <xTaskResumeAll+0x128>)
 8006b70:	441a      	add	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	3304      	adds	r3, #4
 8006b76:	4619      	mov	r1, r3
 8006b78:	4610      	mov	r0, r2
 8006b7a:	f7fe ffe0 	bl	8005b3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					 task then a yield must be performed. */
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b82:	4b23      	ldr	r3, [pc, #140]	@ (8006c10 <xTaskResumeAll+0x12c>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d302      	bcc.n	8006b92 <xTaskResumeAll+0xae>
						xYieldPending = pdTRUE;
 8006b8c:	4b21      	ldr	r3, [pc, #132]	@ (8006c14 <xTaskResumeAll+0x130>)
 8006b8e:	2201      	movs	r2, #1
 8006b90:	601a      	str	r2, [r3, #0]
				while ( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE) {
 8006b92:	4b1c      	ldr	r3, [pc, #112]	@ (8006c04 <xTaskResumeAll+0x120>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1cb      	bne.n	8006b32 <xTaskResumeAll+0x4e>
					} else {
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if (pxTCB != NULL) {
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <xTaskResumeAll+0xc0>
					 which may have prevented the next unblock time from being
					 re-calculated, in which case re-calculate it now.  Mainly
					 important for low power tickless implementations, where
					 this can prevent an unnecessary exit from low power
					 state. */
					prvResetNextTaskUnblockTime();
 8006ba0:	f000 fb58 	bl	8007254 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				 they should be processed now.  This ensures the tick count does
				 not	slip, and that any delayed tasks are resumed at the correct
				 time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8006c18 <xTaskResumeAll+0x134>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	607b      	str	r3, [r7, #4]

					if (xPendedCounts > (TickType_t) 0U) {
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d010      	beq.n	8006bd2 <xTaskResumeAll+0xee>
						do {
							if (xTaskIncrementTick() != pdFALSE) {
 8006bb0:	f000 f846 	bl	8006c40 <xTaskIncrementTick>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <xTaskResumeAll+0xdc>
								xYieldPending = pdTRUE;
 8006bba:	4b16      	ldr	r3, [pc, #88]	@ (8006c14 <xTaskResumeAll+0x130>)
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]
							} else {
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	607b      	str	r3, [r7, #4]
						} while (xPendedCounts > (TickType_t) 0U);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1f1      	bne.n	8006bb0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006bcc:	4b12      	ldr	r3, [pc, #72]	@ (8006c18 <xTaskResumeAll+0x134>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	601a      	str	r2, [r3, #0]
					} else {
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if (xYieldPending != pdFALSE) {
 8006bd2:	4b10      	ldr	r3, [pc, #64]	@ (8006c14 <xTaskResumeAll+0x130>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d009      	beq.n	8006bee <xTaskResumeAll+0x10a>
#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	60bb      	str	r3, [r7, #8]
					}
#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006bde:	4b0f      	ldr	r3, [pc, #60]	@ (8006c1c <xTaskResumeAll+0x138>)
 8006be0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	f3bf 8f6f 	isb	sy
			}
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bee:	f001 f8ed 	bl	8007dcc <vPortExitCritical>

	return xAlreadyYielded;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	20001c20 	.word	0x20001c20
 8006c00:	20001bf8 	.word	0x20001bf8
 8006c04:	20001bb8 	.word	0x20001bb8
 8006c08:	20001c00 	.word	0x20001c00
 8006c0c:	20001728 	.word	0x20001728
 8006c10:	20001724 	.word	0x20001724
 8006c14:	20001c0c 	.word	0x20001c0c
 8006c18:	20001c08 	.word	0x20001c08
 8006c1c:	e000ed04 	.word	0xe000ed04

08006c20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount(void) {
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
	TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c26:	4b05      	ldr	r3, [pc, #20]	@ (8006c3c <xTaskGetTickCount+0x1c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	607b      	str	r3, [r7, #4]
	} portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c2c:	687b      	ldr	r3, [r7, #4]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	20001bfc 	.word	0x20001bfc

08006c40 <xTaskIncrementTick>:
	}

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick(void) {
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
	TCB_t *pxTCB;
	TickType_t xItemValue;
	BaseType_t xSwitchRequired = pdFALSE;
 8006c46:	2300      	movs	r3, #0
 8006c48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	 Increments the tick then checks to see if the new tick value will cause any
	 tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 8006c4a:	4b4f      	ldr	r3, [pc, #316]	@ (8006d88 <xTaskIncrementTick+0x148>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f040 8090 	bne.w	8006d74 <xTaskIncrementTick+0x134>
		/* Minor optimisation.  The tick count cannot change in this
		 block. */
		const TickType_t xConstTickCount = xTickCount + (TickType_t) 1;
 8006c54:	4b4d      	ldr	r3, [pc, #308]	@ (8006d8c <xTaskIncrementTick+0x14c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		 delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c5c:	4a4b      	ldr	r2, [pc, #300]	@ (8006d8c <xTaskIncrementTick+0x14c>)
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	6013      	str	r3, [r2, #0]

		if (xConstTickCount == (TickType_t) 0U) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d121      	bne.n	8006cac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c68:	4b49      	ldr	r3, [pc, #292]	@ (8006d90 <xTaskIncrementTick+0x150>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00b      	beq.n	8006c8a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	603b      	str	r3, [r7, #0]
}
 8006c84:	bf00      	nop
 8006c86:	bf00      	nop
 8006c88:	e7fd      	b.n	8006c86 <xTaskIncrementTick+0x46>
 8006c8a:	4b41      	ldr	r3, [pc, #260]	@ (8006d90 <xTaskIncrementTick+0x150>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	60fb      	str	r3, [r7, #12]
 8006c90:	4b40      	ldr	r3, [pc, #256]	@ (8006d94 <xTaskIncrementTick+0x154>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a3e      	ldr	r2, [pc, #248]	@ (8006d90 <xTaskIncrementTick+0x150>)
 8006c96:	6013      	str	r3, [r2, #0]
 8006c98:	4a3e      	ldr	r2, [pc, #248]	@ (8006d94 <xTaskIncrementTick+0x154>)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	4b3e      	ldr	r3, [pc, #248]	@ (8006d98 <xTaskIncrementTick+0x158>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	4a3c      	ldr	r2, [pc, #240]	@ (8006d98 <xTaskIncrementTick+0x158>)
 8006ca6:	6013      	str	r3, [r2, #0]
 8006ca8:	f000 fad4 	bl	8007254 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		 the	queue in the order of their wake time - meaning once one task
		 has been found whose block time has not expired there is no need to
		 look any further down the list. */
		if (xConstTickCount >= xNextTaskUnblockTime) {
 8006cac:	4b3b      	ldr	r3, [pc, #236]	@ (8006d9c <xTaskIncrementTick+0x15c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d349      	bcc.n	8006d4a <xTaskIncrementTick+0x10a>
			for (;;) {
				if ( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE) {
 8006cb6:	4b36      	ldr	r3, [pc, #216]	@ (8006d90 <xTaskIncrementTick+0x150>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d104      	bne.n	8006cca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					 to the maximum possible value so it is extremely
					 unlikely that the
					 if( xTickCount >= xNextTaskUnblockTime ) test will pass
					 next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cc0:	4b36      	ldr	r3, [pc, #216]	@ (8006d9c <xTaskIncrementTick+0x15c>)
 8006cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc6:	601a      	str	r2, [r3, #0]
					break;
 8006cc8:	e03f      	b.n	8006d4a <xTaskIncrementTick+0x10a>
				} else {
					/* The delayed list is not empty, get the value of the
					 item at the head of the delayed list.  This is the time
					 at which the task at the head of the delayed list must
					 be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cca:	4b31      	ldr	r3, [pc, #196]	@ (8006d90 <xTaskIncrementTick+0x150>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE(
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	607b      	str	r3, [r7, #4]
							&(pxTCB->xStateListItem));

					if (xConstTickCount < xItemValue) {
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d203      	bcs.n	8006cea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						 item value is the time at which the task at the head
						 of the blocked list must be removed from the Blocked
						 state -	so record the item value in
						 xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ce2:	4a2e      	ldr	r2, [pc, #184]	@ (8006d9c <xTaskIncrementTick+0x15c>)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ce8:	e02f      	b.n	8006d4a <xTaskIncrementTick+0x10a>
					} else {
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					(void) uxListRemove(&(pxTCB->xStateListItem));
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	3304      	adds	r3, #4
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fe ff82 	bl	8005bf8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					 it from the event list. */
					if ( listLIST_ITEM_CONTAINER(
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d004      	beq.n	8006d06 <xTaskIncrementTick+0xc6>
							&(pxTCB->xEventListItem)) != NULL) {
						(void) uxListRemove(&(pxTCB->xEventListItem));
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	3318      	adds	r3, #24
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fe ff79 	bl	8005bf8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					 list. */
					prvAddTaskToReadyList(pxTCB);
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d0a:	4b25      	ldr	r3, [pc, #148]	@ (8006da0 <xTaskIncrementTick+0x160>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d903      	bls.n	8006d1a <xTaskIncrementTick+0xda>
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d16:	4a22      	ldr	r2, [pc, #136]	@ (8006da0 <xTaskIncrementTick+0x160>)
 8006d18:	6013      	str	r3, [r2, #0]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d1e:	4613      	mov	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4a1f      	ldr	r2, [pc, #124]	@ (8006da4 <xTaskIncrementTick+0x164>)
 8006d28:	441a      	add	r2, r3
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	4619      	mov	r1, r3
 8006d30:	4610      	mov	r0, r2
 8006d32:	f7fe ff04 	bl	8005b3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						 only be performed if the unblocked task has a
						 priority that is equal to or higher than the
						 currently executing task. */
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8006da8 <xTaskIncrementTick+0x168>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d3b8      	bcc.n	8006cb6 <xTaskIncrementTick+0x76>
							xSwitchRequired = pdTRUE;
 8006d44:	2301      	movs	r3, #1
 8006d46:	617b      	str	r3, [r7, #20]
				if ( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE) {
 8006d48:	e7b5      	b.n	8006cb6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		 processing time (time slice) if preemption is on, and the application
		 writer has not explicitly turned time slicing off. */
#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if ( listCURRENT_LIST_LENGTH(
 8006d4a:	4b17      	ldr	r3, [pc, #92]	@ (8006da8 <xTaskIncrementTick+0x168>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d50:	4914      	ldr	r1, [pc, #80]	@ (8006da4 <xTaskIncrementTick+0x164>)
 8006d52:	4613      	mov	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	440b      	add	r3, r1
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d901      	bls.n	8006d66 <xTaskIncrementTick+0x126>
					&(pxReadyTasksLists[pxCurrentTCB->uxPriority]))
					> (UBaseType_t) 1) {
				xSwitchRequired = pdTRUE;
 8006d62:	2301      	movs	r3, #1
 8006d64:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

#if ( configUSE_PREEMPTION == 1 )
		{
			if (xYieldPending != pdFALSE) {
 8006d66:	4b11      	ldr	r3, [pc, #68]	@ (8006dac <xTaskIncrementTick+0x16c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d007      	beq.n	8006d7e <xTaskIncrementTick+0x13e>
				xSwitchRequired = pdTRUE;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	e004      	b.n	8006d7e <xTaskIncrementTick+0x13e>
				mtCOVERAGE_TEST_MARKER();
			}
		}
#endif /* configUSE_PREEMPTION */
	} else {
		++xPendedTicks;
 8006d74:	4b0e      	ldr	r3, [pc, #56]	@ (8006db0 <xTaskIncrementTick+0x170>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8006db0 <xTaskIncrementTick+0x170>)
 8006d7c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006d7e:	697b      	ldr	r3, [r7, #20]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3718      	adds	r7, #24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	20001c20 	.word	0x20001c20
 8006d8c:	20001bfc 	.word	0x20001bfc
 8006d90:	20001bb0 	.word	0x20001bb0
 8006d94:	20001bb4 	.word	0x20001bb4
 8006d98:	20001c10 	.word	0x20001c10
 8006d9c:	20001c18 	.word	0x20001c18
 8006da0:	20001c00 	.word	0x20001c00
 8006da4:	20001728 	.word	0x20001728
 8006da8:	20001724 	.word	0x20001724
 8006dac:	20001c0c 	.word	0x20001c0c
 8006db0:	20001c08 	.word	0x20001c08

08006db4 <vTaskSwitchContext>:
	}

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext(void) {
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
	if (uxSchedulerSuspended != (UBaseType_t) pdFALSE) {
 8006dba:	4b28      	ldr	r3, [pc, #160]	@ (8006e5c <vTaskSwitchContext+0xa8>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <vTaskSwitchContext+0x16>
		/* The scheduler is currently suspended - do not allow a context
		 switch. */
		xYieldPending = pdTRUE;
 8006dc2:	4b27      	ldr	r3, [pc, #156]	@ (8006e60 <vTaskSwitchContext+0xac>)
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006dc8:	e042      	b.n	8006e50 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006dca:	4b25      	ldr	r3, [pc, #148]	@ (8006e60 <vTaskSwitchContext+0xac>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dd0:	4b24      	ldr	r3, [pc, #144]	@ (8006e64 <vTaskSwitchContext+0xb0>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	e011      	b.n	8006dfc <vTaskSwitchContext+0x48>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10b      	bne.n	8006df6 <vTaskSwitchContext+0x42>
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	607b      	str	r3, [r7, #4]
}
 8006df0:	bf00      	nop
 8006df2:	bf00      	nop
 8006df4:	e7fd      	b.n	8006df2 <vTaskSwitchContext+0x3e>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	491a      	ldr	r1, [pc, #104]	@ (8006e68 <vTaskSwitchContext+0xb4>)
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	4613      	mov	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	440b      	add	r3, r1
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0e3      	beq.n	8006dd8 <vTaskSwitchContext+0x24>
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	4613      	mov	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4413      	add	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4a13      	ldr	r2, [pc, #76]	@ (8006e68 <vTaskSwitchContext+0xb4>)
 8006e1c:	4413      	add	r3, r2
 8006e1e:	60bb      	str	r3, [r7, #8]
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	605a      	str	r2, [r3, #4]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	3308      	adds	r3, #8
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d104      	bne.n	8006e40 <vTaskSwitchContext+0x8c>
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	605a      	str	r2, [r3, #4]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	4a09      	ldr	r2, [pc, #36]	@ (8006e6c <vTaskSwitchContext+0xb8>)
 8006e48:	6013      	str	r3, [r2, #0]
 8006e4a:	4a06      	ldr	r2, [pc, #24]	@ (8006e64 <vTaskSwitchContext+0xb0>)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6013      	str	r3, [r2, #0]
}
 8006e50:	bf00      	nop
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	20001c20 	.word	0x20001c20
 8006e60:	20001c0c 	.word	0x20001c0c
 8006e64:	20001c00 	.word	0x20001c00
 8006e68:	20001728 	.word	0x20001728
 8006e6c:	20001724 	.word	0x20001724

08006e70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList(List_t *const pxEventList,
		const TickType_t xTicksToWait) {
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
	configASSERT(pxEventList);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10b      	bne.n	8006e98 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	60fb      	str	r3, [r7, #12]
}
 8006e92:	bf00      	nop
 8006e94:	bf00      	nop
 8006e96:	e7fd      	b.n	8006e94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	 This is placed in the list in priority order so the highest priority task
	 is the first to be woken by the event.  The queue that contains the event
	 list is locked, preventing simultaneous access from interrupts. */
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
 8006e98:	4b07      	ldr	r3, [pc, #28]	@ (8006eb8 <vTaskPlaceOnEventList+0x48>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3318      	adds	r3, #24
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7fe fe70 	bl	8005b86 <vListInsert>

	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
 8006ea6:	2101      	movs	r1, #1
 8006ea8:	6838      	ldr	r0, [r7, #0]
 8006eaa:	f000 fa81 	bl	80073b0 <prvAddCurrentTaskToDelayedList>
}
 8006eae:	bf00      	nop
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20001724 	.word	0x20001724

08006ebc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

void vTaskPlaceOnEventListRestricted(List_t *const pxEventList,
		TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
	configASSERT(pxEventList);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10b      	bne.n	8006ee6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	617b      	str	r3, [r7, #20]
}
 8006ee0:	bf00      	nop
 8006ee2:	bf00      	nop
 8006ee4:	e7fd      	b.n	8006ee2 <vTaskPlaceOnEventListRestricted+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	 In this case it is assume that this is the only task that is going to
	 be waiting on this event list, so the faster vListInsertEnd() function
	 can be used in place of vListInsert. */
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
 8006ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8006f10 <vTaskPlaceOnEventListRestricted+0x54>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3318      	adds	r3, #24
 8006eec:	4619      	mov	r1, r3
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f7fe fe25 	bl	8005b3e <vListInsertEnd>

	/* If the task should block indefinitely then set the block time to a
	 value that will be recognised as an indefinite delay inside the
	 prvAddCurrentTaskToDelayedList() function. */
	if (xWaitIndefinitely != pdFALSE) {
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <vTaskPlaceOnEventListRestricted+0x44>
		xTicksToWait = portMAX_DELAY;
 8006efa:	f04f 33ff 	mov.w	r3, #4294967295
 8006efe:	60bb      	str	r3, [r7, #8]
	}

	traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	68b8      	ldr	r0, [r7, #8]
 8006f04:	f000 fa54 	bl	80073b0 <prvAddCurrentTaskToDelayedList>
}
 8006f08:	bf00      	nop
 8006f0a:	3718      	adds	r7, #24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	20001724 	.word	0x20001724

08006f14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList(const List_t *const pxEventList) {
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
	 get called - the lock count on the queue will get modified instead.  This
	 means exclusive access to the event list is guaranteed here.

	 This function assumes that a check has already been made to ensure that
	 pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY(pxEventList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	613b      	str	r3, [r7, #16]
	configASSERT(pxUnblockedTCB);
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10b      	bne.n	8006f42 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	60fb      	str	r3, [r7, #12]
}
 8006f3c:	bf00      	nop
 8006f3e:	bf00      	nop
 8006f40:	e7fd      	b.n	8006f3e <xTaskRemoveFromEventList+0x2a>
	(void) uxListRemove(&(pxUnblockedTCB->xEventListItem));
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	3318      	adds	r3, #24
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe fe56 	bl	8005bf8 <uxListRemove>

	if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 8006f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8006fc4 <xTaskRemoveFromEventList+0xb0>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d11d      	bne.n	8006f90 <xTaskRemoveFromEventList+0x7c>
		(void) uxListRemove(&(pxUnblockedTCB->xStateListItem));
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fe fe4d 	bl	8005bf8 <uxListRemove>
		prvAddTaskToReadyList(pxUnblockedTCB);
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f62:	4b19      	ldr	r3, [pc, #100]	@ (8006fc8 <xTaskRemoveFromEventList+0xb4>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d903      	bls.n	8006f72 <xTaskRemoveFromEventList+0x5e>
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f6e:	4a16      	ldr	r2, [pc, #88]	@ (8006fc8 <xTaskRemoveFromEventList+0xb4>)
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f76:	4613      	mov	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4a13      	ldr	r2, [pc, #76]	@ (8006fcc <xTaskRemoveFromEventList+0xb8>)
 8006f80:	441a      	add	r2, r3
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	3304      	adds	r3, #4
 8006f86:	4619      	mov	r1, r3
 8006f88:	4610      	mov	r0, r2
 8006f8a:	f7fe fdd8 	bl	8005b3e <vListInsertEnd>
 8006f8e:	e005      	b.n	8006f9c <xTaskRemoveFromEventList+0x88>
		}
		#endif
	} else {
		/* The delayed and ready lists cannot be accessed, so hold this task
		 pending until the scheduler is resumed. */
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	3318      	adds	r3, #24
 8006f94:	4619      	mov	r1, r3
 8006f96:	480e      	ldr	r0, [pc, #56]	@ (8006fd0 <xTaskRemoveFromEventList+0xbc>)
 8006f98:	f7fe fdd1 	bl	8005b3e <vListInsertEnd>
	}

	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8006fd4 <xTaskRemoveFromEventList+0xc0>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d905      	bls.n	8006fb6 <xTaskRemoveFromEventList+0xa2>
		/* Return true if the task removed from the event list has a higher
		 priority than the calling task.  This allows the calling task to know if
		 it should force a context switch now. */
		xReturn = pdTRUE;
 8006faa:	2301      	movs	r3, #1
 8006fac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		 "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fae:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd8 <xTaskRemoveFromEventList+0xc4>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	e001      	b.n	8006fba <xTaskRemoveFromEventList+0xa6>
	} else {
		xReturn = pdFALSE;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006fba:	697b      	ldr	r3, [r7, #20]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3718      	adds	r7, #24
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	20001c20 	.word	0x20001c20
 8006fc8:	20001c00 	.word	0x20001c00
 8006fcc:	20001728 	.word	0x20001728
 8006fd0:	20001bb8 	.word	0x20001bb8
 8006fd4:	20001724 	.word	0x20001724
 8006fd8:	20001c0c 	.word	0x20001c0c

08006fdc <vTaskInternalSetTimeOutState>:
	}
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState(TimeOut_t *const pxTimeOut) {
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006fe4:	4b06      	ldr	r3, [pc, #24]	@ (8007000 <vTaskInternalSetTimeOutState+0x24>)
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006fec:	4b05      	ldr	r3, [pc, #20]	@ (8007004 <vTaskInternalSetTimeOutState+0x28>)
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	605a      	str	r2, [r3, #4]
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	20001c10 	.word	0x20001c10
 8007004:	20001bfc 	.word	0x20001bfc

08007008 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut(TimeOut_t *const pxTimeOut,
		TickType_t *const pxTicksToWait) {
 8007008:	b580      	push	{r7, lr}
 800700a:	b088      	sub	sp, #32
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

	configASSERT(pxTimeOut);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10b      	bne.n	8007030 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	613b      	str	r3, [r7, #16]
}
 800702a:	bf00      	nop
 800702c:	bf00      	nop
 800702e:	e7fd      	b.n	800702c <xTaskCheckForTimeOut+0x24>
	configASSERT(pxTicksToWait);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10b      	bne.n	800704e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	60fb      	str	r3, [r7, #12]
}
 8007048:	bf00      	nop
 800704a:	bf00      	nop
 800704c:	e7fd      	b.n	800704a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800704e:	f000 fe8b 	bl	8007d68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007052:	4b1d      	ldr	r3, [pc, #116]	@ (80070c8 <xTaskCheckForTimeOut+0xc0>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount
				- pxTimeOut->xTimeOnEntering;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
		const TickType_t xElapsedTime = xConstTickCount
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

#if ( INCLUDE_vTaskSuspend == 1 )
		if (*pxTicksToWait == portMAX_DELAY) {
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706a:	d102      	bne.n	8007072 <xTaskCheckForTimeOut+0x6a>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time
			 specified is the maximum block time then the task should block
			 indefinitely, and therefore never time out. */
			xReturn = pdFALSE;
 800706c:	2300      	movs	r3, #0
 800706e:	61fb      	str	r3, [r7, #28]
 8007070:	e023      	b.n	80070ba <xTaskCheckForTimeOut+0xb2>
		} else
#endif

		if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	4b15      	ldr	r3, [pc, #84]	@ (80070cc <xTaskCheckForTimeOut+0xc4>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	429a      	cmp	r2, r3
 800707c:	d007      	beq.n	800708e <xTaskCheckForTimeOut+0x86>
				&& (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	429a      	cmp	r2, r3
 8007086:	d302      	bcc.n	800708e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			 vTaskSetTimeout() was called, but has also overflowed since
			 vTaskSetTimeOut() was called.  It must have wrapped all the way
			 around and gone past again. This passed since vTaskSetTimeout()
			 was called. */
			xReturn = pdTRUE;
 8007088:	2301      	movs	r3, #1
 800708a:	61fb      	str	r3, [r7, #28]
 800708c:	e015      	b.n	80070ba <xTaskCheckForTimeOut+0xb2>
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	429a      	cmp	r2, r3
 8007096:	d20b      	bcs.n	80070b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	1ad2      	subs	r2, r2, r3
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7ff ff99 	bl	8006fdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070aa:	2300      	movs	r3, #0
 80070ac:	61fb      	str	r3, [r7, #28]
 80070ae:	e004      	b.n	80070ba <xTaskCheckForTimeOut+0xb2>
		} else {
			*pxTicksToWait = 0;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2200      	movs	r2, #0
 80070b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070b6:	2301      	movs	r3, #1
 80070b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070ba:	f000 fe87 	bl	8007dcc <vPortExitCritical>

	return xReturn;
 80070be:	69fb      	ldr	r3, [r7, #28]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3720      	adds	r7, #32
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	20001bfc 	.word	0x20001bfc
 80070cc:	20001c10 	.word	0x20001c10

080070d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield(void) {
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070d4:	4b03      	ldr	r3, [pc, #12]	@ (80070e4 <vTaskMissedYield+0x14>)
 80070d6:	2201      	movs	r2, #1
 80070d8:	601a      	str	r2, [r3, #0]
}
 80070da:	bf00      	nop
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	20001c0c 	.word	0x20001c0c

080070e8 <prvIdleTask>:
 * language extensions.  The equivalent prototype for this function is:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters ) {
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );

	for (;;) {
		/* See if any tasks have deleted themselves - if so then the idle task
		 is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80070f0:	f000 f852 	bl	8007198 <prvCheckTasksWaitingTermination>

			 A critical region is not required here as we are just reading from
			 the list, and an occasional incorrect value will not matter.  If
			 the ready list at the idle priority contains more than one task
			 then a task other than the idle task is ready to execute. */
			if ( listCURRENT_LIST_LENGTH(
 80070f4:	4b06      	ldr	r3, [pc, #24]	@ (8007110 <prvIdleTask+0x28>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d9f9      	bls.n	80070f0 <prvIdleTask+0x8>
					&( pxReadyTasksLists[ tskIDLE_PRIORITY ] ))
					> (UBaseType_t) 1) {
				taskYIELD();
 80070fc:	4b05      	ldr	r3, [pc, #20]	@ (8007114 <prvIdleTask+0x2c>)
 80070fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800710c:	e7f0      	b.n	80070f0 <prvIdleTask+0x8>
 800710e:	bf00      	nop
 8007110:	20001728 	.word	0x20001728
 8007114:	e000ed04 	.word	0xe000ed04

08007118 <prvInitialiseTaskLists>:
	}

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists(void) {
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
	UBaseType_t uxPriority;

	for (uxPriority = (UBaseType_t) 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	607b      	str	r3, [r7, #4]
 8007122:	e00c      	b.n	800713e <prvInitialiseTaskLists+0x26>
			uxPriority < (UBaseType_t) configMAX_PRIORITIES; uxPriority++) {
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	4613      	mov	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4a12      	ldr	r2, [pc, #72]	@ (8007178 <prvInitialiseTaskLists+0x60>)
 8007130:	4413      	add	r3, r2
 8007132:	4618      	mov	r0, r3
 8007134:	f7fe fcd6 	bl	8005ae4 <vListInitialise>
			uxPriority < (UBaseType_t) configMAX_PRIORITIES; uxPriority++) {
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	3301      	adds	r3, #1
 800713c:	607b      	str	r3, [r7, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b37      	cmp	r3, #55	@ 0x37
 8007142:	d9ef      	bls.n	8007124 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise(&xDelayedTaskList1);
 8007144:	480d      	ldr	r0, [pc, #52]	@ (800717c <prvInitialiseTaskLists+0x64>)
 8007146:	f7fe fccd 	bl	8005ae4 <vListInitialise>
	vListInitialise(&xDelayedTaskList2);
 800714a:	480d      	ldr	r0, [pc, #52]	@ (8007180 <prvInitialiseTaskLists+0x68>)
 800714c:	f7fe fcca 	bl	8005ae4 <vListInitialise>
	vListInitialise(&xPendingReadyList);
 8007150:	480c      	ldr	r0, [pc, #48]	@ (8007184 <prvInitialiseTaskLists+0x6c>)
 8007152:	f7fe fcc7 	bl	8005ae4 <vListInitialise>

#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise(&xTasksWaitingTermination);
 8007156:	480c      	ldr	r0, [pc, #48]	@ (8007188 <prvInitialiseTaskLists+0x70>)
 8007158:	f7fe fcc4 	bl	8005ae4 <vListInitialise>
	}
#endif /* INCLUDE_vTaskDelete */

#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise(&xSuspendedTaskList);
 800715c:	480b      	ldr	r0, [pc, #44]	@ (800718c <prvInitialiseTaskLists+0x74>)
 800715e:	f7fe fcc1 	bl	8005ae4 <vListInitialise>
	}
#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	 using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007162:	4b0b      	ldr	r3, [pc, #44]	@ (8007190 <prvInitialiseTaskLists+0x78>)
 8007164:	4a05      	ldr	r2, [pc, #20]	@ (800717c <prvInitialiseTaskLists+0x64>)
 8007166:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007168:	4b0a      	ldr	r3, [pc, #40]	@ (8007194 <prvInitialiseTaskLists+0x7c>)
 800716a:	4a05      	ldr	r2, [pc, #20]	@ (8007180 <prvInitialiseTaskLists+0x68>)
 800716c:	601a      	str	r2, [r3, #0]
}
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20001728 	.word	0x20001728
 800717c:	20001b88 	.word	0x20001b88
 8007180:	20001b9c 	.word	0x20001b9c
 8007184:	20001bb8 	.word	0x20001bb8
 8007188:	20001bcc 	.word	0x20001bcc
 800718c:	20001be4 	.word	0x20001be4
 8007190:	20001bb0 	.word	0x20001bb0
 8007194:	20001bb4 	.word	0x20001bb4

08007198 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination(void) {
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		 being called too often in the idle task. */
		while (uxDeletedTasksWaitingCleanUp > (UBaseType_t) 0U) {
 800719e:	e019      	b.n	80071d4 <prvCheckTasksWaitingTermination+0x3c>
			taskENTER_CRITICAL();
 80071a0:	f000 fde2 	bl	8007d68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY(
 80071a4:	4b10      	ldr	r3, [pc, #64]	@ (80071e8 <prvCheckTasksWaitingTermination+0x50>)
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	607b      	str	r3, [r7, #4]
						(&xTasksWaitingTermination)); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
				(void) uxListRemove(&(pxTCB->xStateListItem));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3304      	adds	r3, #4
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fe fd21 	bl	8005bf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071b6:	4b0d      	ldr	r3, [pc, #52]	@ (80071ec <prvCheckTasksWaitingTermination+0x54>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3b01      	subs	r3, #1
 80071bc:	4a0b      	ldr	r2, [pc, #44]	@ (80071ec <prvCheckTasksWaitingTermination+0x54>)
 80071be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071c0:	4b0b      	ldr	r3, [pc, #44]	@ (80071f0 <prvCheckTasksWaitingTermination+0x58>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	3b01      	subs	r3, #1
 80071c6:	4a0a      	ldr	r2, [pc, #40]	@ (80071f0 <prvCheckTasksWaitingTermination+0x58>)
 80071c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071ca:	f000 fdff 	bl	8007dcc <vPortExitCritical>

			prvDeleteTCB(pxTCB);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f810 	bl	80071f4 <prvDeleteTCB>
		while (uxDeletedTasksWaitingCleanUp > (UBaseType_t) 0U) {
 80071d4:	4b06      	ldr	r3, [pc, #24]	@ (80071f0 <prvCheckTasksWaitingTermination+0x58>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e1      	bne.n	80071a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
#endif /* INCLUDE_vTaskDelete */
}
 80071dc:	bf00      	nop
 80071de:	bf00      	nop
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	20001bcc 	.word	0x20001bcc
 80071ec:	20001bf8 	.word	0x20001bf8
 80071f0:	20001be0 	.word	0x20001be0

080071f4 <prvDeleteTCB>:
#endif /* INCLUDE_uxTaskGetStackHighWaterMark */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

static void prvDeleteTCB(TCB_t *pxTCB) {
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
	{
		/* The task could have been allocated statically or dynamically, so
		 check what was statically allocated before trying to free the
		 memory. */
		if (pxTCB->ucStaticallyAllocated
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007202:	2b00      	cmp	r3, #0
 8007204:	d108      	bne.n	8007218 <prvDeleteTCB+0x24>
				== tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB) {
			/* Both the stack and TCB were allocated dynamically, so both
			 must be freed. */
			vPortFree(pxTCB->pxStack);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800720a:	4618      	mov	r0, r3
 800720c:	f000 ff9c 	bl	8008148 <vPortFree>
			vPortFree(pxTCB);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 ff99 	bl	8008148 <vPortFree>
			configASSERT(
					pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB); mtCOVERAGE_TEST_MARKER();
		}
	}
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007216:	e019      	b.n	800724c <prvDeleteTCB+0x58>
		} else if (pxTCB->ucStaticallyAllocated
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800721e:	2b01      	cmp	r3, #1
 8007220:	d103      	bne.n	800722a <prvDeleteTCB+0x36>
			vPortFree(pxTCB);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 ff90 	bl	8008148 <vPortFree>
}
 8007228:	e010      	b.n	800724c <prvDeleteTCB+0x58>
			configASSERT(
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007230:	2b02      	cmp	r3, #2
 8007232:	d00b      	beq.n	800724c <prvDeleteTCB+0x58>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	60fb      	str	r3, [r7, #12]
}
 8007246:	bf00      	nop
 8007248:	bf00      	nop
 800724a:	e7fd      	b.n	8007248 <prvDeleteTCB+0x54>
}
 800724c:	bf00      	nop
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime(void) {
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
	TCB_t *pxTCB;

	if ( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE) {
 800725a:	4b0c      	ldr	r3, [pc, #48]	@ (800728c <prvResetNextTaskUnblockTime+0x38>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d104      	bne.n	800726e <prvResetNextTaskUnblockTime+0x1a>
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		 the maximum possible value so it is	extremely unlikely that the
		 if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		 there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007264:	4b0a      	ldr	r3, [pc, #40]	@ (8007290 <prvResetNextTaskUnblockTime+0x3c>)
 8007266:	f04f 32ff 	mov.w	r2, #4294967295
 800726a:	601a      	str	r2, [r3, #0]
		 from the Blocked state. */
		(pxTCB) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(
				&((pxTCB)->xStateListItem));
	}
}
 800726c:	e008      	b.n	8007280 <prvResetNextTaskUnblockTime+0x2c>
		(pxTCB) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800726e:	4b07      	ldr	r3, [pc, #28]	@ (800728c <prvResetNextTaskUnblockTime+0x38>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	4a04      	ldr	r2, [pc, #16]	@ (8007290 <prvResetNextTaskUnblockTime+0x3c>)
 800727e:	6013      	str	r3, [r2, #0]
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	20001bb0 	.word	0x20001bb0
 8007290:	20001c18 	.word	0x20001c18

08007294 <xTaskGetSchedulerState>:
#endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

BaseType_t xTaskGetSchedulerState(void) {
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

	if (xSchedulerRunning == pdFALSE) {
 800729a:	4b0b      	ldr	r3, [pc, #44]	@ (80072c8 <xTaskGetSchedulerState+0x34>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d102      	bne.n	80072a8 <xTaskGetSchedulerState+0x14>
		xReturn = taskSCHEDULER_NOT_STARTED;
 80072a2:	2301      	movs	r3, #1
 80072a4:	607b      	str	r3, [r7, #4]
 80072a6:	e008      	b.n	80072ba <xTaskGetSchedulerState+0x26>
	} else {
		if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 80072a8:	4b08      	ldr	r3, [pc, #32]	@ (80072cc <xTaskGetSchedulerState+0x38>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d102      	bne.n	80072b6 <xTaskGetSchedulerState+0x22>
			xReturn = taskSCHEDULER_RUNNING;
 80072b0:	2302      	movs	r3, #2
 80072b2:	607b      	str	r3, [r7, #4]
 80072b4:	e001      	b.n	80072ba <xTaskGetSchedulerState+0x26>
		} else {
			xReturn = taskSCHEDULER_SUSPENDED;
 80072b6:	2300      	movs	r3, #0
 80072b8:	607b      	str	r3, [r7, #4]
		}
	}

	return xReturn;
 80072ba:	687b      	ldr	r3, [r7, #4]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr
 80072c8:	20001c04 	.word	0x20001c04
 80072cc:	20001c20 	.word	0x20001c20

080072d0 <xTaskPriorityDisinherit>:
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

BaseType_t xTaskPriorityDisinherit(TaskHandle_t const pxMutexHolder) {
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
	TCB_t *const pxTCB = pxMutexHolder;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80072dc:	2300      	movs	r3, #0
 80072de:	617b      	str	r3, [r7, #20]

	if (pxMutexHolder != NULL) {
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d058      	beq.n	8007398 <xTaskPriorityDisinherit+0xc8>
		/* A task can only have an inherited priority if it holds the mutex.
		 If the mutex is held by a task then it cannot be given from an
		 interrupt, and if a mutex is given by the holding task then it must
		 be the running state task. */
		configASSERT(pxTCB == pxCurrentTCB);
 80072e6:	4b2f      	ldr	r3, [pc, #188]	@ (80073a4 <xTaskPriorityDisinherit+0xd4>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d00b      	beq.n	8007308 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	60fb      	str	r3, [r7, #12]
}
 8007302:	bf00      	nop
 8007304:	bf00      	nop
 8007306:	e7fd      	b.n	8007304 <xTaskPriorityDisinherit+0x34>
		configASSERT(pxTCB->uxMutexesHeld);
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10b      	bne.n	8007328 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	60bb      	str	r3, [r7, #8]
}
 8007322:	bf00      	nop
 8007324:	bf00      	nop
 8007326:	e7fd      	b.n	8007324 <xTaskPriorityDisinherit+0x54>
		(pxTCB->uxMutexesHeld)--;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800732c:	1e5a      	subs	r2, r3, #1
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	651a      	str	r2, [r3, #80]	@ 0x50

		/* Has the holder of the mutex inherited the priority of another
		 task? */
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800733a:	429a      	cmp	r2, r3
 800733c:	d02c      	beq.n	8007398 <xTaskPriorityDisinherit+0xc8>
			/* Only disinherit if no other mutexes are held. */
			if (pxTCB->uxMutexesHeld == (UBaseType_t) 0) {
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007342:	2b00      	cmp	r3, #0
 8007344:	d128      	bne.n	8007398 <xTaskPriorityDisinherit+0xc8>
				/* A task can only have an inherited priority if it holds
				 the mutex.  If the mutex is held by a task then it cannot be
				 given from an interrupt, and if a mutex is given by the
				 holding task then it must be the running state task.  Remove
				 the holding task from the ready/delayed list. */
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t) 0) {
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	3304      	adds	r3, #4
 800734a:	4618      	mov	r0, r3
 800734c:	f7fe fc54 	bl	8005bf8 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the
				 new	ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	62da      	str	r2, [r3, #44]	@ 0x2c

				/* Reset the event list item value.  It cannot be in use for
				 any other purpose if this task is running, and it must be
				 running to give back the mutex. */
				listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	619a      	str	r2, [r3, #24]
						( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
				prvAddTaskToReadyList(pxTCB);
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007368:	4b0f      	ldr	r3, [pc, #60]	@ (80073a8 <xTaskPriorityDisinherit+0xd8>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	429a      	cmp	r2, r3
 800736e:	d903      	bls.n	8007378 <xTaskPriorityDisinherit+0xa8>
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007374:	4a0c      	ldr	r2, [pc, #48]	@ (80073a8 <xTaskPriorityDisinherit+0xd8>)
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800737c:	4613      	mov	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4a09      	ldr	r2, [pc, #36]	@ (80073ac <xTaskPriorityDisinherit+0xdc>)
 8007386:	441a      	add	r2, r3
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	3304      	adds	r3, #4
 800738c:	4619      	mov	r1, r3
 800738e:	4610      	mov	r0, r2
 8007390:	f7fe fbd5 	bl	8005b3e <vListInsertEnd>
				 in an order different to that in which they were taken.
				 If a context switch did not occur when the first mutex was
				 returned, even if a task was waiting on it, then a context
				 switch should occur when the last mutex is returned whether
				 a task is waiting on it or not. */
				xReturn = pdTRUE;
 8007394:	2301      	movs	r3, #1
 8007396:	617b      	str	r3, [r7, #20]
		}
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007398:	697b      	ldr	r3, [r7, #20]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	20001724 	.word	0x20001724
 80073a8:	20001c00 	.word	0x20001c00
 80073ac:	20001728 	.word	0x20001728

080073b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait,
		const BaseType_t xCanBlockIndefinitely) {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
 80073ba:	4b21      	ldr	r3, [pc, #132]	@ (8007440 <prvAddCurrentTaskToDelayedList+0x90>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	 as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t) 0) {
 80073c0:	4b20      	ldr	r3, [pc, #128]	@ (8007444 <prvAddCurrentTaskToDelayedList+0x94>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3304      	adds	r3, #4
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe fc16 	bl	8005bf8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if ((xTicksToWait == portMAX_DELAY )
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d2:	d10a      	bne.n	80073ea <prvAddCurrentTaskToDelayedList+0x3a>
				&& (xCanBlockIndefinitely != pdFALSE)) {
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d007      	beq.n	80073ea <prvAddCurrentTaskToDelayedList+0x3a>
			/* Add the task to the suspended task list instead of a delayed task
			 list to ensure it is not woken by a timing event.  It will block
			 indefinitely. */
			vListInsertEnd(&xSuspendedTaskList,
					&(pxCurrentTCB->xStateListItem));
 80073da:	4b1a      	ldr	r3, [pc, #104]	@ (8007444 <prvAddCurrentTaskToDelayedList+0x94>)
 80073dc:	681b      	ldr	r3, [r3, #0]
			vListInsertEnd(&xSuspendedTaskList,
 80073de:	3304      	adds	r3, #4
 80073e0:	4619      	mov	r1, r3
 80073e2:	4819      	ldr	r0, [pc, #100]	@ (8007448 <prvAddCurrentTaskToDelayedList+0x98>)
 80073e4:	f7fe fbab 	bl	8005b3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073e8:	e026      	b.n	8007438 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4413      	add	r3, r2
 80073f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem),
 80073f2:	4b14      	ldr	r3, [pc, #80]	@ (8007444 <prvAddCurrentTaskToDelayedList+0x94>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	605a      	str	r2, [r3, #4]
			if (xTimeToWake < xConstTickCount) {
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d209      	bcs.n	8007416 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert(pxOverflowDelayedTaskList,
 8007402:	4b12      	ldr	r3, [pc, #72]	@ (800744c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007404:	681a      	ldr	r2, [r3, #0]
						&(pxCurrentTCB->xStateListItem));
 8007406:	4b0f      	ldr	r3, [pc, #60]	@ (8007444 <prvAddCurrentTaskToDelayedList+0x94>)
 8007408:	681b      	ldr	r3, [r3, #0]
				vListInsert(pxOverflowDelayedTaskList,
 800740a:	3304      	adds	r3, #4
 800740c:	4619      	mov	r1, r3
 800740e:	4610      	mov	r0, r2
 8007410:	f7fe fbb9 	bl	8005b86 <vListInsert>
}
 8007414:	e010      	b.n	8007438 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
 8007416:	4b0e      	ldr	r3, [pc, #56]	@ (8007450 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	4b0a      	ldr	r3, [pc, #40]	@ (8007444 <prvAddCurrentTaskToDelayedList+0x94>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3304      	adds	r3, #4
 8007420:	4619      	mov	r1, r3
 8007422:	4610      	mov	r0, r2
 8007424:	f7fe fbaf 	bl	8005b86 <vListInsert>
				if (xTimeToWake < xNextTaskUnblockTime) {
 8007428:	4b0a      	ldr	r3, [pc, #40]	@ (8007454 <prvAddCurrentTaskToDelayedList+0xa4>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	429a      	cmp	r2, r3
 8007430:	d202      	bcs.n	8007438 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007432:	4a08      	ldr	r2, [pc, #32]	@ (8007454 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	6013      	str	r3, [r2, #0]
}
 8007438:	bf00      	nop
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	20001bfc 	.word	0x20001bfc
 8007444:	20001724 	.word	0x20001724
 8007448:	20001be4 	.word	0x20001be4
 800744c:	20001bb4 	.word	0x20001bb4
 8007450:	20001bb0 	.word	0x20001bb0
 8007454:	20001c18 	.word	0x20001c18

08007458 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08a      	sub	sp, #40	@ 0x28
 800745c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800745e:	2300      	movs	r3, #0
 8007460:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007462:	f000 fb13 	bl	8007a8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007466:	4b1d      	ldr	r3, [pc, #116]	@ (80074dc <xTimerCreateTimerTask+0x84>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d021      	beq.n	80074b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007472:	2300      	movs	r3, #0
 8007474:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007476:	1d3a      	adds	r2, r7, #4
 8007478:	f107 0108 	add.w	r1, r7, #8
 800747c:	f107 030c 	add.w	r3, r7, #12
 8007480:	4618      	mov	r0, r3
 8007482:	f7fe fb15 	bl	8005ab0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	9202      	str	r2, [sp, #8]
 800748e:	9301      	str	r3, [sp, #4]
 8007490:	2302      	movs	r3, #2
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	2300      	movs	r3, #0
 8007496:	460a      	mov	r2, r1
 8007498:	4911      	ldr	r1, [pc, #68]	@ (80074e0 <xTimerCreateTimerTask+0x88>)
 800749a:	4812      	ldr	r0, [pc, #72]	@ (80074e4 <xTimerCreateTimerTask+0x8c>)
 800749c:	f7ff f8d0 	bl	8006640 <xTaskCreateStatic>
 80074a0:	4603      	mov	r3, r0
 80074a2:	4a11      	ldr	r2, [pc, #68]	@ (80074e8 <xTimerCreateTimerTask+0x90>)
 80074a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074a6:	4b10      	ldr	r3, [pc, #64]	@ (80074e8 <xTimerCreateTimerTask+0x90>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d001      	beq.n	80074b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80074ae:	2301      	movs	r3, #1
 80074b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10b      	bne.n	80074d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	613b      	str	r3, [r7, #16]
}
 80074ca:	bf00      	nop
 80074cc:	bf00      	nop
 80074ce:	e7fd      	b.n	80074cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80074d0:	697b      	ldr	r3, [r7, #20]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	20001c54 	.word	0x20001c54
 80074e0:	080084a4 	.word	0x080084a4
 80074e4:	08007625 	.word	0x08007625
 80074e8:	20001c58 	.word	0x20001c58

080074ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08a      	sub	sp, #40	@ 0x28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10b      	bne.n	800751c <xTimerGenericCommand+0x30>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	623b      	str	r3, [r7, #32]
}
 8007516:	bf00      	nop
 8007518:	bf00      	nop
 800751a:	e7fd      	b.n	8007518 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800751c:	4b19      	ldr	r3, [pc, #100]	@ (8007584 <xTimerGenericCommand+0x98>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d02a      	beq.n	800757a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2b05      	cmp	r3, #5
 8007534:	dc18      	bgt.n	8007568 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007536:	f7ff fead 	bl	8007294 <xTaskGetSchedulerState>
 800753a:	4603      	mov	r3, r0
 800753c:	2b02      	cmp	r3, #2
 800753e:	d109      	bne.n	8007554 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007540:	4b10      	ldr	r3, [pc, #64]	@ (8007584 <xTimerGenericCommand+0x98>)
 8007542:	6818      	ldr	r0, [r3, #0]
 8007544:	f107 0110 	add.w	r1, r7, #16
 8007548:	2300      	movs	r3, #0
 800754a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800754c:	f7fe fc88 	bl	8005e60 <xQueueGenericSend>
 8007550:	6278      	str	r0, [r7, #36]	@ 0x24
 8007552:	e012      	b.n	800757a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007554:	4b0b      	ldr	r3, [pc, #44]	@ (8007584 <xTimerGenericCommand+0x98>)
 8007556:	6818      	ldr	r0, [r3, #0]
 8007558:	f107 0110 	add.w	r1, r7, #16
 800755c:	2300      	movs	r3, #0
 800755e:	2200      	movs	r2, #0
 8007560:	f7fe fc7e 	bl	8005e60 <xQueueGenericSend>
 8007564:	6278      	str	r0, [r7, #36]	@ 0x24
 8007566:	e008      	b.n	800757a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007568:	4b06      	ldr	r3, [pc, #24]	@ (8007584 <xTimerGenericCommand+0x98>)
 800756a:	6818      	ldr	r0, [r3, #0]
 800756c:	f107 0110 	add.w	r1, r7, #16
 8007570:	2300      	movs	r3, #0
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	f7fe fd76 	bl	8006064 <xQueueGenericSendFromISR>
 8007578:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800757a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800757c:	4618      	mov	r0, r3
 800757e:	3728      	adds	r7, #40	@ 0x28
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20001c54 	.word	0x20001c54

08007588 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b088      	sub	sp, #32
 800758c:	af02      	add	r7, sp, #8
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007592:	4b23      	ldr	r3, [pc, #140]	@ (8007620 <prvProcessExpiredTimer+0x98>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	3304      	adds	r3, #4
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fe fb29 	bl	8005bf8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075ac:	f003 0304 	and.w	r3, r3, #4
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d023      	beq.n	80075fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	699a      	ldr	r2, [r3, #24]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	18d1      	adds	r1, r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	6978      	ldr	r0, [r7, #20]
 80075c2:	f000 f8d5 	bl	8007770 <prvInsertTimerInActiveList>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d020      	beq.n	800760e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075cc:	2300      	movs	r3, #0
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	2300      	movs	r3, #0
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	2100      	movs	r1, #0
 80075d6:	6978      	ldr	r0, [r7, #20]
 80075d8:	f7ff ff88 	bl	80074ec <xTimerGenericCommand>
 80075dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d114      	bne.n	800760e <prvProcessExpiredTimer+0x86>
	__asm volatile
 80075e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e8:	f383 8811 	msr	BASEPRI, r3
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	60fb      	str	r3, [r7, #12]
}
 80075f6:	bf00      	nop
 80075f8:	bf00      	nop
 80075fa:	e7fd      	b.n	80075f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007602:	f023 0301 	bic.w	r3, r3, #1
 8007606:	b2da      	uxtb	r2, r3
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	6978      	ldr	r0, [r7, #20]
 8007614:	4798      	blx	r3
}
 8007616:	bf00      	nop
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	20001c4c 	.word	0x20001c4c

08007624 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800762c:	f107 0308 	add.w	r3, r7, #8
 8007630:	4618      	mov	r0, r3
 8007632:	f000 f859 	bl	80076e8 <prvGetNextExpireTime>
 8007636:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	4619      	mov	r1, r3
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 f805 	bl	800764c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007642:	f000 f8d7 	bl	80077f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007646:	bf00      	nop
 8007648:	e7f0      	b.n	800762c <prvTimerTask+0x8>
	...

0800764c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007656:	f7ff fa37 	bl	8006ac8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800765a:	f107 0308 	add.w	r3, r7, #8
 800765e:	4618      	mov	r0, r3
 8007660:	f000 f866 	bl	8007730 <prvSampleTimeNow>
 8007664:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d130      	bne.n	80076ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10a      	bne.n	8007688 <prvProcessTimerOrBlockTask+0x3c>
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	429a      	cmp	r2, r3
 8007678:	d806      	bhi.n	8007688 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800767a:	f7ff fa33 	bl	8006ae4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800767e:	68f9      	ldr	r1, [r7, #12]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7ff ff81 	bl	8007588 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007686:	e024      	b.n	80076d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d008      	beq.n	80076a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800768e:	4b13      	ldr	r3, [pc, #76]	@ (80076dc <prvProcessTimerOrBlockTask+0x90>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <prvProcessTimerOrBlockTask+0x50>
 8007698:	2301      	movs	r3, #1
 800769a:	e000      	b.n	800769e <prvProcessTimerOrBlockTask+0x52>
 800769c:	2300      	movs	r3, #0
 800769e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076a0:	4b0f      	ldr	r3, [pc, #60]	@ (80076e0 <prvProcessTimerOrBlockTask+0x94>)
 80076a2:	6818      	ldr	r0, [r3, #0]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	4619      	mov	r1, r3
 80076ae:	f7fe ff93 	bl	80065d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076b2:	f7ff fa17 	bl	8006ae4 <xTaskResumeAll>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10a      	bne.n	80076d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80076bc:	4b09      	ldr	r3, [pc, #36]	@ (80076e4 <prvProcessTimerOrBlockTask+0x98>)
 80076be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	f3bf 8f6f 	isb	sy
}
 80076cc:	e001      	b.n	80076d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80076ce:	f7ff fa09 	bl	8006ae4 <xTaskResumeAll>
}
 80076d2:	bf00      	nop
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	20001c50 	.word	0x20001c50
 80076e0:	20001c54 	.word	0x20001c54
 80076e4:	e000ed04 	.word	0xe000ed04

080076e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80076f0:	4b0e      	ldr	r3, [pc, #56]	@ (800772c <prvGetNextExpireTime+0x44>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <prvGetNextExpireTime+0x16>
 80076fa:	2201      	movs	r2, #1
 80076fc:	e000      	b.n	8007700 <prvGetNextExpireTime+0x18>
 80076fe:	2200      	movs	r2, #0
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d105      	bne.n	8007718 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800770c:	4b07      	ldr	r3, [pc, #28]	@ (800772c <prvGetNextExpireTime+0x44>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	e001      	b.n	800771c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800771c:	68fb      	ldr	r3, [r7, #12]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	20001c4c 	.word	0x20001c4c

08007730 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007738:	f7ff fa72 	bl	8006c20 <xTaskGetTickCount>
 800773c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800773e:	4b0b      	ldr	r3, [pc, #44]	@ (800776c <prvSampleTimeNow+0x3c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	429a      	cmp	r2, r3
 8007746:	d205      	bcs.n	8007754 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007748:	f000 f93a 	bl	80079c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	e002      	b.n	800775a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800775a:	4a04      	ldr	r2, [pc, #16]	@ (800776c <prvSampleTimeNow+0x3c>)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007760:	68fb      	ldr	r3, [r7, #12]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	20001c5c 	.word	0x20001c5c

08007770 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800777e:	2300      	movs	r3, #0
 8007780:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	429a      	cmp	r2, r3
 8007794:	d812      	bhi.n	80077bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	1ad2      	subs	r2, r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d302      	bcc.n	80077aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077a4:	2301      	movs	r3, #1
 80077a6:	617b      	str	r3, [r7, #20]
 80077a8:	e01b      	b.n	80077e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077aa:	4b10      	ldr	r3, [pc, #64]	@ (80077ec <prvInsertTimerInActiveList+0x7c>)
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3304      	adds	r3, #4
 80077b2:	4619      	mov	r1, r3
 80077b4:	4610      	mov	r0, r2
 80077b6:	f7fe f9e6 	bl	8005b86 <vListInsert>
 80077ba:	e012      	b.n	80077e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d206      	bcs.n	80077d2 <prvInsertTimerInActiveList+0x62>
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d302      	bcc.n	80077d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80077cc:	2301      	movs	r3, #1
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	e007      	b.n	80077e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077d2:	4b07      	ldr	r3, [pc, #28]	@ (80077f0 <prvInsertTimerInActiveList+0x80>)
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3304      	adds	r3, #4
 80077da:	4619      	mov	r1, r3
 80077dc:	4610      	mov	r0, r2
 80077de:	f7fe f9d2 	bl	8005b86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80077e2:	697b      	ldr	r3, [r7, #20]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3718      	adds	r7, #24
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	20001c50 	.word	0x20001c50
 80077f0:	20001c4c 	.word	0x20001c4c

080077f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08e      	sub	sp, #56	@ 0x38
 80077f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077fa:	e0ce      	b.n	800799a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	da19      	bge.n	8007836 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007802:	1d3b      	adds	r3, r7, #4
 8007804:	3304      	adds	r3, #4
 8007806:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10b      	bne.n	8007826 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	61fb      	str	r3, [r7, #28]
}
 8007820:	bf00      	nop
 8007822:	bf00      	nop
 8007824:	e7fd      	b.n	8007822 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800782c:	6850      	ldr	r0, [r2, #4]
 800782e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007830:	6892      	ldr	r2, [r2, #8]
 8007832:	4611      	mov	r1, r2
 8007834:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2b00      	cmp	r3, #0
 800783a:	f2c0 80ae 	blt.w	800799a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d004      	beq.n	8007854 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800784a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784c:	3304      	adds	r3, #4
 800784e:	4618      	mov	r0, r3
 8007850:	f7fe f9d2 	bl	8005bf8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007854:	463b      	mov	r3, r7
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff ff6a 	bl	8007730 <prvSampleTimeNow>
 800785c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b09      	cmp	r3, #9
 8007862:	f200 8097 	bhi.w	8007994 <prvProcessReceivedCommands+0x1a0>
 8007866:	a201      	add	r2, pc, #4	@ (adr r2, 800786c <prvProcessReceivedCommands+0x78>)
 8007868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786c:	08007895 	.word	0x08007895
 8007870:	08007895 	.word	0x08007895
 8007874:	08007895 	.word	0x08007895
 8007878:	0800790b 	.word	0x0800790b
 800787c:	0800791f 	.word	0x0800791f
 8007880:	0800796b 	.word	0x0800796b
 8007884:	08007895 	.word	0x08007895
 8007888:	08007895 	.word	0x08007895
 800788c:	0800790b 	.word	0x0800790b
 8007890:	0800791f 	.word	0x0800791f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007896:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800789a:	f043 0301 	orr.w	r3, r3, #1
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	18d1      	adds	r1, r2, r3
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078b4:	f7ff ff5c 	bl	8007770 <prvInsertTimerInActiveList>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d06c      	beq.n	8007998 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d061      	beq.n	8007998 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	441a      	add	r2, r3
 80078dc:	2300      	movs	r3, #0
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	2300      	movs	r3, #0
 80078e2:	2100      	movs	r1, #0
 80078e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078e6:	f7ff fe01 	bl	80074ec <xTimerGenericCommand>
 80078ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d152      	bne.n	8007998 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80078f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	61bb      	str	r3, [r7, #24]
}
 8007904:	bf00      	nop
 8007906:	bf00      	nop
 8007908:	e7fd      	b.n	8007906 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800790a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007910:	f023 0301 	bic.w	r3, r3, #1
 8007914:	b2da      	uxtb	r2, r3
 8007916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007918:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800791c:	e03d      	b.n	800799a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800791e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007920:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007924:	f043 0301 	orr.w	r3, r3, #1
 8007928:	b2da      	uxtb	r2, r3
 800792a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007934:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10b      	bne.n	8007956 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	617b      	str	r3, [r7, #20]
}
 8007950:	bf00      	nop
 8007952:	bf00      	nop
 8007954:	e7fd      	b.n	8007952 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007958:	699a      	ldr	r2, [r3, #24]
 800795a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795c:	18d1      	adds	r1, r2, r3
 800795e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007962:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007964:	f7ff ff04 	bl	8007770 <prvInsertTimerInActiveList>
					break;
 8007968:	e017      	b.n	800799a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800796a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800796c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007970:	f003 0302 	and.w	r3, r3, #2
 8007974:	2b00      	cmp	r3, #0
 8007976:	d103      	bne.n	8007980 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007978:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800797a:	f000 fbe5 	bl	8008148 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800797e:	e00c      	b.n	800799a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007982:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007986:	f023 0301 	bic.w	r3, r3, #1
 800798a:	b2da      	uxtb	r2, r3
 800798c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800798e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007992:	e002      	b.n	800799a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007994:	bf00      	nop
 8007996:	e000      	b.n	800799a <prvProcessReceivedCommands+0x1a6>
					break;
 8007998:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800799a:	4b08      	ldr	r3, [pc, #32]	@ (80079bc <prvProcessReceivedCommands+0x1c8>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	1d39      	adds	r1, r7, #4
 80079a0:	2200      	movs	r2, #0
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe fbfc 	bl	80061a0 <xQueueReceive>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f47f af26 	bne.w	80077fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80079b0:	bf00      	nop
 80079b2:	bf00      	nop
 80079b4:	3730      	adds	r7, #48	@ 0x30
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20001c54 	.word	0x20001c54

080079c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b088      	sub	sp, #32
 80079c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079c6:	e049      	b.n	8007a5c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079c8:	4b2e      	ldr	r3, [pc, #184]	@ (8007a84 <prvSwitchTimerLists+0xc4>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079d2:	4b2c      	ldr	r3, [pc, #176]	@ (8007a84 <prvSwitchTimerLists+0xc4>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	3304      	adds	r3, #4
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fe f909 	bl	8005bf8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079f4:	f003 0304 	and.w	r3, r3, #4
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d02f      	beq.n	8007a5c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	4413      	add	r3, r2
 8007a04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d90e      	bls.n	8007a2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8007a84 <prvSwitchTimerLists+0xc4>)
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	3304      	adds	r3, #4
 8007a22:	4619      	mov	r1, r3
 8007a24:	4610      	mov	r0, r2
 8007a26:	f7fe f8ae 	bl	8005b86 <vListInsert>
 8007a2a:	e017      	b.n	8007a5c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	2300      	movs	r3, #0
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	2100      	movs	r1, #0
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f7ff fd58 	bl	80074ec <xTimerGenericCommand>
 8007a3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10b      	bne.n	8007a5c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	603b      	str	r3, [r7, #0]
}
 8007a56:	bf00      	nop
 8007a58:	bf00      	nop
 8007a5a:	e7fd      	b.n	8007a58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a5c:	4b09      	ldr	r3, [pc, #36]	@ (8007a84 <prvSwitchTimerLists+0xc4>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1b0      	bne.n	80079c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a66:	4b07      	ldr	r3, [pc, #28]	@ (8007a84 <prvSwitchTimerLists+0xc4>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a6c:	4b06      	ldr	r3, [pc, #24]	@ (8007a88 <prvSwitchTimerLists+0xc8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a04      	ldr	r2, [pc, #16]	@ (8007a84 <prvSwitchTimerLists+0xc4>)
 8007a72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a74:	4a04      	ldr	r2, [pc, #16]	@ (8007a88 <prvSwitchTimerLists+0xc8>)
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	6013      	str	r3, [r2, #0]
}
 8007a7a:	bf00      	nop
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20001c4c 	.word	0x20001c4c
 8007a88:	20001c50 	.word	0x20001c50

08007a8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a92:	f000 f969 	bl	8007d68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a96:	4b15      	ldr	r3, [pc, #84]	@ (8007aec <prvCheckForValidListAndQueue+0x60>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d120      	bne.n	8007ae0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a9e:	4814      	ldr	r0, [pc, #80]	@ (8007af0 <prvCheckForValidListAndQueue+0x64>)
 8007aa0:	f7fe f820 	bl	8005ae4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007aa4:	4813      	ldr	r0, [pc, #76]	@ (8007af4 <prvCheckForValidListAndQueue+0x68>)
 8007aa6:	f7fe f81d 	bl	8005ae4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007aaa:	4b13      	ldr	r3, [pc, #76]	@ (8007af8 <prvCheckForValidListAndQueue+0x6c>)
 8007aac:	4a10      	ldr	r2, [pc, #64]	@ (8007af0 <prvCheckForValidListAndQueue+0x64>)
 8007aae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ab0:	4b12      	ldr	r3, [pc, #72]	@ (8007afc <prvCheckForValidListAndQueue+0x70>)
 8007ab2:	4a10      	ldr	r2, [pc, #64]	@ (8007af4 <prvCheckForValidListAndQueue+0x68>)
 8007ab4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	4b11      	ldr	r3, [pc, #68]	@ (8007b00 <prvCheckForValidListAndQueue+0x74>)
 8007abc:	4a11      	ldr	r2, [pc, #68]	@ (8007b04 <prvCheckForValidListAndQueue+0x78>)
 8007abe:	2110      	movs	r1, #16
 8007ac0:	200a      	movs	r0, #10
 8007ac2:	f7fe f92d 	bl	8005d20 <xQueueGenericCreateStatic>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	4a08      	ldr	r2, [pc, #32]	@ (8007aec <prvCheckForValidListAndQueue+0x60>)
 8007aca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007acc:	4b07      	ldr	r3, [pc, #28]	@ (8007aec <prvCheckForValidListAndQueue+0x60>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d005      	beq.n	8007ae0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ad4:	4b05      	ldr	r3, [pc, #20]	@ (8007aec <prvCheckForValidListAndQueue+0x60>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	490b      	ldr	r1, [pc, #44]	@ (8007b08 <prvCheckForValidListAndQueue+0x7c>)
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fe fd52 	bl	8006584 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ae0:	f000 f974 	bl	8007dcc <vPortExitCritical>
}
 8007ae4:	bf00      	nop
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	20001c54 	.word	0x20001c54
 8007af0:	20001c24 	.word	0x20001c24
 8007af4:	20001c38 	.word	0x20001c38
 8007af8:	20001c4c 	.word	0x20001c4c
 8007afc:	20001c50 	.word	0x20001c50
 8007b00:	20001d00 	.word	0x20001d00
 8007b04:	20001c60 	.word	0x20001c60
 8007b08:	080084ac 	.word	0x080084ac

08007b0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	3b04      	subs	r3, #4
 8007b1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007b24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	3b04      	subs	r3, #4
 8007b2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f023 0201 	bic.w	r2, r3, #1
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	3b04      	subs	r3, #4
 8007b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8007b70 <pxPortInitialiseStack+0x64>)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	3b14      	subs	r3, #20
 8007b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	3b04      	subs	r3, #4
 8007b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f06f 0202 	mvn.w	r2, #2
 8007b5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	3b20      	subs	r3, #32
 8007b60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b62:	68fb      	ldr	r3, [r7, #12]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	08007b75 	.word	0x08007b75

08007b74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b7e:	4b13      	ldr	r3, [pc, #76]	@ (8007bcc <prvTaskExitError+0x58>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b86:	d00b      	beq.n	8007ba0 <prvTaskExitError+0x2c>
	__asm volatile
 8007b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	60fb      	str	r3, [r7, #12]
}
 8007b9a:	bf00      	nop
 8007b9c:	bf00      	nop
 8007b9e:	e7fd      	b.n	8007b9c <prvTaskExitError+0x28>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	60bb      	str	r3, [r7, #8]
}
 8007bb2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bb4:	bf00      	nop
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d0fc      	beq.n	8007bb6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bbc:	bf00      	nop
 8007bbe:	bf00      	nop
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	20000004 	.word	0x20000004

08007bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007bd0:	4b07      	ldr	r3, [pc, #28]	@ (8007bf0 <pxCurrentTCBConst2>)
 8007bd2:	6819      	ldr	r1, [r3, #0]
 8007bd4:	6808      	ldr	r0, [r1, #0]
 8007bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bda:	f380 8809 	msr	PSP, r0
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f04f 0000 	mov.w	r0, #0
 8007be6:	f380 8811 	msr	BASEPRI, r0
 8007bea:	4770      	bx	lr
 8007bec:	f3af 8000 	nop.w

08007bf0 <pxCurrentTCBConst2>:
 8007bf0:	20001724 	.word	0x20001724
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop

08007bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007bf8:	4808      	ldr	r0, [pc, #32]	@ (8007c1c <prvPortStartFirstTask+0x24>)
 8007bfa:	6800      	ldr	r0, [r0, #0]
 8007bfc:	6800      	ldr	r0, [r0, #0]
 8007bfe:	f380 8808 	msr	MSP, r0
 8007c02:	f04f 0000 	mov.w	r0, #0
 8007c06:	f380 8814 	msr	CONTROL, r0
 8007c0a:	b662      	cpsie	i
 8007c0c:	b661      	cpsie	f
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	df00      	svc	0
 8007c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c1a:	bf00      	nop
 8007c1c:	e000ed08 	.word	0xe000ed08

08007c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c26:	4b47      	ldr	r3, [pc, #284]	@ (8007d44 <xPortStartScheduler+0x124>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a47      	ldr	r2, [pc, #284]	@ (8007d48 <xPortStartScheduler+0x128>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d10b      	bne.n	8007c48 <xPortStartScheduler+0x28>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	613b      	str	r3, [r7, #16]
}
 8007c42:	bf00      	nop
 8007c44:	bf00      	nop
 8007c46:	e7fd      	b.n	8007c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c48:	4b3e      	ldr	r3, [pc, #248]	@ (8007d44 <xPortStartScheduler+0x124>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a3f      	ldr	r2, [pc, #252]	@ (8007d4c <xPortStartScheduler+0x12c>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d10b      	bne.n	8007c6a <xPortStartScheduler+0x4a>
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	60fb      	str	r3, [r7, #12]
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop
 8007c68:	e7fd      	b.n	8007c66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c6a:	4b39      	ldr	r3, [pc, #228]	@ (8007d50 <xPortStartScheduler+0x130>)
 8007c6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	22ff      	movs	r2, #255	@ 0xff
 8007c7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c84:	78fb      	ldrb	r3, [r7, #3]
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	4b31      	ldr	r3, [pc, #196]	@ (8007d54 <xPortStartScheduler+0x134>)
 8007c90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c92:	4b31      	ldr	r3, [pc, #196]	@ (8007d58 <xPortStartScheduler+0x138>)
 8007c94:	2207      	movs	r2, #7
 8007c96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c98:	e009      	b.n	8007cae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8007d58 <xPortStartScheduler+0x138>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8007d58 <xPortStartScheduler+0x138>)
 8007ca2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ca4:	78fb      	ldrb	r3, [r7, #3]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cae:	78fb      	ldrb	r3, [r7, #3]
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cb6:	2b80      	cmp	r3, #128	@ 0x80
 8007cb8:	d0ef      	beq.n	8007c9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cba:	4b27      	ldr	r3, [pc, #156]	@ (8007d58 <xPortStartScheduler+0x138>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f1c3 0307 	rsb	r3, r3, #7
 8007cc2:	2b04      	cmp	r3, #4
 8007cc4:	d00b      	beq.n	8007cde <xPortStartScheduler+0xbe>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	60bb      	str	r3, [r7, #8]
}
 8007cd8:	bf00      	nop
 8007cda:	bf00      	nop
 8007cdc:	e7fd      	b.n	8007cda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cde:	4b1e      	ldr	r3, [pc, #120]	@ (8007d58 <xPortStartScheduler+0x138>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	021b      	lsls	r3, r3, #8
 8007ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8007d58 <xPortStartScheduler+0x138>)
 8007ce6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8007d58 <xPortStartScheduler+0x138>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007cf0:	4a19      	ldr	r2, [pc, #100]	@ (8007d58 <xPortStartScheduler+0x138>)
 8007cf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cfc:	4b17      	ldr	r3, [pc, #92]	@ (8007d5c <xPortStartScheduler+0x13c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a16      	ldr	r2, [pc, #88]	@ (8007d5c <xPortStartScheduler+0x13c>)
 8007d02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007d06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d08:	4b14      	ldr	r3, [pc, #80]	@ (8007d5c <xPortStartScheduler+0x13c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a13      	ldr	r2, [pc, #76]	@ (8007d5c <xPortStartScheduler+0x13c>)
 8007d0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007d12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d14:	f000 f8da 	bl	8007ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d18:	4b11      	ldr	r3, [pc, #68]	@ (8007d60 <xPortStartScheduler+0x140>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d1e:	f000 f8f9 	bl	8007f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d22:	4b10      	ldr	r3, [pc, #64]	@ (8007d64 <xPortStartScheduler+0x144>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a0f      	ldr	r2, [pc, #60]	@ (8007d64 <xPortStartScheduler+0x144>)
 8007d28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007d2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d2e:	f7ff ff63 	bl	8007bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d32:	f7ff f83f 	bl	8006db4 <vTaskSwitchContext>
	prvTaskExitError();
 8007d36:	f7ff ff1d 	bl	8007b74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3718      	adds	r7, #24
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	e000ed00 	.word	0xe000ed00
 8007d48:	410fc271 	.word	0x410fc271
 8007d4c:	410fc270 	.word	0x410fc270
 8007d50:	e000e400 	.word	0xe000e400
 8007d54:	20001d50 	.word	0x20001d50
 8007d58:	20001d54 	.word	0x20001d54
 8007d5c:	e000ed20 	.word	0xe000ed20
 8007d60:	20000004 	.word	0x20000004
 8007d64:	e000ef34 	.word	0xe000ef34

08007d68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	607b      	str	r3, [r7, #4]
}
 8007d80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d82:	4b10      	ldr	r3, [pc, #64]	@ (8007dc4 <vPortEnterCritical+0x5c>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3301      	adds	r3, #1
 8007d88:	4a0e      	ldr	r2, [pc, #56]	@ (8007dc4 <vPortEnterCritical+0x5c>)
 8007d8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc4 <vPortEnterCritical+0x5c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d110      	bne.n	8007db6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d94:	4b0c      	ldr	r3, [pc, #48]	@ (8007dc8 <vPortEnterCritical+0x60>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00b      	beq.n	8007db6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	603b      	str	r3, [r7, #0]
}
 8007db0:	bf00      	nop
 8007db2:	bf00      	nop
 8007db4:	e7fd      	b.n	8007db2 <vPortEnterCritical+0x4a>
	}
}
 8007db6:	bf00      	nop
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	20000004 	.word	0x20000004
 8007dc8:	e000ed04 	.word	0xe000ed04

08007dcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007dd2:	4b12      	ldr	r3, [pc, #72]	@ (8007e1c <vPortExitCritical+0x50>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10b      	bne.n	8007df2 <vPortExitCritical+0x26>
	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	607b      	str	r3, [r7, #4]
}
 8007dec:	bf00      	nop
 8007dee:	bf00      	nop
 8007df0:	e7fd      	b.n	8007dee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007df2:	4b0a      	ldr	r3, [pc, #40]	@ (8007e1c <vPortExitCritical+0x50>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	4a08      	ldr	r2, [pc, #32]	@ (8007e1c <vPortExitCritical+0x50>)
 8007dfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007dfc:	4b07      	ldr	r3, [pc, #28]	@ (8007e1c <vPortExitCritical+0x50>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d105      	bne.n	8007e10 <vPortExitCritical+0x44>
 8007e04:	2300      	movs	r3, #0
 8007e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	f383 8811 	msr	BASEPRI, r3
}
 8007e0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	20000004 	.word	0x20000004

08007e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e20:	f3ef 8009 	mrs	r0, PSP
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	4b15      	ldr	r3, [pc, #84]	@ (8007e80 <pxCurrentTCBConst>)
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	f01e 0f10 	tst.w	lr, #16
 8007e30:	bf08      	it	eq
 8007e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3a:	6010      	str	r0, [r2, #0]
 8007e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007e44:	f380 8811 	msr	BASEPRI, r0
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f7fe ffb0 	bl	8006db4 <vTaskSwitchContext>
 8007e54:	f04f 0000 	mov.w	r0, #0
 8007e58:	f380 8811 	msr	BASEPRI, r0
 8007e5c:	bc09      	pop	{r0, r3}
 8007e5e:	6819      	ldr	r1, [r3, #0]
 8007e60:	6808      	ldr	r0, [r1, #0]
 8007e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e66:	f01e 0f10 	tst.w	lr, #16
 8007e6a:	bf08      	it	eq
 8007e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e70:	f380 8809 	msr	PSP, r0
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	f3af 8000 	nop.w

08007e80 <pxCurrentTCBConst>:
 8007e80:	20001724 	.word	0x20001724
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop

08007e88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	607b      	str	r3, [r7, #4]
}
 8007ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ea2:	f7fe fecd 	bl	8006c40 <xTaskIncrementTick>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d003      	beq.n	8007eb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007eac:	4b06      	ldr	r3, [pc, #24]	@ (8007ec8 <xPortSysTickHandler+0x40>)
 8007eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	f383 8811 	msr	BASEPRI, r3
}
 8007ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ec0:	bf00      	nop
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	e000ed04 	.word	0xe000ed04

08007ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ecc:	b480      	push	{r7}
 8007ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8007f00 <vPortSetupTimerInterrupt+0x34>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8007f04 <vPortSetupTimerInterrupt+0x38>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007edc:	4b0a      	ldr	r3, [pc, #40]	@ (8007f08 <vPortSetupTimerInterrupt+0x3c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8007f0c <vPortSetupTimerInterrupt+0x40>)
 8007ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee6:	099b      	lsrs	r3, r3, #6
 8007ee8:	4a09      	ldr	r2, [pc, #36]	@ (8007f10 <vPortSetupTimerInterrupt+0x44>)
 8007eea:	3b01      	subs	r3, #1
 8007eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007eee:	4b04      	ldr	r3, [pc, #16]	@ (8007f00 <vPortSetupTimerInterrupt+0x34>)
 8007ef0:	2207      	movs	r2, #7
 8007ef2:	601a      	str	r2, [r3, #0]
}
 8007ef4:	bf00      	nop
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	e000e010 	.word	0xe000e010
 8007f04:	e000e018 	.word	0xe000e018
 8007f08:	20000000 	.word	0x20000000
 8007f0c:	10624dd3 	.word	0x10624dd3
 8007f10:	e000e014 	.word	0xe000e014

08007f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007f24 <vPortEnableVFP+0x10>
 8007f18:	6801      	ldr	r1, [r0, #0]
 8007f1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007f1e:	6001      	str	r1, [r0, #0]
 8007f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f22:	bf00      	nop
 8007f24:	e000ed88 	.word	0xe000ed88

08007f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f2e:	f3ef 8305 	mrs	r3, IPSR
 8007f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b0f      	cmp	r3, #15
 8007f38:	d915      	bls.n	8007f66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f3a:	4a18      	ldr	r2, [pc, #96]	@ (8007f9c <vPortValidateInterruptPriority+0x74>)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4413      	add	r3, r2
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f44:	4b16      	ldr	r3, [pc, #88]	@ (8007fa0 <vPortValidateInterruptPriority+0x78>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	7afa      	ldrb	r2, [r7, #11]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d20b      	bcs.n	8007f66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	607b      	str	r3, [r7, #4]
}
 8007f60:	bf00      	nop
 8007f62:	bf00      	nop
 8007f64:	e7fd      	b.n	8007f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f66:	4b0f      	ldr	r3, [pc, #60]	@ (8007fa4 <vPortValidateInterruptPriority+0x7c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8007fa8 <vPortValidateInterruptPriority+0x80>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d90b      	bls.n	8007f8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f7a:	f383 8811 	msr	BASEPRI, r3
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	603b      	str	r3, [r7, #0]
}
 8007f88:	bf00      	nop
 8007f8a:	bf00      	nop
 8007f8c:	e7fd      	b.n	8007f8a <vPortValidateInterruptPriority+0x62>
	}
 8007f8e:	bf00      	nop
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	e000e3f0 	.word	0xe000e3f0
 8007fa0:	20001d50 	.word	0x20001d50
 8007fa4:	e000ed0c 	.word	0xe000ed0c
 8007fa8:	20001d54 	.word	0x20001d54

08007fac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08a      	sub	sp, #40	@ 0x28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fb8:	f7fe fd86 	bl	8006ac8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fbc:	4b5c      	ldr	r3, [pc, #368]	@ (8008130 <pvPortMalloc+0x184>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d101      	bne.n	8007fc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fc4:	f000 f924 	bl	8008210 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fc8:	4b5a      	ldr	r3, [pc, #360]	@ (8008134 <pvPortMalloc+0x188>)
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4013      	ands	r3, r2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f040 8095 	bne.w	8008100 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d01e      	beq.n	800801a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007fdc:	2208      	movs	r2, #8
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f003 0307 	and.w	r3, r3, #7
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d015      	beq.n	800801a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f023 0307 	bic.w	r3, r3, #7
 8007ff4:	3308      	adds	r3, #8
 8007ff6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f003 0307 	and.w	r3, r3, #7
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00b      	beq.n	800801a <pvPortMalloc+0x6e>
	__asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	617b      	str	r3, [r7, #20]
}
 8008014:	bf00      	nop
 8008016:	bf00      	nop
 8008018:	e7fd      	b.n	8008016 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d06f      	beq.n	8008100 <pvPortMalloc+0x154>
 8008020:	4b45      	ldr	r3, [pc, #276]	@ (8008138 <pvPortMalloc+0x18c>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	429a      	cmp	r2, r3
 8008028:	d86a      	bhi.n	8008100 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800802a:	4b44      	ldr	r3, [pc, #272]	@ (800813c <pvPortMalloc+0x190>)
 800802c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800802e:	4b43      	ldr	r3, [pc, #268]	@ (800813c <pvPortMalloc+0x190>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008034:	e004      	b.n	8008040 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800803a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	429a      	cmp	r2, r3
 8008048:	d903      	bls.n	8008052 <pvPortMalloc+0xa6>
 800804a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1f1      	bne.n	8008036 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008052:	4b37      	ldr	r3, [pc, #220]	@ (8008130 <pvPortMalloc+0x184>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008058:	429a      	cmp	r2, r3
 800805a:	d051      	beq.n	8008100 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2208      	movs	r2, #8
 8008062:	4413      	add	r3, r2
 8008064:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	1ad2      	subs	r2, r2, r3
 8008076:	2308      	movs	r3, #8
 8008078:	005b      	lsls	r3, r3, #1
 800807a:	429a      	cmp	r2, r3
 800807c:	d920      	bls.n	80080c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800807e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4413      	add	r3, r2
 8008084:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00b      	beq.n	80080a8 <pvPortMalloc+0xfc>
	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	613b      	str	r3, [r7, #16]
}
 80080a2:	bf00      	nop
 80080a4:	bf00      	nop
 80080a6:	e7fd      	b.n	80080a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	1ad2      	subs	r2, r2, r3
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080ba:	69b8      	ldr	r0, [r7, #24]
 80080bc:	f000 f90a 	bl	80082d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080c0:	4b1d      	ldr	r3, [pc, #116]	@ (8008138 <pvPortMalloc+0x18c>)
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	4a1b      	ldr	r2, [pc, #108]	@ (8008138 <pvPortMalloc+0x18c>)
 80080cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008138 <pvPortMalloc+0x18c>)
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	4b1b      	ldr	r3, [pc, #108]	@ (8008140 <pvPortMalloc+0x194>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d203      	bcs.n	80080e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080da:	4b17      	ldr	r3, [pc, #92]	@ (8008138 <pvPortMalloc+0x18c>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a18      	ldr	r2, [pc, #96]	@ (8008140 <pvPortMalloc+0x194>)
 80080e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	4b13      	ldr	r3, [pc, #76]	@ (8008134 <pvPortMalloc+0x188>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	431a      	orrs	r2, r3
 80080ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80080f6:	4b13      	ldr	r3, [pc, #76]	@ (8008144 <pvPortMalloc+0x198>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3301      	adds	r3, #1
 80080fc:	4a11      	ldr	r2, [pc, #68]	@ (8008144 <pvPortMalloc+0x198>)
 80080fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008100:	f7fe fcf0 	bl	8006ae4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	f003 0307 	and.w	r3, r3, #7
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00b      	beq.n	8008126 <pvPortMalloc+0x17a>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	60fb      	str	r3, [r7, #12]
}
 8008120:	bf00      	nop
 8008122:	bf00      	nop
 8008124:	e7fd      	b.n	8008122 <pvPortMalloc+0x176>
	return pvReturn;
 8008126:	69fb      	ldr	r3, [r7, #28]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3728      	adds	r7, #40	@ 0x28
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20002918 	.word	0x20002918
 8008134:	2000292c 	.word	0x2000292c
 8008138:	2000291c 	.word	0x2000291c
 800813c:	20002910 	.word	0x20002910
 8008140:	20002920 	.word	0x20002920
 8008144:	20002924 	.word	0x20002924

08008148 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d04f      	beq.n	80081fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800815a:	2308      	movs	r3, #8
 800815c:	425b      	negs	r3, r3
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	4413      	add	r3, r2
 8008162:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	4b25      	ldr	r3, [pc, #148]	@ (8008204 <vPortFree+0xbc>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4013      	ands	r3, r2
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10b      	bne.n	800818e <vPortFree+0x46>
	__asm volatile
 8008176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	60fb      	str	r3, [r7, #12]
}
 8008188:	bf00      	nop
 800818a:	bf00      	nop
 800818c:	e7fd      	b.n	800818a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00b      	beq.n	80081ae <vPortFree+0x66>
	__asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	60bb      	str	r3, [r7, #8]
}
 80081a8:	bf00      	nop
 80081aa:	bf00      	nop
 80081ac:	e7fd      	b.n	80081aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	4b14      	ldr	r3, [pc, #80]	@ (8008204 <vPortFree+0xbc>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4013      	ands	r3, r2
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d01e      	beq.n	80081fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d11a      	bne.n	80081fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	4b0e      	ldr	r3, [pc, #56]	@ (8008204 <vPortFree+0xbc>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	43db      	mvns	r3, r3
 80081ce:	401a      	ands	r2, r3
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081d4:	f7fe fc78 	bl	8006ac8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008208 <vPortFree+0xc0>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4413      	add	r3, r2
 80081e2:	4a09      	ldr	r2, [pc, #36]	@ (8008208 <vPortFree+0xc0>)
 80081e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081e6:	6938      	ldr	r0, [r7, #16]
 80081e8:	f000 f874 	bl	80082d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80081ec:	4b07      	ldr	r3, [pc, #28]	@ (800820c <vPortFree+0xc4>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3301      	adds	r3, #1
 80081f2:	4a06      	ldr	r2, [pc, #24]	@ (800820c <vPortFree+0xc4>)
 80081f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80081f6:	f7fe fc75 	bl	8006ae4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081fa:	bf00      	nop
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	2000292c 	.word	0x2000292c
 8008208:	2000291c 	.word	0x2000291c
 800820c:	20002928 	.word	0x20002928

08008210 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008216:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800821a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800821c:	4b27      	ldr	r3, [pc, #156]	@ (80082bc <prvHeapInit+0xac>)
 800821e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f003 0307 	and.w	r3, r3, #7
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00c      	beq.n	8008244 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	3307      	adds	r3, #7
 800822e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 0307 	bic.w	r3, r3, #7
 8008236:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	4a1f      	ldr	r2, [pc, #124]	@ (80082bc <prvHeapInit+0xac>)
 8008240:	4413      	add	r3, r2
 8008242:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008248:	4a1d      	ldr	r2, [pc, #116]	@ (80082c0 <prvHeapInit+0xb0>)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800824e:	4b1c      	ldr	r3, [pc, #112]	@ (80082c0 <prvHeapInit+0xb0>)
 8008250:	2200      	movs	r2, #0
 8008252:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	4413      	add	r3, r2
 800825a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800825c:	2208      	movs	r2, #8
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	1a9b      	subs	r3, r3, r2
 8008262:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 0307 	bic.w	r3, r3, #7
 800826a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4a15      	ldr	r2, [pc, #84]	@ (80082c4 <prvHeapInit+0xb4>)
 8008270:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008272:	4b14      	ldr	r3, [pc, #80]	@ (80082c4 <prvHeapInit+0xb4>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2200      	movs	r2, #0
 8008278:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800827a:	4b12      	ldr	r3, [pc, #72]	@ (80082c4 <prvHeapInit+0xb4>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	1ad2      	subs	r2, r2, r3
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008290:	4b0c      	ldr	r3, [pc, #48]	@ (80082c4 <prvHeapInit+0xb4>)
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	4a0a      	ldr	r2, [pc, #40]	@ (80082c8 <prvHeapInit+0xb8>)
 800829e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	4a09      	ldr	r2, [pc, #36]	@ (80082cc <prvHeapInit+0xbc>)
 80082a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082a8:	4b09      	ldr	r3, [pc, #36]	@ (80082d0 <prvHeapInit+0xc0>)
 80082aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80082ae:	601a      	str	r2, [r3, #0]
}
 80082b0:	bf00      	nop
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	20001d58 	.word	0x20001d58
 80082c0:	20002910 	.word	0x20002910
 80082c4:	20002918 	.word	0x20002918
 80082c8:	20002920 	.word	0x20002920
 80082cc:	2000291c 	.word	0x2000291c
 80082d0:	2000292c 	.word	0x2000292c

080082d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082dc:	4b28      	ldr	r3, [pc, #160]	@ (8008380 <prvInsertBlockIntoFreeList+0xac>)
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	e002      	b.n	80082e8 <prvInsertBlockIntoFreeList+0x14>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d8f7      	bhi.n	80082e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	4413      	add	r3, r2
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	429a      	cmp	r2, r3
 8008302:	d108      	bne.n	8008316 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	441a      	add	r2, r3
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	441a      	add	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	429a      	cmp	r2, r3
 8008328:	d118      	bne.n	800835c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	4b15      	ldr	r3, [pc, #84]	@ (8008384 <prvInsertBlockIntoFreeList+0xb0>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	429a      	cmp	r2, r3
 8008334:	d00d      	beq.n	8008352 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	441a      	add	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	601a      	str	r2, [r3, #0]
 8008350:	e008      	b.n	8008364 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008352:	4b0c      	ldr	r3, [pc, #48]	@ (8008384 <prvInsertBlockIntoFreeList+0xb0>)
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	e003      	b.n	8008364 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	429a      	cmp	r2, r3
 800836a:	d002      	beq.n	8008372 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008372:	bf00      	nop
 8008374:	3714      	adds	r7, #20
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	20002910 	.word	0x20002910
 8008384:	20002918 	.word	0x20002918

08008388 <memset>:
 8008388:	4402      	add	r2, r0
 800838a:	4603      	mov	r3, r0
 800838c:	4293      	cmp	r3, r2
 800838e:	d100      	bne.n	8008392 <memset+0xa>
 8008390:	4770      	bx	lr
 8008392:	f803 1b01 	strb.w	r1, [r3], #1
 8008396:	e7f9      	b.n	800838c <memset+0x4>

08008398 <__libc_init_array>:
 8008398:	b570      	push	{r4, r5, r6, lr}
 800839a:	4d0d      	ldr	r5, [pc, #52]	@ (80083d0 <__libc_init_array+0x38>)
 800839c:	4c0d      	ldr	r4, [pc, #52]	@ (80083d4 <__libc_init_array+0x3c>)
 800839e:	1b64      	subs	r4, r4, r5
 80083a0:	10a4      	asrs	r4, r4, #2
 80083a2:	2600      	movs	r6, #0
 80083a4:	42a6      	cmp	r6, r4
 80083a6:	d109      	bne.n	80083bc <__libc_init_array+0x24>
 80083a8:	4d0b      	ldr	r5, [pc, #44]	@ (80083d8 <__libc_init_array+0x40>)
 80083aa:	4c0c      	ldr	r4, [pc, #48]	@ (80083dc <__libc_init_array+0x44>)
 80083ac:	f000 f826 	bl	80083fc <_init>
 80083b0:	1b64      	subs	r4, r4, r5
 80083b2:	10a4      	asrs	r4, r4, #2
 80083b4:	2600      	movs	r6, #0
 80083b6:	42a6      	cmp	r6, r4
 80083b8:	d105      	bne.n	80083c6 <__libc_init_array+0x2e>
 80083ba:	bd70      	pop	{r4, r5, r6, pc}
 80083bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c0:	4798      	blx	r3
 80083c2:	3601      	adds	r6, #1
 80083c4:	e7ee      	b.n	80083a4 <__libc_init_array+0xc>
 80083c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ca:	4798      	blx	r3
 80083cc:	3601      	adds	r6, #1
 80083ce:	e7f2      	b.n	80083b6 <__libc_init_array+0x1e>
 80083d0:	0801dc3c 	.word	0x0801dc3c
 80083d4:	0801dc3c 	.word	0x0801dc3c
 80083d8:	0801dc3c 	.word	0x0801dc3c
 80083dc:	0801dc40 	.word	0x0801dc40

080083e0 <memcpy>:
 80083e0:	440a      	add	r2, r1
 80083e2:	4291      	cmp	r1, r2
 80083e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083e8:	d100      	bne.n	80083ec <memcpy+0xc>
 80083ea:	4770      	bx	lr
 80083ec:	b510      	push	{r4, lr}
 80083ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083f6:	4291      	cmp	r1, r2
 80083f8:	d1f9      	bne.n	80083ee <memcpy+0xe>
 80083fa:	bd10      	pop	{r4, pc}

080083fc <_init>:
 80083fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fe:	bf00      	nop
 8008400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008402:	bc08      	pop	{r3}
 8008404:	469e      	mov	lr, r3
 8008406:	4770      	bx	lr

08008408 <_fini>:
 8008408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840a:	bf00      	nop
 800840c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800840e:	bc08      	pop	{r3}
 8008410:	469e      	mov	lr, r3
 8008412:	4770      	bx	lr
